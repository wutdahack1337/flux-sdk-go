// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: injective/oracle/v1beta1/query.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Query_Params_FullMethodName                 = "/injective.oracle.v1beta1.Query/Params"
	Query_BandRelayers_FullMethodName           = "/injective.oracle.v1beta1.Query/BandRelayers"
	Query_BandPriceStates_FullMethodName        = "/injective.oracle.v1beta1.Query/BandPriceStates"
	Query_BandIBCPriceStates_FullMethodName     = "/injective.oracle.v1beta1.Query/BandIBCPriceStates"
	Query_PriceFeedPriceStates_FullMethodName   = "/injective.oracle.v1beta1.Query/PriceFeedPriceStates"
	Query_CoinbasePriceStates_FullMethodName    = "/injective.oracle.v1beta1.Query/CoinbasePriceStates"
	Query_PythPriceStates_FullMethodName        = "/injective.oracle.v1beta1.Query/PythPriceStates"
	Query_StorkPriceStates_FullMethodName       = "/injective.oracle.v1beta1.Query/StorkPriceStates"
	Query_StorkPublishers_FullMethodName        = "/injective.oracle.v1beta1.Query/StorkPublishers"
	Query_ProviderPriceState_FullMethodName     = "/injective.oracle.v1beta1.Query/ProviderPriceState"
	Query_OracleModuleState_FullMethodName      = "/injective.oracle.v1beta1.Query/OracleModuleState"
	Query_HistoricalPriceRecords_FullMethodName = "/injective.oracle.v1beta1.Query/HistoricalPriceRecords"
	Query_OracleVolatility_FullMethodName       = "/injective.oracle.v1beta1.Query/OracleVolatility"
	Query_OracleProvidersInfo_FullMethodName    = "/injective.oracle.v1beta1.Query/OracleProvidersInfo"
	Query_OracleProviderPrices_FullMethodName   = "/injective.oracle.v1beta1.Query/OracleProviderPrices"
	Query_OraclePrice_FullMethodName            = "/injective.oracle.v1beta1.Query/OraclePrice"
	Query_PythPrice_FullMethodName              = "/injective.oracle.v1beta1.Query/PythPrice"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Query defines the gRPC querier service.
type QueryClient interface {
	// Retrieves oracle params
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Retrieves the band relayers
	BandRelayers(ctx context.Context, in *QueryBandRelayersRequest, opts ...grpc.CallOption) (*QueryBandRelayersResponse, error)
	// Retrieves the state for all band price feeds
	BandPriceStates(ctx context.Context, in *QueryBandPriceStatesRequest, opts ...grpc.CallOption) (*QueryBandPriceStatesResponse, error)
	// Retrieves the state for all band ibc price feeds
	BandIBCPriceStates(ctx context.Context, in *QueryBandIBCPriceStatesRequest, opts ...grpc.CallOption) (*QueryBandIBCPriceStatesResponse, error)
	// Retrieves the state for all price feeds
	PriceFeedPriceStates(ctx context.Context, in *QueryPriceFeedPriceStatesRequest, opts ...grpc.CallOption) (*QueryPriceFeedPriceStatesResponse, error)
	// Retrieves the state for all coinbase price feeds
	CoinbasePriceStates(ctx context.Context, in *QueryCoinbasePriceStatesRequest, opts ...grpc.CallOption) (*QueryCoinbasePriceStatesResponse, error)
	// Retrieves the state for all pyth price feeds
	PythPriceStates(ctx context.Context, in *QueryPythPriceStatesRequest, opts ...grpc.CallOption) (*QueryPythPriceStatesResponse, error)
	// Retrieves the state for all stork price feeds
	StorkPriceStates(ctx context.Context, in *QueryStorkPriceStatesRequest, opts ...grpc.CallOption) (*QueryStorkPriceStatesResponse, error)
	// Retrieves all stork publishers
	StorkPublishers(ctx context.Context, in *QueryStorkPublishersRequest, opts ...grpc.CallOption) (*QueryStorkPublishersResponse, error)
	// Retrieves the state for all provider price feeds
	ProviderPriceState(ctx context.Context, in *QueryProviderPriceStateRequest, opts ...grpc.CallOption) (*QueryProviderPriceStateResponse, error)
	// Retrieves the entire oracle module's state
	OracleModuleState(ctx context.Context, in *QueryModuleStateRequest, opts ...grpc.CallOption) (*QueryModuleStateResponse, error)
	// Retrieves historical price records for a given OracleType and Symbol
	HistoricalPriceRecords(ctx context.Context, in *QueryHistoricalPriceRecordsRequest, opts ...grpc.CallOption) (*QueryHistoricalPriceRecordsResponse, error)
	// Retrieves mixed volatility value for the specified pair of base/quote
	OracleVolatility(ctx context.Context, in *QueryOracleVolatilityRequest, opts ...grpc.CallOption) (*QueryOracleVolatilityResponse, error)
	OracleProvidersInfo(ctx context.Context, in *QueryOracleProvidersInfoRequest, opts ...grpc.CallOption) (*QueryOracleProvidersInfoResponse, error)
	OracleProviderPrices(ctx context.Context, in *QueryOracleProviderPricesRequest, opts ...grpc.CallOption) (*QueryOracleProviderPricesResponse, error)
	OraclePrice(ctx context.Context, in *QueryOraclePriceRequest, opts ...grpc.CallOption) (*QueryOraclePriceResponse, error)
	PythPrice(ctx context.Context, in *QueryPythPriceRequest, opts ...grpc.CallOption) (*QueryPythPriceResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BandRelayers(ctx context.Context, in *QueryBandRelayersRequest, opts ...grpc.CallOption) (*QueryBandRelayersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryBandRelayersResponse)
	err := c.cc.Invoke(ctx, Query_BandRelayers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BandPriceStates(ctx context.Context, in *QueryBandPriceStatesRequest, opts ...grpc.CallOption) (*QueryBandPriceStatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryBandPriceStatesResponse)
	err := c.cc.Invoke(ctx, Query_BandPriceStates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BandIBCPriceStates(ctx context.Context, in *QueryBandIBCPriceStatesRequest, opts ...grpc.CallOption) (*QueryBandIBCPriceStatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryBandIBCPriceStatesResponse)
	err := c.cc.Invoke(ctx, Query_BandIBCPriceStates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PriceFeedPriceStates(ctx context.Context, in *QueryPriceFeedPriceStatesRequest, opts ...grpc.CallOption) (*QueryPriceFeedPriceStatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryPriceFeedPriceStatesResponse)
	err := c.cc.Invoke(ctx, Query_PriceFeedPriceStates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CoinbasePriceStates(ctx context.Context, in *QueryCoinbasePriceStatesRequest, opts ...grpc.CallOption) (*QueryCoinbasePriceStatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryCoinbasePriceStatesResponse)
	err := c.cc.Invoke(ctx, Query_CoinbasePriceStates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PythPriceStates(ctx context.Context, in *QueryPythPriceStatesRequest, opts ...grpc.CallOption) (*QueryPythPriceStatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryPythPriceStatesResponse)
	err := c.cc.Invoke(ctx, Query_PythPriceStates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StorkPriceStates(ctx context.Context, in *QueryStorkPriceStatesRequest, opts ...grpc.CallOption) (*QueryStorkPriceStatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryStorkPriceStatesResponse)
	err := c.cc.Invoke(ctx, Query_StorkPriceStates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StorkPublishers(ctx context.Context, in *QueryStorkPublishersRequest, opts ...grpc.CallOption) (*QueryStorkPublishersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryStorkPublishersResponse)
	err := c.cc.Invoke(ctx, Query_StorkPublishers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProviderPriceState(ctx context.Context, in *QueryProviderPriceStateRequest, opts ...grpc.CallOption) (*QueryProviderPriceStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryProviderPriceStateResponse)
	err := c.cc.Invoke(ctx, Query_ProviderPriceState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OracleModuleState(ctx context.Context, in *QueryModuleStateRequest, opts ...grpc.CallOption) (*QueryModuleStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryModuleStateResponse)
	err := c.cc.Invoke(ctx, Query_OracleModuleState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HistoricalPriceRecords(ctx context.Context, in *QueryHistoricalPriceRecordsRequest, opts ...grpc.CallOption) (*QueryHistoricalPriceRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryHistoricalPriceRecordsResponse)
	err := c.cc.Invoke(ctx, Query_HistoricalPriceRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OracleVolatility(ctx context.Context, in *QueryOracleVolatilityRequest, opts ...grpc.CallOption) (*QueryOracleVolatilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryOracleVolatilityResponse)
	err := c.cc.Invoke(ctx, Query_OracleVolatility_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OracleProvidersInfo(ctx context.Context, in *QueryOracleProvidersInfoRequest, opts ...grpc.CallOption) (*QueryOracleProvidersInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryOracleProvidersInfoResponse)
	err := c.cc.Invoke(ctx, Query_OracleProvidersInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OracleProviderPrices(ctx context.Context, in *QueryOracleProviderPricesRequest, opts ...grpc.CallOption) (*QueryOracleProviderPricesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryOracleProviderPricesResponse)
	err := c.cc.Invoke(ctx, Query_OracleProviderPrices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OraclePrice(ctx context.Context, in *QueryOraclePriceRequest, opts ...grpc.CallOption) (*QueryOraclePriceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryOraclePriceResponse)
	err := c.cc.Invoke(ctx, Query_OraclePrice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PythPrice(ctx context.Context, in *QueryPythPriceRequest, opts ...grpc.CallOption) (*QueryPythPriceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryPythPriceResponse)
	err := c.cc.Invoke(ctx, Query_PythPrice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility.
//
// Query defines the gRPC querier service.
type QueryServer interface {
	// Retrieves oracle params
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Retrieves the band relayers
	BandRelayers(context.Context, *QueryBandRelayersRequest) (*QueryBandRelayersResponse, error)
	// Retrieves the state for all band price feeds
	BandPriceStates(context.Context, *QueryBandPriceStatesRequest) (*QueryBandPriceStatesResponse, error)
	// Retrieves the state for all band ibc price feeds
	BandIBCPriceStates(context.Context, *QueryBandIBCPriceStatesRequest) (*QueryBandIBCPriceStatesResponse, error)
	// Retrieves the state for all price feeds
	PriceFeedPriceStates(context.Context, *QueryPriceFeedPriceStatesRequest) (*QueryPriceFeedPriceStatesResponse, error)
	// Retrieves the state for all coinbase price feeds
	CoinbasePriceStates(context.Context, *QueryCoinbasePriceStatesRequest) (*QueryCoinbasePriceStatesResponse, error)
	// Retrieves the state for all pyth price feeds
	PythPriceStates(context.Context, *QueryPythPriceStatesRequest) (*QueryPythPriceStatesResponse, error)
	// Retrieves the state for all stork price feeds
	StorkPriceStates(context.Context, *QueryStorkPriceStatesRequest) (*QueryStorkPriceStatesResponse, error)
	// Retrieves all stork publishers
	StorkPublishers(context.Context, *QueryStorkPublishersRequest) (*QueryStorkPublishersResponse, error)
	// Retrieves the state for all provider price feeds
	ProviderPriceState(context.Context, *QueryProviderPriceStateRequest) (*QueryProviderPriceStateResponse, error)
	// Retrieves the entire oracle module's state
	OracleModuleState(context.Context, *QueryModuleStateRequest) (*QueryModuleStateResponse, error)
	// Retrieves historical price records for a given OracleType and Symbol
	HistoricalPriceRecords(context.Context, *QueryHistoricalPriceRecordsRequest) (*QueryHistoricalPriceRecordsResponse, error)
	// Retrieves mixed volatility value for the specified pair of base/quote
	OracleVolatility(context.Context, *QueryOracleVolatilityRequest) (*QueryOracleVolatilityResponse, error)
	OracleProvidersInfo(context.Context, *QueryOracleProvidersInfoRequest) (*QueryOracleProvidersInfoResponse, error)
	OracleProviderPrices(context.Context, *QueryOracleProviderPricesRequest) (*QueryOracleProviderPricesResponse, error)
	OraclePrice(context.Context, *QueryOraclePriceRequest) (*QueryOraclePriceResponse, error)
	PythPrice(context.Context, *QueryPythPriceRequest) (*QueryPythPriceResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQueryServer struct{}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) BandRelayers(context.Context, *QueryBandRelayersRequest) (*QueryBandRelayersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BandRelayers not implemented")
}
func (UnimplementedQueryServer) BandPriceStates(context.Context, *QueryBandPriceStatesRequest) (*QueryBandPriceStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BandPriceStates not implemented")
}
func (UnimplementedQueryServer) BandIBCPriceStates(context.Context, *QueryBandIBCPriceStatesRequest) (*QueryBandIBCPriceStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BandIBCPriceStates not implemented")
}
func (UnimplementedQueryServer) PriceFeedPriceStates(context.Context, *QueryPriceFeedPriceStatesRequest) (*QueryPriceFeedPriceStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PriceFeedPriceStates not implemented")
}
func (UnimplementedQueryServer) CoinbasePriceStates(context.Context, *QueryCoinbasePriceStatesRequest) (*QueryCoinbasePriceStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CoinbasePriceStates not implemented")
}
func (UnimplementedQueryServer) PythPriceStates(context.Context, *QueryPythPriceStatesRequest) (*QueryPythPriceStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PythPriceStates not implemented")
}
func (UnimplementedQueryServer) StorkPriceStates(context.Context, *QueryStorkPriceStatesRequest) (*QueryStorkPriceStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorkPriceStates not implemented")
}
func (UnimplementedQueryServer) StorkPublishers(context.Context, *QueryStorkPublishersRequest) (*QueryStorkPublishersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorkPublishers not implemented")
}
func (UnimplementedQueryServer) ProviderPriceState(context.Context, *QueryProviderPriceStateRequest) (*QueryProviderPriceStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProviderPriceState not implemented")
}
func (UnimplementedQueryServer) OracleModuleState(context.Context, *QueryModuleStateRequest) (*QueryModuleStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleModuleState not implemented")
}
func (UnimplementedQueryServer) HistoricalPriceRecords(context.Context, *QueryHistoricalPriceRecordsRequest) (*QueryHistoricalPriceRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoricalPriceRecords not implemented")
}
func (UnimplementedQueryServer) OracleVolatility(context.Context, *QueryOracleVolatilityRequest) (*QueryOracleVolatilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleVolatility not implemented")
}
func (UnimplementedQueryServer) OracleProvidersInfo(context.Context, *QueryOracleProvidersInfoRequest) (*QueryOracleProvidersInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleProvidersInfo not implemented")
}
func (UnimplementedQueryServer) OracleProviderPrices(context.Context, *QueryOracleProviderPricesRequest) (*QueryOracleProviderPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OracleProviderPrices not implemented")
}
func (UnimplementedQueryServer) OraclePrice(context.Context, *QueryOraclePriceRequest) (*QueryOraclePriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OraclePrice not implemented")
}
func (UnimplementedQueryServer) PythPrice(context.Context, *QueryPythPriceRequest) (*QueryPythPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PythPrice not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}
func (UnimplementedQueryServer) testEmbeddedByValue()               {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	// If the following call pancis, it indicates UnimplementedQueryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BandRelayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBandRelayersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BandRelayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BandRelayers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BandRelayers(ctx, req.(*QueryBandRelayersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BandPriceStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBandPriceStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BandPriceStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BandPriceStates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BandPriceStates(ctx, req.(*QueryBandPriceStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BandIBCPriceStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBandIBCPriceStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BandIBCPriceStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BandIBCPriceStates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BandIBCPriceStates(ctx, req.(*QueryBandIBCPriceStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PriceFeedPriceStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPriceFeedPriceStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PriceFeedPriceStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PriceFeedPriceStates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PriceFeedPriceStates(ctx, req.(*QueryPriceFeedPriceStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CoinbasePriceStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCoinbasePriceStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CoinbasePriceStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CoinbasePriceStates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CoinbasePriceStates(ctx, req.(*QueryCoinbasePriceStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PythPriceStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPythPriceStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PythPriceStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PythPriceStates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PythPriceStates(ctx, req.(*QueryPythPriceStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StorkPriceStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStorkPriceStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StorkPriceStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_StorkPriceStates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StorkPriceStates(ctx, req.(*QueryStorkPriceStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StorkPublishers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStorkPublishersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StorkPublishers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_StorkPublishers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StorkPublishers(ctx, req.(*QueryStorkPublishersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProviderPriceState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProviderPriceStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProviderPriceState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ProviderPriceState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProviderPriceState(ctx, req.(*QueryProviderPriceStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OracleModuleState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryModuleStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OracleModuleState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OracleModuleState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OracleModuleState(ctx, req.(*QueryModuleStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HistoricalPriceRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHistoricalPriceRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HistoricalPriceRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_HistoricalPriceRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HistoricalPriceRecords(ctx, req.(*QueryHistoricalPriceRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OracleVolatility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleVolatilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OracleVolatility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OracleVolatility_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OracleVolatility(ctx, req.(*QueryOracleVolatilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OracleProvidersInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleProvidersInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OracleProvidersInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OracleProvidersInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OracleProvidersInfo(ctx, req.(*QueryOracleProvidersInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OracleProviderPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleProviderPricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OracleProviderPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OracleProviderPrices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OracleProviderPrices(ctx, req.(*QueryOracleProviderPricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OraclePrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOraclePriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OraclePrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OraclePrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OraclePrice(ctx, req.(*QueryOraclePriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PythPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPythPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PythPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PythPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PythPrice(ctx, req.(*QueryPythPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "injective.oracle.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "BandRelayers",
			Handler:    _Query_BandRelayers_Handler,
		},
		{
			MethodName: "BandPriceStates",
			Handler:    _Query_BandPriceStates_Handler,
		},
		{
			MethodName: "BandIBCPriceStates",
			Handler:    _Query_BandIBCPriceStates_Handler,
		},
		{
			MethodName: "PriceFeedPriceStates",
			Handler:    _Query_PriceFeedPriceStates_Handler,
		},
		{
			MethodName: "CoinbasePriceStates",
			Handler:    _Query_CoinbasePriceStates_Handler,
		},
		{
			MethodName: "PythPriceStates",
			Handler:    _Query_PythPriceStates_Handler,
		},
		{
			MethodName: "StorkPriceStates",
			Handler:    _Query_StorkPriceStates_Handler,
		},
		{
			MethodName: "StorkPublishers",
			Handler:    _Query_StorkPublishers_Handler,
		},
		{
			MethodName: "ProviderPriceState",
			Handler:    _Query_ProviderPriceState_Handler,
		},
		{
			MethodName: "OracleModuleState",
			Handler:    _Query_OracleModuleState_Handler,
		},
		{
			MethodName: "HistoricalPriceRecords",
			Handler:    _Query_HistoricalPriceRecords_Handler,
		},
		{
			MethodName: "OracleVolatility",
			Handler:    _Query_OracleVolatility_Handler,
		},
		{
			MethodName: "OracleProvidersInfo",
			Handler:    _Query_OracleProvidersInfo_Handler,
		},
		{
			MethodName: "OracleProviderPrices",
			Handler:    _Query_OracleProviderPrices_Handler,
		},
		{
			MethodName: "OraclePrice",
			Handler:    _Query_OraclePrice_Handler,
		},
		{
			MethodName: "PythPrice",
			Handler:    _Query_PythPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "injective/oracle/v1beta1/query.proto",
}
