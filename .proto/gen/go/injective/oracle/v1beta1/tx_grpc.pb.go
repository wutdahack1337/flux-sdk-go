// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: injective/oracle/v1beta1/tx.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Msg_RelayProviderPrices_FullMethodName   = "/injective.oracle.v1beta1.Msg/RelayProviderPrices"
	Msg_RelayPriceFeedPrice_FullMethodName   = "/injective.oracle.v1beta1.Msg/RelayPriceFeedPrice"
	Msg_RelayBandRates_FullMethodName        = "/injective.oracle.v1beta1.Msg/RelayBandRates"
	Msg_RequestBandIBCRates_FullMethodName   = "/injective.oracle.v1beta1.Msg/RequestBandIBCRates"
	Msg_RelayCoinbaseMessages_FullMethodName = "/injective.oracle.v1beta1.Msg/RelayCoinbaseMessages"
	Msg_RelayStorkMessage_FullMethodName     = "/injective.oracle.v1beta1.Msg/RelayStorkMessage"
	Msg_RelayPythPrices_FullMethodName       = "/injective.oracle.v1beta1.Msg/RelayPythPrices"
	Msg_UpdateParams_FullMethodName          = "/injective.oracle.v1beta1.Msg/UpdateParams"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Msg defines the oracle Msg service.
type MsgClient interface {
	// RelayProviderPrice defines a method for relaying a price for a
	// provider-based oracle
	RelayProviderPrices(ctx context.Context, in *MsgRelayProviderPrices, opts ...grpc.CallOption) (*MsgRelayProviderPricesResponse, error)
	// RelayPriceFeedPrice defines a method for relaying a price for a price
	// feeder-based oracle
	RelayPriceFeedPrice(ctx context.Context, in *MsgRelayPriceFeedPrice, opts ...grpc.CallOption) (*MsgRelayPriceFeedPriceResponse, error)
	// RelayBandRates defines a method for relaying rates from Band
	RelayBandRates(ctx context.Context, in *MsgRelayBandRates, opts ...grpc.CallOption) (*MsgRelayBandRatesResponse, error)
	// RequestBandIBCRates defines a method for fetching rates from Band ibc
	RequestBandIBCRates(ctx context.Context, in *MsgRequestBandIBCRates, opts ...grpc.CallOption) (*MsgRequestBandIBCRatesResponse, error)
	// RelayCoinbaseMessages defines a method for relaying price messages from
	// Coinbase API
	RelayCoinbaseMessages(ctx context.Context, in *MsgRelayCoinbaseMessages, opts ...grpc.CallOption) (*MsgRelayCoinbaseMessagesResponse, error)
	// RelayStorkMessage defines a method for relaying price message from
	// Stork API
	RelayStorkMessage(ctx context.Context, in *MsgRelayStorkPrices, opts ...grpc.CallOption) (*MsgRelayStorkPricesResponse, error)
	// RelayPythPrices defines a method for relaying rates from the Pyth contract
	RelayPythPrices(ctx context.Context, in *MsgRelayPythPrices, opts ...grpc.CallOption) (*MsgRelayPythPricesResponse, error)
	// UpdateParams enables updating oracle module's params via governance
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RelayProviderPrices(ctx context.Context, in *MsgRelayProviderPrices, opts ...grpc.CallOption) (*MsgRelayProviderPricesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgRelayProviderPricesResponse)
	err := c.cc.Invoke(ctx, Msg_RelayProviderPrices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RelayPriceFeedPrice(ctx context.Context, in *MsgRelayPriceFeedPrice, opts ...grpc.CallOption) (*MsgRelayPriceFeedPriceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgRelayPriceFeedPriceResponse)
	err := c.cc.Invoke(ctx, Msg_RelayPriceFeedPrice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RelayBandRates(ctx context.Context, in *MsgRelayBandRates, opts ...grpc.CallOption) (*MsgRelayBandRatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgRelayBandRatesResponse)
	err := c.cc.Invoke(ctx, Msg_RelayBandRates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RequestBandIBCRates(ctx context.Context, in *MsgRequestBandIBCRates, opts ...grpc.CallOption) (*MsgRequestBandIBCRatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgRequestBandIBCRatesResponse)
	err := c.cc.Invoke(ctx, Msg_RequestBandIBCRates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RelayCoinbaseMessages(ctx context.Context, in *MsgRelayCoinbaseMessages, opts ...grpc.CallOption) (*MsgRelayCoinbaseMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgRelayCoinbaseMessagesResponse)
	err := c.cc.Invoke(ctx, Msg_RelayCoinbaseMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RelayStorkMessage(ctx context.Context, in *MsgRelayStorkPrices, opts ...grpc.CallOption) (*MsgRelayStorkPricesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgRelayStorkPricesResponse)
	err := c.cc.Invoke(ctx, Msg_RelayStorkMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RelayPythPrices(ctx context.Context, in *MsgRelayPythPrices, opts ...grpc.CallOption) (*MsgRelayPythPricesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgRelayPythPricesResponse)
	err := c.cc.Invoke(ctx, Msg_RelayPythPrices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility.
//
// Msg defines the oracle Msg service.
type MsgServer interface {
	// RelayProviderPrice defines a method for relaying a price for a
	// provider-based oracle
	RelayProviderPrices(context.Context, *MsgRelayProviderPrices) (*MsgRelayProviderPricesResponse, error)
	// RelayPriceFeedPrice defines a method for relaying a price for a price
	// feeder-based oracle
	RelayPriceFeedPrice(context.Context, *MsgRelayPriceFeedPrice) (*MsgRelayPriceFeedPriceResponse, error)
	// RelayBandRates defines a method for relaying rates from Band
	RelayBandRates(context.Context, *MsgRelayBandRates) (*MsgRelayBandRatesResponse, error)
	// RequestBandIBCRates defines a method for fetching rates from Band ibc
	RequestBandIBCRates(context.Context, *MsgRequestBandIBCRates) (*MsgRequestBandIBCRatesResponse, error)
	// RelayCoinbaseMessages defines a method for relaying price messages from
	// Coinbase API
	RelayCoinbaseMessages(context.Context, *MsgRelayCoinbaseMessages) (*MsgRelayCoinbaseMessagesResponse, error)
	// RelayStorkMessage defines a method for relaying price message from
	// Stork API
	RelayStorkMessage(context.Context, *MsgRelayStorkPrices) (*MsgRelayStorkPricesResponse, error)
	// RelayPythPrices defines a method for relaying rates from the Pyth contract
	RelayPythPrices(context.Context, *MsgRelayPythPrices) (*MsgRelayPythPricesResponse, error)
	// UpdateParams enables updating oracle module's params via governance
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMsgServer struct{}

func (UnimplementedMsgServer) RelayProviderPrices(context.Context, *MsgRelayProviderPrices) (*MsgRelayProviderPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayProviderPrices not implemented")
}
func (UnimplementedMsgServer) RelayPriceFeedPrice(context.Context, *MsgRelayPriceFeedPrice) (*MsgRelayPriceFeedPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayPriceFeedPrice not implemented")
}
func (UnimplementedMsgServer) RelayBandRates(context.Context, *MsgRelayBandRates) (*MsgRelayBandRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayBandRates not implemented")
}
func (UnimplementedMsgServer) RequestBandIBCRates(context.Context, *MsgRequestBandIBCRates) (*MsgRequestBandIBCRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestBandIBCRates not implemented")
}
func (UnimplementedMsgServer) RelayCoinbaseMessages(context.Context, *MsgRelayCoinbaseMessages) (*MsgRelayCoinbaseMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayCoinbaseMessages not implemented")
}
func (UnimplementedMsgServer) RelayStorkMessage(context.Context, *MsgRelayStorkPrices) (*MsgRelayStorkPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayStorkMessage not implemented")
}
func (UnimplementedMsgServer) RelayPythPrices(context.Context, *MsgRelayPythPrices) (*MsgRelayPythPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayPythPrices not implemented")
}
func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}
func (UnimplementedMsgServer) testEmbeddedByValue()             {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	// If the following call pancis, it indicates UnimplementedMsgServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_RelayProviderPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRelayProviderPrices)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RelayProviderPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RelayProviderPrices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RelayProviderPrices(ctx, req.(*MsgRelayProviderPrices))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RelayPriceFeedPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRelayPriceFeedPrice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RelayPriceFeedPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RelayPriceFeedPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RelayPriceFeedPrice(ctx, req.(*MsgRelayPriceFeedPrice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RelayBandRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRelayBandRates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RelayBandRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RelayBandRates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RelayBandRates(ctx, req.(*MsgRelayBandRates))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RequestBandIBCRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestBandIBCRates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestBandIBCRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RequestBandIBCRates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestBandIBCRates(ctx, req.(*MsgRequestBandIBCRates))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RelayCoinbaseMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRelayCoinbaseMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RelayCoinbaseMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RelayCoinbaseMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RelayCoinbaseMessages(ctx, req.(*MsgRelayCoinbaseMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RelayStorkMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRelayStorkPrices)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RelayStorkMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RelayStorkMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RelayStorkMessage(ctx, req.(*MsgRelayStorkPrices))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RelayPythPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRelayPythPrices)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RelayPythPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RelayPythPrices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RelayPythPrices(ctx, req.(*MsgRelayPythPrices))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "injective.oracle.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RelayProviderPrices",
			Handler:    _Msg_RelayProviderPrices_Handler,
		},
		{
			MethodName: "RelayPriceFeedPrice",
			Handler:    _Msg_RelayPriceFeedPrice_Handler,
		},
		{
			MethodName: "RelayBandRates",
			Handler:    _Msg_RelayBandRates_Handler,
		},
		{
			MethodName: "RequestBandIBCRates",
			Handler:    _Msg_RequestBandIBCRates_Handler,
		},
		{
			MethodName: "RelayCoinbaseMessages",
			Handler:    _Msg_RelayCoinbaseMessages_Handler,
		},
		{
			MethodName: "RelayStorkMessage",
			Handler:    _Msg_RelayStorkMessage_Handler,
		},
		{
			MethodName: "RelayPythPrices",
			Handler:    _Msg_RelayPythPrices_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "injective/oracle/v1beta1/tx.proto",
}
