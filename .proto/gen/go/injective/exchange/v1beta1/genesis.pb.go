// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: injective/exchange/v1beta1/genesis.proto

package types

import (
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GenesisState defines the exchange module's genesis state.
type GenesisState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// params defines all the parameters of related to exchange.
	Params *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	// spot_markets is an array containing the genesis trade pairs
	SpotMarkets []*SpotMarket `protobuf:"bytes,2,rep,name=spot_markets,json=spotMarkets,proto3" json:"spot_markets,omitempty"`
	// derivative_markets is an array containing the genesis derivative markets
	DerivativeMarkets []*DerivativeMarket `protobuf:"bytes,3,rep,name=derivative_markets,json=derivativeMarkets,proto3" json:"derivative_markets,omitempty"`
	// spot_orderbook defines the spot exchange limit orderbook active at genesis.
	SpotOrderbook []*SpotOrderBook `protobuf:"bytes,4,rep,name=spot_orderbook,json=spotOrderbook,proto3" json:"spot_orderbook,omitempty"`
	// derivative_orderbook defines the derivative exchange limit orderbook active
	// at genesis.
	DerivativeOrderbook []*DerivativeOrderBook `protobuf:"bytes,5,rep,name=derivative_orderbook,json=derivativeOrderbook,proto3" json:"derivative_orderbook,omitempty"`
	// balances defines the exchange users balances active at genesis.
	Balances []*Balance `protobuf:"bytes,6,rep,name=balances,proto3" json:"balances,omitempty"`
	// positions defines the exchange derivative positions at genesis
	Positions []*DerivativePosition `protobuf:"bytes,7,rep,name=positions,proto3" json:"positions,omitempty"`
	// subaccount_trade_nonces defines the subaccount trade nonces for the
	// subaccounts at genesis
	SubaccountTradeNonces []*SubaccountNonce `protobuf:"bytes,8,rep,name=subaccount_trade_nonces,json=subaccountTradeNonces,proto3" json:"subaccount_trade_nonces,omitempty"`
	// expiry_futures_market_info defines the market info for the expiry futures
	// markets at genesis
	ExpiryFuturesMarketInfoState []*ExpiryFuturesMarketInfoState `protobuf:"bytes,9,rep,name=expiry_futures_market_info_state,json=expiryFuturesMarketInfoState,proto3" json:"expiry_futures_market_info_state,omitempty"`
	// perpetual_market_info defines the market info for the perpetual derivative
	// markets at genesis
	PerpetualMarketInfo []*PerpetualMarketInfo `protobuf:"bytes,10,rep,name=perpetual_market_info,json=perpetualMarketInfo,proto3" json:"perpetual_market_info,omitempty"`
	// perpetual_market_funding_state defines the funding state for the perpetual
	// derivative markets at genesis
	PerpetualMarketFundingState []*PerpetualMarketFundingState `protobuf:"bytes,11,rep,name=perpetual_market_funding_state,json=perpetualMarketFundingState,proto3" json:"perpetual_market_funding_state,omitempty"`
	// derivative_market_settlement_scheduled defines the scheduled markets for
	// settlement at genesis
	DerivativeMarketSettlementScheduled []*DerivativeMarketSettlementInfo `protobuf:"bytes,12,rep,name=derivative_market_settlement_scheduled,json=derivativeMarketSettlementScheduled,proto3" json:"derivative_market_settlement_scheduled,omitempty"`
	// sets spot markets as enabled
	IsSpotExchangeEnabled bool `protobuf:"varint,13,opt,name=is_spot_exchange_enabled,json=isSpotExchangeEnabled,proto3" json:"is_spot_exchange_enabled,omitempty"`
	// sets derivative markets as enabled
	IsDerivativesExchangeEnabled bool `protobuf:"varint,14,opt,name=is_derivatives_exchange_enabled,json=isDerivativesExchangeEnabled,proto3" json:"is_derivatives_exchange_enabled,omitempty"`
	// the current trading reward campaign info
	TradingRewardCampaignInfo *TradingRewardCampaignInfo `protobuf:"bytes,15,opt,name=trading_reward_campaign_info,json=tradingRewardCampaignInfo,proto3" json:"trading_reward_campaign_info,omitempty"`
	// the current and upcoming trading reward campaign pools
	TradingRewardPoolCampaignSchedule []*CampaignRewardPool `protobuf:"bytes,16,rep,name=trading_reward_pool_campaign_schedule,json=tradingRewardPoolCampaignSchedule,proto3" json:"trading_reward_pool_campaign_schedule,omitempty"`
	// the current trading reward account points
	TradingRewardCampaignAccountPoints []*TradingRewardCampaignAccountPoints `protobuf:"bytes,17,rep,name=trading_reward_campaign_account_points,json=tradingRewardCampaignAccountPoints,proto3" json:"trading_reward_campaign_account_points,omitempty"`
	// the fee discount schedule
	FeeDiscountSchedule *FeeDiscountSchedule `protobuf:"bytes,18,opt,name=fee_discount_schedule,json=feeDiscountSchedule,proto3" json:"fee_discount_schedule,omitempty"`
	// the cached fee discount account tiers with TTL
	FeeDiscountAccountTierTtl []*FeeDiscountAccountTierTTL `protobuf:"bytes,19,rep,name=fee_discount_account_tier_ttl,json=feeDiscountAccountTierTtl,proto3" json:"fee_discount_account_tier_ttl,omitempty"`
	// the fee discount paid by accounts in all buckets
	FeeDiscountBucketVolumeAccounts []*FeeDiscountBucketVolumeAccounts `protobuf:"bytes,20,rep,name=fee_discount_bucket_volume_accounts,json=feeDiscountBucketVolumeAccounts,proto3" json:"fee_discount_bucket_volume_accounts,omitempty"`
	// sets the first fee cycle as finished
	IsFirstFeeCycleFinished bool `protobuf:"varint,21,opt,name=is_first_fee_cycle_finished,json=isFirstFeeCycleFinished,proto3" json:"is_first_fee_cycle_finished,omitempty"`
	// the current and upcoming trading reward campaign pending pools
	PendingTradingRewardPoolCampaignSchedule []*CampaignRewardPool `protobuf:"bytes,22,rep,name=pending_trading_reward_pool_campaign_schedule,json=pendingTradingRewardPoolCampaignSchedule,proto3" json:"pending_trading_reward_pool_campaign_schedule,omitempty"`
	// the pending trading reward account points
	PendingTradingRewardCampaignAccountPoints []*TradingRewardCampaignAccountPendingPoints `protobuf:"bytes,23,rep,name=pending_trading_reward_campaign_account_points,json=pendingTradingRewardCampaignAccountPoints,proto3" json:"pending_trading_reward_campaign_account_points,omitempty"`
	// the addresses opting out of trading rewards
	RewardsOptOutAddresses []string        `protobuf:"bytes,24,rep,name=rewards_opt_out_addresses,json=rewardsOptOutAddresses,proto3" json:"rewards_opt_out_addresses,omitempty"`
	HistoricalTradeRecords []*TradeRecords `protobuf:"bytes,25,rep,name=historical_trade_records,json=historicalTradeRecords,proto3" json:"historical_trade_records,omitempty"`
	// binary_options_markets is an array containing the genesis binary options
	// markets
	BinaryOptionsMarkets []*BinaryOptionsMarket `protobuf:"bytes,26,rep,name=binary_options_markets,json=binaryOptionsMarkets,proto3" json:"binary_options_markets,omitempty"`
	// binary_options_markets_scheduled_for_settlement contains the marketIDs of
	// binary options markets scheduled for next-block settlement
	BinaryOptionsMarketIdsScheduledForSettlement []string `protobuf:"bytes,27,rep,name=binary_options_market_ids_scheduled_for_settlement,json=binaryOptionsMarketIdsScheduledForSettlement,proto3" json:"binary_options_market_ids_scheduled_for_settlement,omitempty"`
	// spot_market_ids_scheduled_to_force_close defines the scheduled markets for
	// forced closings at genesis
	SpotMarketIdsScheduledToForceClose []string `protobuf:"bytes,28,rep,name=spot_market_ids_scheduled_to_force_close,json=spotMarketIdsScheduledToForceClose,proto3" json:"spot_market_ids_scheduled_to_force_close,omitempty"`
	// denom_decimals defines the denom decimals for the exchange.
	DenomDecimals []*DenomDecimals `protobuf:"bytes,29,rep,name=denom_decimals,json=denomDecimals,proto3" json:"denom_decimals,omitempty"`
	// conditional_derivative_orderbook contains conditional orderbooks for all
	// markets (both lmit and market conditional orders)
	ConditionalDerivativeOrderbooks []*ConditionalDerivativeOrderBook `protobuf:"bytes,30,rep,name=conditional_derivative_orderbooks,json=conditionalDerivativeOrderbooks,proto3" json:"conditional_derivative_orderbooks,omitempty"`
	// market_fee_multipliers contains any non-default atomic order fee
	// multipliers
	MarketFeeMultipliers []*MarketFeeMultiplier             `protobuf:"bytes,31,rep,name=market_fee_multipliers,json=marketFeeMultipliers,proto3" json:"market_fee_multipliers,omitempty"`
	OrderbookSequences   []*OrderbookSequence               `protobuf:"bytes,32,rep,name=orderbook_sequences,json=orderbookSequences,proto3" json:"orderbook_sequences,omitempty"`
	SubaccountVolumes    []*AggregateSubaccountVolumeRecord `protobuf:"bytes,33,rep,name=subaccount_volumes,json=subaccountVolumes,proto3" json:"subaccount_volumes,omitempty"`
	MarketVolumes        []*MarketVolume                    `protobuf:"bytes,34,rep,name=market_volumes,json=marketVolumes,proto3" json:"market_volumes,omitempty"`
	GrantAuthorizations  []*FullGrantAuthorizations         `protobuf:"bytes,35,rep,name=grant_authorizations,json=grantAuthorizations,proto3" json:"grant_authorizations,omitempty"`
	ActiveGrants         []*FullActiveGrant                 `protobuf:"bytes,36,rep,name=active_grants,json=activeGrants,proto3" json:"active_grants,omitempty"`
	DenomMinNotionals    []*DenomMinNotional                `protobuf:"bytes,37,rep,name=denom_min_notionals,json=denomMinNotionals,proto3" json:"denom_min_notionals,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GenesisState) Reset() {
	*x = GenesisState{}
	mi := &file_injective_exchange_v1beta1_genesis_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenesisState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenesisState) ProtoMessage() {}

func (x *GenesisState) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v1beta1_genesis_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenesisState.ProtoReflect.Descriptor instead.
func (*GenesisState) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v1beta1_genesis_proto_rawDescGZIP(), []int{0}
}

func (x *GenesisState) GetParams() *Params {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *GenesisState) GetSpotMarkets() []*SpotMarket {
	if x != nil {
		return x.SpotMarkets
	}
	return nil
}

func (x *GenesisState) GetDerivativeMarkets() []*DerivativeMarket {
	if x != nil {
		return x.DerivativeMarkets
	}
	return nil
}

func (x *GenesisState) GetSpotOrderbook() []*SpotOrderBook {
	if x != nil {
		return x.SpotOrderbook
	}
	return nil
}

func (x *GenesisState) GetDerivativeOrderbook() []*DerivativeOrderBook {
	if x != nil {
		return x.DerivativeOrderbook
	}
	return nil
}

func (x *GenesisState) GetBalances() []*Balance {
	if x != nil {
		return x.Balances
	}
	return nil
}

func (x *GenesisState) GetPositions() []*DerivativePosition {
	if x != nil {
		return x.Positions
	}
	return nil
}

func (x *GenesisState) GetSubaccountTradeNonces() []*SubaccountNonce {
	if x != nil {
		return x.SubaccountTradeNonces
	}
	return nil
}

func (x *GenesisState) GetExpiryFuturesMarketInfoState() []*ExpiryFuturesMarketInfoState {
	if x != nil {
		return x.ExpiryFuturesMarketInfoState
	}
	return nil
}

func (x *GenesisState) GetPerpetualMarketInfo() []*PerpetualMarketInfo {
	if x != nil {
		return x.PerpetualMarketInfo
	}
	return nil
}

func (x *GenesisState) GetPerpetualMarketFundingState() []*PerpetualMarketFundingState {
	if x != nil {
		return x.PerpetualMarketFundingState
	}
	return nil
}

func (x *GenesisState) GetDerivativeMarketSettlementScheduled() []*DerivativeMarketSettlementInfo {
	if x != nil {
		return x.DerivativeMarketSettlementScheduled
	}
	return nil
}

func (x *GenesisState) GetIsSpotExchangeEnabled() bool {
	if x != nil {
		return x.IsSpotExchangeEnabled
	}
	return false
}

func (x *GenesisState) GetIsDerivativesExchangeEnabled() bool {
	if x != nil {
		return x.IsDerivativesExchangeEnabled
	}
	return false
}

func (x *GenesisState) GetTradingRewardCampaignInfo() *TradingRewardCampaignInfo {
	if x != nil {
		return x.TradingRewardCampaignInfo
	}
	return nil
}

func (x *GenesisState) GetTradingRewardPoolCampaignSchedule() []*CampaignRewardPool {
	if x != nil {
		return x.TradingRewardPoolCampaignSchedule
	}
	return nil
}

func (x *GenesisState) GetTradingRewardCampaignAccountPoints() []*TradingRewardCampaignAccountPoints {
	if x != nil {
		return x.TradingRewardCampaignAccountPoints
	}
	return nil
}

func (x *GenesisState) GetFeeDiscountSchedule() *FeeDiscountSchedule {
	if x != nil {
		return x.FeeDiscountSchedule
	}
	return nil
}

func (x *GenesisState) GetFeeDiscountAccountTierTtl() []*FeeDiscountAccountTierTTL {
	if x != nil {
		return x.FeeDiscountAccountTierTtl
	}
	return nil
}

func (x *GenesisState) GetFeeDiscountBucketVolumeAccounts() []*FeeDiscountBucketVolumeAccounts {
	if x != nil {
		return x.FeeDiscountBucketVolumeAccounts
	}
	return nil
}

func (x *GenesisState) GetIsFirstFeeCycleFinished() bool {
	if x != nil {
		return x.IsFirstFeeCycleFinished
	}
	return false
}

func (x *GenesisState) GetPendingTradingRewardPoolCampaignSchedule() []*CampaignRewardPool {
	if x != nil {
		return x.PendingTradingRewardPoolCampaignSchedule
	}
	return nil
}

func (x *GenesisState) GetPendingTradingRewardCampaignAccountPoints() []*TradingRewardCampaignAccountPendingPoints {
	if x != nil {
		return x.PendingTradingRewardCampaignAccountPoints
	}
	return nil
}

func (x *GenesisState) GetRewardsOptOutAddresses() []string {
	if x != nil {
		return x.RewardsOptOutAddresses
	}
	return nil
}

func (x *GenesisState) GetHistoricalTradeRecords() []*TradeRecords {
	if x != nil {
		return x.HistoricalTradeRecords
	}
	return nil
}

func (x *GenesisState) GetBinaryOptionsMarkets() []*BinaryOptionsMarket {
	if x != nil {
		return x.BinaryOptionsMarkets
	}
	return nil
}

func (x *GenesisState) GetBinaryOptionsMarketIdsScheduledForSettlement() []string {
	if x != nil {
		return x.BinaryOptionsMarketIdsScheduledForSettlement
	}
	return nil
}

func (x *GenesisState) GetSpotMarketIdsScheduledToForceClose() []string {
	if x != nil {
		return x.SpotMarketIdsScheduledToForceClose
	}
	return nil
}

func (x *GenesisState) GetDenomDecimals() []*DenomDecimals {
	if x != nil {
		return x.DenomDecimals
	}
	return nil
}

func (x *GenesisState) GetConditionalDerivativeOrderbooks() []*ConditionalDerivativeOrderBook {
	if x != nil {
		return x.ConditionalDerivativeOrderbooks
	}
	return nil
}

func (x *GenesisState) GetMarketFeeMultipliers() []*MarketFeeMultiplier {
	if x != nil {
		return x.MarketFeeMultipliers
	}
	return nil
}

func (x *GenesisState) GetOrderbookSequences() []*OrderbookSequence {
	if x != nil {
		return x.OrderbookSequences
	}
	return nil
}

func (x *GenesisState) GetSubaccountVolumes() []*AggregateSubaccountVolumeRecord {
	if x != nil {
		return x.SubaccountVolumes
	}
	return nil
}

func (x *GenesisState) GetMarketVolumes() []*MarketVolume {
	if x != nil {
		return x.MarketVolumes
	}
	return nil
}

func (x *GenesisState) GetGrantAuthorizations() []*FullGrantAuthorizations {
	if x != nil {
		return x.GrantAuthorizations
	}
	return nil
}

func (x *GenesisState) GetActiveGrants() []*FullActiveGrant {
	if x != nil {
		return x.ActiveGrants
	}
	return nil
}

func (x *GenesisState) GetDenomMinNotionals() []*DenomMinNotional {
	if x != nil {
		return x.DenomMinNotionals
	}
	return nil
}

type OrderbookSequence struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sequence      uint64                 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	MarketId      string                 `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderbookSequence) Reset() {
	*x = OrderbookSequence{}
	mi := &file_injective_exchange_v1beta1_genesis_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderbookSequence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderbookSequence) ProtoMessage() {}

func (x *OrderbookSequence) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v1beta1_genesis_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderbookSequence.ProtoReflect.Descriptor instead.
func (*OrderbookSequence) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v1beta1_genesis_proto_rawDescGZIP(), []int{1}
}

func (x *OrderbookSequence) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *OrderbookSequence) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

type FeeDiscountAccountTierTTL struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Account       string                 `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	TierTtl       *FeeDiscountTierTTL    `protobuf:"bytes,2,opt,name=tier_ttl,json=tierTtl,proto3" json:"tier_ttl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FeeDiscountAccountTierTTL) Reset() {
	*x = FeeDiscountAccountTierTTL{}
	mi := &file_injective_exchange_v1beta1_genesis_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeeDiscountAccountTierTTL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeDiscountAccountTierTTL) ProtoMessage() {}

func (x *FeeDiscountAccountTierTTL) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v1beta1_genesis_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeDiscountAccountTierTTL.ProtoReflect.Descriptor instead.
func (*FeeDiscountAccountTierTTL) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v1beta1_genesis_proto_rawDescGZIP(), []int{2}
}

func (x *FeeDiscountAccountTierTTL) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *FeeDiscountAccountTierTTL) GetTierTtl() *FeeDiscountTierTTL {
	if x != nil {
		return x.TierTtl
	}
	return nil
}

type FeeDiscountBucketVolumeAccounts struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	BucketStartTimestamp int64                  `protobuf:"varint,1,opt,name=bucket_start_timestamp,json=bucketStartTimestamp,proto3" json:"bucket_start_timestamp,omitempty"`
	AccountVolume        []*AccountVolume       `protobuf:"bytes,2,rep,name=account_volume,json=accountVolume,proto3" json:"account_volume,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *FeeDiscountBucketVolumeAccounts) Reset() {
	*x = FeeDiscountBucketVolumeAccounts{}
	mi := &file_injective_exchange_v1beta1_genesis_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeeDiscountBucketVolumeAccounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeDiscountBucketVolumeAccounts) ProtoMessage() {}

func (x *FeeDiscountBucketVolumeAccounts) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v1beta1_genesis_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeDiscountBucketVolumeAccounts.ProtoReflect.Descriptor instead.
func (*FeeDiscountBucketVolumeAccounts) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v1beta1_genesis_proto_rawDescGZIP(), []int{3}
}

func (x *FeeDiscountBucketVolumeAccounts) GetBucketStartTimestamp() int64 {
	if x != nil {
		return x.BucketStartTimestamp
	}
	return 0
}

func (x *FeeDiscountBucketVolumeAccounts) GetAccountVolume() []*AccountVolume {
	if x != nil {
		return x.AccountVolume
	}
	return nil
}

type AccountVolume struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Account       string                 `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Volume        string                 `protobuf:"bytes,2,opt,name=volume,proto3" json:"volume,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccountVolume) Reset() {
	*x = AccountVolume{}
	mi := &file_injective_exchange_v1beta1_genesis_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountVolume) ProtoMessage() {}

func (x *AccountVolume) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v1beta1_genesis_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountVolume.ProtoReflect.Descriptor instead.
func (*AccountVolume) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v1beta1_genesis_proto_rawDescGZIP(), []int{4}
}

func (x *AccountVolume) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *AccountVolume) GetVolume() string {
	if x != nil {
		return x.Volume
	}
	return ""
}

type TradingRewardCampaignAccountPoints struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Account       string                 `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Points        string                 `protobuf:"bytes,2,opt,name=points,proto3" json:"points,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TradingRewardCampaignAccountPoints) Reset() {
	*x = TradingRewardCampaignAccountPoints{}
	mi := &file_injective_exchange_v1beta1_genesis_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradingRewardCampaignAccountPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingRewardCampaignAccountPoints) ProtoMessage() {}

func (x *TradingRewardCampaignAccountPoints) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v1beta1_genesis_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingRewardCampaignAccountPoints.ProtoReflect.Descriptor instead.
func (*TradingRewardCampaignAccountPoints) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v1beta1_genesis_proto_rawDescGZIP(), []int{5}
}

func (x *TradingRewardCampaignAccountPoints) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *TradingRewardCampaignAccountPoints) GetPoints() string {
	if x != nil {
		return x.Points
	}
	return ""
}

type TradingRewardCampaignAccountPendingPoints struct {
	state                    protoimpl.MessageState                `protogen:"open.v1"`
	RewardPoolStartTimestamp int64                                 `protobuf:"varint,1,opt,name=reward_pool_start_timestamp,json=rewardPoolStartTimestamp,proto3" json:"reward_pool_start_timestamp,omitempty"`
	AccountPoints            []*TradingRewardCampaignAccountPoints `protobuf:"bytes,2,rep,name=account_points,json=accountPoints,proto3" json:"account_points,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *TradingRewardCampaignAccountPendingPoints) Reset() {
	*x = TradingRewardCampaignAccountPendingPoints{}
	mi := &file_injective_exchange_v1beta1_genesis_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradingRewardCampaignAccountPendingPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingRewardCampaignAccountPendingPoints) ProtoMessage() {}

func (x *TradingRewardCampaignAccountPendingPoints) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v1beta1_genesis_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingRewardCampaignAccountPendingPoints.ProtoReflect.Descriptor instead.
func (*TradingRewardCampaignAccountPendingPoints) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v1beta1_genesis_proto_rawDescGZIP(), []int{6}
}

func (x *TradingRewardCampaignAccountPendingPoints) GetRewardPoolStartTimestamp() int64 {
	if x != nil {
		return x.RewardPoolStartTimestamp
	}
	return 0
}

func (x *TradingRewardCampaignAccountPendingPoints) GetAccountPoints() []*TradingRewardCampaignAccountPoints {
	if x != nil {
		return x.AccountPoints
	}
	return nil
}

// Spot Exchange Limit Orderbook
type SpotOrderBook struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MarketId      string                 `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	IsBuySide     bool                   `protobuf:"varint,2,opt,name=isBuySide,proto3" json:"isBuySide,omitempty"`
	Orders        []*SpotLimitOrder      `protobuf:"bytes,3,rep,name=orders,proto3" json:"orders,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpotOrderBook) Reset() {
	*x = SpotOrderBook{}
	mi := &file_injective_exchange_v1beta1_genesis_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpotOrderBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotOrderBook) ProtoMessage() {}

func (x *SpotOrderBook) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v1beta1_genesis_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotOrderBook.ProtoReflect.Descriptor instead.
func (*SpotOrderBook) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v1beta1_genesis_proto_rawDescGZIP(), []int{7}
}

func (x *SpotOrderBook) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *SpotOrderBook) GetIsBuySide() bool {
	if x != nil {
		return x.IsBuySide
	}
	return false
}

func (x *SpotOrderBook) GetOrders() []*SpotLimitOrder {
	if x != nil {
		return x.Orders
	}
	return nil
}

// Derivative Exchange Limit Orderbook
type DerivativeOrderBook struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	MarketId      string                  `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	IsBuySide     bool                    `protobuf:"varint,2,opt,name=isBuySide,proto3" json:"isBuySide,omitempty"`
	Orders        []*DerivativeLimitOrder `protobuf:"bytes,3,rep,name=orders,proto3" json:"orders,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DerivativeOrderBook) Reset() {
	*x = DerivativeOrderBook{}
	mi := &file_injective_exchange_v1beta1_genesis_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DerivativeOrderBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivativeOrderBook) ProtoMessage() {}

func (x *DerivativeOrderBook) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v1beta1_genesis_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivativeOrderBook.ProtoReflect.Descriptor instead.
func (*DerivativeOrderBook) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v1beta1_genesis_proto_rawDescGZIP(), []int{8}
}

func (x *DerivativeOrderBook) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *DerivativeOrderBook) GetIsBuySide() bool {
	if x != nil {
		return x.IsBuySide
	}
	return false
}

func (x *DerivativeOrderBook) GetOrders() []*DerivativeLimitOrder {
	if x != nil {
		return x.Orders
	}
	return nil
}

// Orderbook containing limit & market conditional orders
type ConditionalDerivativeOrderBook struct {
	state            protoimpl.MessageState   `protogen:"open.v1"`
	MarketId         string                   `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	LimitBuyOrders   []*DerivativeLimitOrder  `protobuf:"bytes,2,rep,name=limit_buy_orders,json=limitBuyOrders,proto3" json:"limit_buy_orders,omitempty"`
	MarketBuyOrders  []*DerivativeMarketOrder `protobuf:"bytes,3,rep,name=market_buy_orders,json=marketBuyOrders,proto3" json:"market_buy_orders,omitempty"`
	LimitSellOrders  []*DerivativeLimitOrder  `protobuf:"bytes,4,rep,name=limit_sell_orders,json=limitSellOrders,proto3" json:"limit_sell_orders,omitempty"`
	MarketSellOrders []*DerivativeMarketOrder `protobuf:"bytes,5,rep,name=market_sell_orders,json=marketSellOrders,proto3" json:"market_sell_orders,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ConditionalDerivativeOrderBook) Reset() {
	*x = ConditionalDerivativeOrderBook{}
	mi := &file_injective_exchange_v1beta1_genesis_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConditionalDerivativeOrderBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionalDerivativeOrderBook) ProtoMessage() {}

func (x *ConditionalDerivativeOrderBook) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v1beta1_genesis_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionalDerivativeOrderBook.ProtoReflect.Descriptor instead.
func (*ConditionalDerivativeOrderBook) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v1beta1_genesis_proto_rawDescGZIP(), []int{9}
}

func (x *ConditionalDerivativeOrderBook) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *ConditionalDerivativeOrderBook) GetLimitBuyOrders() []*DerivativeLimitOrder {
	if x != nil {
		return x.LimitBuyOrders
	}
	return nil
}

func (x *ConditionalDerivativeOrderBook) GetMarketBuyOrders() []*DerivativeMarketOrder {
	if x != nil {
		return x.MarketBuyOrders
	}
	return nil
}

func (x *ConditionalDerivativeOrderBook) GetLimitSellOrders() []*DerivativeLimitOrder {
	if x != nil {
		return x.LimitSellOrders
	}
	return nil
}

func (x *ConditionalDerivativeOrderBook) GetMarketSellOrders() []*DerivativeMarketOrder {
	if x != nil {
		return x.MarketSellOrders
	}
	return nil
}

type Balance struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the subaccount ID
	SubaccountId string `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	// the denom of the balance
	Denom string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	// the token deposits details
	Deposits      *Deposit `protobuf:"bytes,3,opt,name=deposits,proto3" json:"deposits,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Balance) Reset() {
	*x = Balance{}
	mi := &file_injective_exchange_v1beta1_genesis_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Balance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Balance) ProtoMessage() {}

func (x *Balance) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v1beta1_genesis_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Balance.ProtoReflect.Descriptor instead.
func (*Balance) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v1beta1_genesis_proto_rawDescGZIP(), []int{10}
}

func (x *Balance) GetSubaccountId() string {
	if x != nil {
		return x.SubaccountId
	}
	return ""
}

func (x *Balance) GetDenom() string {
	if x != nil {
		return x.Denom
	}
	return ""
}

func (x *Balance) GetDeposits() *Deposit {
	if x != nil {
		return x.Deposits
	}
	return nil
}

type DerivativePosition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the subaccount ID
	SubaccountId string `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	// the market ID
	MarketId string `protobuf:"bytes,2,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// the position details
	Position      *Position `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DerivativePosition) Reset() {
	*x = DerivativePosition{}
	mi := &file_injective_exchange_v1beta1_genesis_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DerivativePosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivativePosition) ProtoMessage() {}

func (x *DerivativePosition) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v1beta1_genesis_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivativePosition.ProtoReflect.Descriptor instead.
func (*DerivativePosition) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v1beta1_genesis_proto_rawDescGZIP(), []int{11}
}

func (x *DerivativePosition) GetSubaccountId() string {
	if x != nil {
		return x.SubaccountId
	}
	return ""
}

func (x *DerivativePosition) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *DerivativePosition) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

type SubaccountNonce struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the subaccount ID
	SubaccountId string `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	// the subaccount trade nonce
	SubaccountTradeNonce *SubaccountTradeNonce `protobuf:"bytes,2,opt,name=subaccount_trade_nonce,json=subaccountTradeNonce,proto3" json:"subaccount_trade_nonce,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *SubaccountNonce) Reset() {
	*x = SubaccountNonce{}
	mi := &file_injective_exchange_v1beta1_genesis_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubaccountNonce) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubaccountNonce) ProtoMessage() {}

func (x *SubaccountNonce) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v1beta1_genesis_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubaccountNonce.ProtoReflect.Descriptor instead.
func (*SubaccountNonce) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v1beta1_genesis_proto_rawDescGZIP(), []int{12}
}

func (x *SubaccountNonce) GetSubaccountId() string {
	if x != nil {
		return x.SubaccountId
	}
	return ""
}

func (x *SubaccountNonce) GetSubaccountTradeNonce() *SubaccountTradeNonce {
	if x != nil {
		return x.SubaccountTradeNonce
	}
	return nil
}

type ExpiryFuturesMarketInfoState struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	MarketId      string                   `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	MarketInfo    *ExpiryFuturesMarketInfo `protobuf:"bytes,2,opt,name=market_info,json=marketInfo,proto3" json:"market_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExpiryFuturesMarketInfoState) Reset() {
	*x = ExpiryFuturesMarketInfoState{}
	mi := &file_injective_exchange_v1beta1_genesis_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExpiryFuturesMarketInfoState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpiryFuturesMarketInfoState) ProtoMessage() {}

func (x *ExpiryFuturesMarketInfoState) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v1beta1_genesis_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpiryFuturesMarketInfoState.ProtoReflect.Descriptor instead.
func (*ExpiryFuturesMarketInfoState) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v1beta1_genesis_proto_rawDescGZIP(), []int{13}
}

func (x *ExpiryFuturesMarketInfoState) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *ExpiryFuturesMarketInfoState) GetMarketInfo() *ExpiryFuturesMarketInfo {
	if x != nil {
		return x.MarketInfo
	}
	return nil
}

type PerpetualMarketFundingState struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	MarketId      string                  `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	Funding       *PerpetualMarketFunding `protobuf:"bytes,2,opt,name=funding,proto3" json:"funding,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PerpetualMarketFundingState) Reset() {
	*x = PerpetualMarketFundingState{}
	mi := &file_injective_exchange_v1beta1_genesis_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PerpetualMarketFundingState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerpetualMarketFundingState) ProtoMessage() {}

func (x *PerpetualMarketFundingState) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v1beta1_genesis_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerpetualMarketFundingState.ProtoReflect.Descriptor instead.
func (*PerpetualMarketFundingState) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v1beta1_genesis_proto_rawDescGZIP(), []int{14}
}

func (x *PerpetualMarketFundingState) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *PerpetualMarketFundingState) GetFunding() *PerpetualMarketFunding {
	if x != nil {
		return x.Funding
	}
	return nil
}

type FullGrantAuthorizations struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	Granter                    string                 `protobuf:"bytes,1,opt,name=granter,proto3" json:"granter,omitempty"`
	TotalGrantAmount           string                 `protobuf:"bytes,2,opt,name=total_grant_amount,json=totalGrantAmount,proto3" json:"total_grant_amount,omitempty"`
	LastDelegationsCheckedTime int64                  `protobuf:"varint,3,opt,name=last_delegations_checked_time,json=lastDelegationsCheckedTime,proto3" json:"last_delegations_checked_time,omitempty"`
	Grants                     []*GrantAuthorization  `protobuf:"bytes,4,rep,name=grants,proto3" json:"grants,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *FullGrantAuthorizations) Reset() {
	*x = FullGrantAuthorizations{}
	mi := &file_injective_exchange_v1beta1_genesis_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FullGrantAuthorizations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullGrantAuthorizations) ProtoMessage() {}

func (x *FullGrantAuthorizations) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v1beta1_genesis_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullGrantAuthorizations.ProtoReflect.Descriptor instead.
func (*FullGrantAuthorizations) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v1beta1_genesis_proto_rawDescGZIP(), []int{15}
}

func (x *FullGrantAuthorizations) GetGranter() string {
	if x != nil {
		return x.Granter
	}
	return ""
}

func (x *FullGrantAuthorizations) GetTotalGrantAmount() string {
	if x != nil {
		return x.TotalGrantAmount
	}
	return ""
}

func (x *FullGrantAuthorizations) GetLastDelegationsCheckedTime() int64 {
	if x != nil {
		return x.LastDelegationsCheckedTime
	}
	return 0
}

func (x *FullGrantAuthorizations) GetGrants() []*GrantAuthorization {
	if x != nil {
		return x.Grants
	}
	return nil
}

type FullActiveGrant struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Grantee       string                 `protobuf:"bytes,1,opt,name=grantee,proto3" json:"grantee,omitempty"`
	ActiveGrant   *ActiveGrant           `protobuf:"bytes,2,opt,name=active_grant,json=activeGrant,proto3" json:"active_grant,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FullActiveGrant) Reset() {
	*x = FullActiveGrant{}
	mi := &file_injective_exchange_v1beta1_genesis_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FullActiveGrant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullActiveGrant) ProtoMessage() {}

func (x *FullActiveGrant) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v1beta1_genesis_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullActiveGrant.ProtoReflect.Descriptor instead.
func (*FullActiveGrant) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v1beta1_genesis_proto_rawDescGZIP(), []int{16}
}

func (x *FullActiveGrant) GetGrantee() string {
	if x != nil {
		return x.Grantee
	}
	return ""
}

func (x *FullActiveGrant) GetActiveGrant() *ActiveGrant {
	if x != nil {
		return x.ActiveGrant
	}
	return nil
}

var File_injective_exchange_v1beta1_genesis_proto protoreflect.FileDescriptor

const file_injective_exchange_v1beta1_genesis_proto_rawDesc = "" +
	"\n" +
	"(injective/exchange/v1beta1/genesis.proto\x12\x1ainjective.exchange.v1beta1\x1a)injective/exchange/v1beta1/exchange.proto\x1a#injective/exchange/v1beta1/tx.proto\x1a\x14gogoproto/gogo.proto\"\x89\x1e\n" +
	"\fGenesisState\x12@\n" +
	"\x06params\x18\x01 \x01(\v2\".injective.exchange.v1beta1.ParamsB\x04\xc8\xde\x1f\x00R\x06params\x12I\n" +
	"\fspot_markets\x18\x02 \x03(\v2&.injective.exchange.v1beta1.SpotMarketR\vspotMarkets\x12[\n" +
	"\x12derivative_markets\x18\x03 \x03(\v2,.injective.exchange.v1beta1.DerivativeMarketR\x11derivativeMarkets\x12V\n" +
	"\x0espot_orderbook\x18\x04 \x03(\v2).injective.exchange.v1beta1.SpotOrderBookB\x04\xc8\xde\x1f\x00R\rspotOrderbook\x12h\n" +
	"\x14derivative_orderbook\x18\x05 \x03(\v2/.injective.exchange.v1beta1.DerivativeOrderBookB\x04\xc8\xde\x1f\x00R\x13derivativeOrderbook\x12E\n" +
	"\bbalances\x18\x06 \x03(\v2#.injective.exchange.v1beta1.BalanceB\x04\xc8\xde\x1f\x00R\bbalances\x12R\n" +
	"\tpositions\x18\a \x03(\v2..injective.exchange.v1beta1.DerivativePositionB\x04\xc8\xde\x1f\x00R\tpositions\x12i\n" +
	"\x17subaccount_trade_nonces\x18\b \x03(\v2+.injective.exchange.v1beta1.SubaccountNonceB\x04\xc8\xde\x1f\x00R\x15subaccountTradeNonces\x12\x86\x01\n" +
	" expiry_futures_market_info_state\x18\t \x03(\v28.injective.exchange.v1beta1.ExpiryFuturesMarketInfoStateB\x04\xc8\xde\x1f\x00R\x1cexpiryFuturesMarketInfoState\x12i\n" +
	"\x15perpetual_market_info\x18\n" +
	" \x03(\v2/.injective.exchange.v1beta1.PerpetualMarketInfoB\x04\xc8\xde\x1f\x00R\x13perpetualMarketInfo\x12\x82\x01\n" +
	"\x1eperpetual_market_funding_state\x18\v \x03(\v27.injective.exchange.v1beta1.PerpetualMarketFundingStateB\x04\xc8\xde\x1f\x00R\x1bperpetualMarketFundingState\x12\x95\x01\n" +
	"&derivative_market_settlement_scheduled\x18\f \x03(\v2:.injective.exchange.v1beta1.DerivativeMarketSettlementInfoB\x04\xc8\xde\x1f\x00R#derivativeMarketSettlementScheduled\x127\n" +
	"\x18is_spot_exchange_enabled\x18\r \x01(\bR\x15isSpotExchangeEnabled\x12E\n" +
	"\x1fis_derivatives_exchange_enabled\x18\x0e \x01(\bR\x1cisDerivativesExchangeEnabled\x12v\n" +
	"\x1ctrading_reward_campaign_info\x18\x0f \x01(\v25.injective.exchange.v1beta1.TradingRewardCampaignInfoR\x19tradingRewardCampaignInfo\x12\x80\x01\n" +
	"%trading_reward_pool_campaign_schedule\x18\x10 \x03(\v2..injective.exchange.v1beta1.CampaignRewardPoolR!tradingRewardPoolCampaignSchedule\x12\x92\x01\n" +
	"&trading_reward_campaign_account_points\x18\x11 \x03(\v2>.injective.exchange.v1beta1.TradingRewardCampaignAccountPointsR\"tradingRewardCampaignAccountPoints\x12c\n" +
	"\x15fee_discount_schedule\x18\x12 \x01(\v2/.injective.exchange.v1beta1.FeeDiscountScheduleR\x13feeDiscountSchedule\x12w\n" +
	"\x1dfee_discount_account_tier_ttl\x18\x13 \x03(\v25.injective.exchange.v1beta1.FeeDiscountAccountTierTTLR\x19feeDiscountAccountTierTtl\x12\x89\x01\n" +
	"#fee_discount_bucket_volume_accounts\x18\x14 \x03(\v2;.injective.exchange.v1beta1.FeeDiscountBucketVolumeAccountsR\x1ffeeDiscountBucketVolumeAccounts\x12<\n" +
	"\x1bis_first_fee_cycle_finished\x18\x15 \x01(\bR\x17isFirstFeeCycleFinished\x12\x8f\x01\n" +
	"-pending_trading_reward_pool_campaign_schedule\x18\x16 \x03(\v2..injective.exchange.v1beta1.CampaignRewardPoolR(pendingTradingRewardPoolCampaignSchedule\x12\xa8\x01\n" +
	".pending_trading_reward_campaign_account_points\x18\x17 \x03(\v2E.injective.exchange.v1beta1.TradingRewardCampaignAccountPendingPointsR)pendingTradingRewardCampaignAccountPoints\x129\n" +
	"\x19rewards_opt_out_addresses\x18\x18 \x03(\tR\x16rewardsOptOutAddresses\x12b\n" +
	"\x18historical_trade_records\x18\x19 \x03(\v2(.injective.exchange.v1beta1.TradeRecordsR\x16historicalTradeRecords\x12e\n" +
	"\x16binary_options_markets\x18\x1a \x03(\v2/.injective.exchange.v1beta1.BinaryOptionsMarketR\x14binaryOptionsMarkets\x12h\n" +
	"2binary_options_market_ids_scheduled_for_settlement\x18\x1b \x03(\tR,binaryOptionsMarketIdsScheduledForSettlement\x12T\n" +
	"(spot_market_ids_scheduled_to_force_close\x18\x1c \x03(\tR\"spotMarketIdsScheduledToForceClose\x12V\n" +
	"\x0edenom_decimals\x18\x1d \x03(\v2).injective.exchange.v1beta1.DenomDecimalsB\x04\xc8\xde\x1f\x00R\rdenomDecimals\x12\x86\x01\n" +
	"!conditional_derivative_orderbooks\x18\x1e \x03(\v2:.injective.exchange.v1beta1.ConditionalDerivativeOrderBookR\x1fconditionalDerivativeOrderbooks\x12e\n" +
	"\x16market_fee_multipliers\x18\x1f \x03(\v2/.injective.exchange.v1beta1.MarketFeeMultiplierR\x14marketFeeMultipliers\x12^\n" +
	"\x13orderbook_sequences\x18  \x03(\v2-.injective.exchange.v1beta1.OrderbookSequenceR\x12orderbookSequences\x12j\n" +
	"\x12subaccount_volumes\x18! \x03(\v2;.injective.exchange.v1beta1.AggregateSubaccountVolumeRecordR\x11subaccountVolumes\x12O\n" +
	"\x0emarket_volumes\x18\" \x03(\v2(.injective.exchange.v1beta1.MarketVolumeR\rmarketVolumes\x12f\n" +
	"\x14grant_authorizations\x18# \x03(\v23.injective.exchange.v1beta1.FullGrantAuthorizationsR\x13grantAuthorizations\x12P\n" +
	"\ractive_grants\x18$ \x03(\v2+.injective.exchange.v1beta1.FullActiveGrantR\factiveGrants\x12\\\n" +
	"\x13denom_min_notionals\x18% \x03(\v2,.injective.exchange.v1beta1.DenomMinNotionalR\x11denomMinNotionals\"L\n" +
	"\x11OrderbookSequence\x12\x1a\n" +
	"\bsequence\x18\x01 \x01(\x04R\bsequence\x12\x1b\n" +
	"\tmarket_id\x18\x02 \x01(\tR\bmarketId\"\x80\x01\n" +
	"\x19FeeDiscountAccountTierTTL\x12\x18\n" +
	"\aaccount\x18\x01 \x01(\tR\aaccount\x12I\n" +
	"\btier_ttl\x18\x02 \x01(\v2..injective.exchange.v1beta1.FeeDiscountTierTTLR\atierTtl\"\xa9\x01\n" +
	"\x1fFeeDiscountBucketVolumeAccounts\x124\n" +
	"\x16bucket_start_timestamp\x18\x01 \x01(\x03R\x14bucketStartTimestamp\x12P\n" +
	"\x0eaccount_volume\x18\x02 \x03(\v2).injective.exchange.v1beta1.AccountVolumeR\raccountVolume\"f\n" +
	"\rAccountVolume\x12\x18\n" +
	"\aaccount\x18\x01 \x01(\tR\aaccount\x12;\n" +
	"\x06volume\x18\x02 \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x06volume\"{\n" +
	"\"TradingRewardCampaignAccountPoints\x12\x18\n" +
	"\aaccount\x18\x01 \x01(\tR\aaccount\x12;\n" +
	"\x06points\x18\x02 \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x06points\"\xd1\x01\n" +
	")TradingRewardCampaignAccountPendingPoints\x12=\n" +
	"\x1breward_pool_start_timestamp\x18\x01 \x01(\x03R\x18rewardPoolStartTimestamp\x12e\n" +
	"\x0eaccount_points\x18\x02 \x03(\v2>.injective.exchange.v1beta1.TradingRewardCampaignAccountPointsR\raccountPoints\"\x98\x01\n" +
	"\rSpotOrderBook\x12\x1b\n" +
	"\tmarket_id\x18\x01 \x01(\tR\bmarketId\x12\x1c\n" +
	"\tisBuySide\x18\x02 \x01(\bR\tisBuySide\x12B\n" +
	"\x06orders\x18\x03 \x03(\v2*.injective.exchange.v1beta1.SpotLimitOrderR\x06orders:\b\x88\xa0\x1f\x00\xe8\xa0\x1f\x00\"\xa4\x01\n" +
	"\x13DerivativeOrderBook\x12\x1b\n" +
	"\tmarket_id\x18\x01 \x01(\tR\bmarketId\x12\x1c\n" +
	"\tisBuySide\x18\x02 \x01(\bR\tisBuySide\x12H\n" +
	"\x06orders\x18\x03 \x03(\v20.injective.exchange.v1beta1.DerivativeLimitOrderR\x06orders:\b\x88\xa0\x1f\x00\xe8\xa0\x1f\x00\"\xc1\x03\n" +
	"\x1eConditionalDerivativeOrderBook\x12\x1b\n" +
	"\tmarket_id\x18\x01 \x01(\tR\bmarketId\x12Z\n" +
	"\x10limit_buy_orders\x18\x02 \x03(\v20.injective.exchange.v1beta1.DerivativeLimitOrderR\x0elimitBuyOrders\x12]\n" +
	"\x11market_buy_orders\x18\x03 \x03(\v21.injective.exchange.v1beta1.DerivativeMarketOrderR\x0fmarketBuyOrders\x12\\\n" +
	"\x11limit_sell_orders\x18\x04 \x03(\v20.injective.exchange.v1beta1.DerivativeLimitOrderR\x0flimitSellOrders\x12_\n" +
	"\x12market_sell_orders\x18\x05 \x03(\v21.injective.exchange.v1beta1.DerivativeMarketOrderR\x10marketSellOrders:\b\x88\xa0\x1f\x00\xe8\xa0\x1f\x00\"\x8f\x01\n" +
	"\aBalance\x12#\n" +
	"\rsubaccount_id\x18\x01 \x01(\tR\fsubaccountId\x12\x14\n" +
	"\x05denom\x18\x02 \x01(\tR\x05denom\x12?\n" +
	"\bdeposits\x18\x03 \x01(\v2#.injective.exchange.v1beta1.DepositR\bdeposits:\b\x88\xa0\x1f\x00\xe8\xa0\x1f\x00\"\xa2\x01\n" +
	"\x12DerivativePosition\x12#\n" +
	"\rsubaccount_id\x18\x01 \x01(\tR\fsubaccountId\x12\x1b\n" +
	"\tmarket_id\x18\x02 \x01(\tR\bmarketId\x12@\n" +
	"\bposition\x18\x03 \x01(\v2$.injective.exchange.v1beta1.PositionR\bposition:\b\x88\xa0\x1f\x00\xe8\xa0\x1f\x00\"\xae\x01\n" +
	"\x0fSubaccountNonce\x12#\n" +
	"\rsubaccount_id\x18\x01 \x01(\tR\fsubaccountId\x12l\n" +
	"\x16subaccount_trade_nonce\x18\x02 \x01(\v20.injective.exchange.v1beta1.SubaccountTradeNonceB\x04\xc8\xde\x1f\x00R\x14subaccountTradeNonce:\b\x88\xa0\x1f\x00\xe8\xa0\x1f\x00\"\x91\x01\n" +
	"\x1cExpiryFuturesMarketInfoState\x12\x1b\n" +
	"\tmarket_id\x18\x01 \x01(\tR\bmarketId\x12T\n" +
	"\vmarket_info\x18\x02 \x01(\v23.injective.exchange.v1beta1.ExpiryFuturesMarketInfoR\n" +
	"marketInfo\"\x88\x01\n" +
	"\x1bPerpetualMarketFundingState\x12\x1b\n" +
	"\tmarket_id\x18\x01 \x01(\tR\bmarketId\x12L\n" +
	"\afunding\x18\x02 \x01(\v22.injective.exchange.v1beta1.PerpetualMarketFundingR\afunding\"\x8b\x02\n" +
	"\x17FullGrantAuthorizations\x12\x18\n" +
	"\agranter\x18\x01 \x01(\tR\agranter\x12K\n" +
	"\x12total_grant_amount\x18\x02 \x01(\tB\x1d\xc8\xde\x1f\x00\xda\xde\x1f\x15cosmossdk.io/math.IntR\x10totalGrantAmount\x12A\n" +
	"\x1dlast_delegations_checked_time\x18\x03 \x01(\x03R\x1alastDelegationsCheckedTime\x12F\n" +
	"\x06grants\x18\x04 \x03(\v2..injective.exchange.v1beta1.GrantAuthorizationR\x06grants\"w\n" +
	"\x0fFullActiveGrant\x12\x18\n" +
	"\agrantee\x18\x01 \x01(\tR\agrantee\x12J\n" +
	"\factive_grant\x18\x02 \x01(\v2'.injective.exchange.v1beta1.ActiveGrantR\vactiveGrantBPZNgithub.com/InjectiveLabs/injective-core/injective-chain/modules/exchange/typesb\x06proto3"

var (
	file_injective_exchange_v1beta1_genesis_proto_rawDescOnce sync.Once
	file_injective_exchange_v1beta1_genesis_proto_rawDescData []byte
)

func file_injective_exchange_v1beta1_genesis_proto_rawDescGZIP() []byte {
	file_injective_exchange_v1beta1_genesis_proto_rawDescOnce.Do(func() {
		file_injective_exchange_v1beta1_genesis_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_injective_exchange_v1beta1_genesis_proto_rawDesc), len(file_injective_exchange_v1beta1_genesis_proto_rawDesc)))
	})
	return file_injective_exchange_v1beta1_genesis_proto_rawDescData
}

var file_injective_exchange_v1beta1_genesis_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_injective_exchange_v1beta1_genesis_proto_goTypes = []any{
	(*GenesisState)(nil),                              // 0: injective.exchange.v1beta1.GenesisState
	(*OrderbookSequence)(nil),                         // 1: injective.exchange.v1beta1.OrderbookSequence
	(*FeeDiscountAccountTierTTL)(nil),                 // 2: injective.exchange.v1beta1.FeeDiscountAccountTierTTL
	(*FeeDiscountBucketVolumeAccounts)(nil),           // 3: injective.exchange.v1beta1.FeeDiscountBucketVolumeAccounts
	(*AccountVolume)(nil),                             // 4: injective.exchange.v1beta1.AccountVolume
	(*TradingRewardCampaignAccountPoints)(nil),        // 5: injective.exchange.v1beta1.TradingRewardCampaignAccountPoints
	(*TradingRewardCampaignAccountPendingPoints)(nil), // 6: injective.exchange.v1beta1.TradingRewardCampaignAccountPendingPoints
	(*SpotOrderBook)(nil),                             // 7: injective.exchange.v1beta1.SpotOrderBook
	(*DerivativeOrderBook)(nil),                       // 8: injective.exchange.v1beta1.DerivativeOrderBook
	(*ConditionalDerivativeOrderBook)(nil),            // 9: injective.exchange.v1beta1.ConditionalDerivativeOrderBook
	(*Balance)(nil),                                   // 10: injective.exchange.v1beta1.Balance
	(*DerivativePosition)(nil),                        // 11: injective.exchange.v1beta1.DerivativePosition
	(*SubaccountNonce)(nil),                           // 12: injective.exchange.v1beta1.SubaccountNonce
	(*ExpiryFuturesMarketInfoState)(nil),              // 13: injective.exchange.v1beta1.ExpiryFuturesMarketInfoState
	(*PerpetualMarketFundingState)(nil),               // 14: injective.exchange.v1beta1.PerpetualMarketFundingState
	(*FullGrantAuthorizations)(nil),                   // 15: injective.exchange.v1beta1.FullGrantAuthorizations
	(*FullActiveGrant)(nil),                           // 16: injective.exchange.v1beta1.FullActiveGrant
	(*Params)(nil),                                    // 17: injective.exchange.v1beta1.Params
	(*SpotMarket)(nil),                                // 18: injective.exchange.v1beta1.SpotMarket
	(*DerivativeMarket)(nil),                          // 19: injective.exchange.v1beta1.DerivativeMarket
	(*PerpetualMarketInfo)(nil),                       // 20: injective.exchange.v1beta1.PerpetualMarketInfo
	(*DerivativeMarketSettlementInfo)(nil),            // 21: injective.exchange.v1beta1.DerivativeMarketSettlementInfo
	(*TradingRewardCampaignInfo)(nil),                 // 22: injective.exchange.v1beta1.TradingRewardCampaignInfo
	(*CampaignRewardPool)(nil),                        // 23: injective.exchange.v1beta1.CampaignRewardPool
	(*FeeDiscountSchedule)(nil),                       // 24: injective.exchange.v1beta1.FeeDiscountSchedule
	(*TradeRecords)(nil),                              // 25: injective.exchange.v1beta1.TradeRecords
	(*BinaryOptionsMarket)(nil),                       // 26: injective.exchange.v1beta1.BinaryOptionsMarket
	(*DenomDecimals)(nil),                             // 27: injective.exchange.v1beta1.DenomDecimals
	(*MarketFeeMultiplier)(nil),                       // 28: injective.exchange.v1beta1.MarketFeeMultiplier
	(*AggregateSubaccountVolumeRecord)(nil),           // 29: injective.exchange.v1beta1.AggregateSubaccountVolumeRecord
	(*MarketVolume)(nil),                              // 30: injective.exchange.v1beta1.MarketVolume
	(*DenomMinNotional)(nil),                          // 31: injective.exchange.v1beta1.DenomMinNotional
	(*FeeDiscountTierTTL)(nil),                        // 32: injective.exchange.v1beta1.FeeDiscountTierTTL
	(*SpotLimitOrder)(nil),                            // 33: injective.exchange.v1beta1.SpotLimitOrder
	(*DerivativeLimitOrder)(nil),                      // 34: injective.exchange.v1beta1.DerivativeLimitOrder
	(*DerivativeMarketOrder)(nil),                     // 35: injective.exchange.v1beta1.DerivativeMarketOrder
	(*Deposit)(nil),                                   // 36: injective.exchange.v1beta1.Deposit
	(*Position)(nil),                                  // 37: injective.exchange.v1beta1.Position
	(*SubaccountTradeNonce)(nil),                      // 38: injective.exchange.v1beta1.SubaccountTradeNonce
	(*ExpiryFuturesMarketInfo)(nil),                   // 39: injective.exchange.v1beta1.ExpiryFuturesMarketInfo
	(*PerpetualMarketFunding)(nil),                    // 40: injective.exchange.v1beta1.PerpetualMarketFunding
	(*GrantAuthorization)(nil),                        // 41: injective.exchange.v1beta1.GrantAuthorization
	(*ActiveGrant)(nil),                               // 42: injective.exchange.v1beta1.ActiveGrant
}
var file_injective_exchange_v1beta1_genesis_proto_depIdxs = []int32{
	17, // 0: injective.exchange.v1beta1.GenesisState.params:type_name -> injective.exchange.v1beta1.Params
	18, // 1: injective.exchange.v1beta1.GenesisState.spot_markets:type_name -> injective.exchange.v1beta1.SpotMarket
	19, // 2: injective.exchange.v1beta1.GenesisState.derivative_markets:type_name -> injective.exchange.v1beta1.DerivativeMarket
	7,  // 3: injective.exchange.v1beta1.GenesisState.spot_orderbook:type_name -> injective.exchange.v1beta1.SpotOrderBook
	8,  // 4: injective.exchange.v1beta1.GenesisState.derivative_orderbook:type_name -> injective.exchange.v1beta1.DerivativeOrderBook
	10, // 5: injective.exchange.v1beta1.GenesisState.balances:type_name -> injective.exchange.v1beta1.Balance
	11, // 6: injective.exchange.v1beta1.GenesisState.positions:type_name -> injective.exchange.v1beta1.DerivativePosition
	12, // 7: injective.exchange.v1beta1.GenesisState.subaccount_trade_nonces:type_name -> injective.exchange.v1beta1.SubaccountNonce
	13, // 8: injective.exchange.v1beta1.GenesisState.expiry_futures_market_info_state:type_name -> injective.exchange.v1beta1.ExpiryFuturesMarketInfoState
	20, // 9: injective.exchange.v1beta1.GenesisState.perpetual_market_info:type_name -> injective.exchange.v1beta1.PerpetualMarketInfo
	14, // 10: injective.exchange.v1beta1.GenesisState.perpetual_market_funding_state:type_name -> injective.exchange.v1beta1.PerpetualMarketFundingState
	21, // 11: injective.exchange.v1beta1.GenesisState.derivative_market_settlement_scheduled:type_name -> injective.exchange.v1beta1.DerivativeMarketSettlementInfo
	22, // 12: injective.exchange.v1beta1.GenesisState.trading_reward_campaign_info:type_name -> injective.exchange.v1beta1.TradingRewardCampaignInfo
	23, // 13: injective.exchange.v1beta1.GenesisState.trading_reward_pool_campaign_schedule:type_name -> injective.exchange.v1beta1.CampaignRewardPool
	5,  // 14: injective.exchange.v1beta1.GenesisState.trading_reward_campaign_account_points:type_name -> injective.exchange.v1beta1.TradingRewardCampaignAccountPoints
	24, // 15: injective.exchange.v1beta1.GenesisState.fee_discount_schedule:type_name -> injective.exchange.v1beta1.FeeDiscountSchedule
	2,  // 16: injective.exchange.v1beta1.GenesisState.fee_discount_account_tier_ttl:type_name -> injective.exchange.v1beta1.FeeDiscountAccountTierTTL
	3,  // 17: injective.exchange.v1beta1.GenesisState.fee_discount_bucket_volume_accounts:type_name -> injective.exchange.v1beta1.FeeDiscountBucketVolumeAccounts
	23, // 18: injective.exchange.v1beta1.GenesisState.pending_trading_reward_pool_campaign_schedule:type_name -> injective.exchange.v1beta1.CampaignRewardPool
	6,  // 19: injective.exchange.v1beta1.GenesisState.pending_trading_reward_campaign_account_points:type_name -> injective.exchange.v1beta1.TradingRewardCampaignAccountPendingPoints
	25, // 20: injective.exchange.v1beta1.GenesisState.historical_trade_records:type_name -> injective.exchange.v1beta1.TradeRecords
	26, // 21: injective.exchange.v1beta1.GenesisState.binary_options_markets:type_name -> injective.exchange.v1beta1.BinaryOptionsMarket
	27, // 22: injective.exchange.v1beta1.GenesisState.denom_decimals:type_name -> injective.exchange.v1beta1.DenomDecimals
	9,  // 23: injective.exchange.v1beta1.GenesisState.conditional_derivative_orderbooks:type_name -> injective.exchange.v1beta1.ConditionalDerivativeOrderBook
	28, // 24: injective.exchange.v1beta1.GenesisState.market_fee_multipliers:type_name -> injective.exchange.v1beta1.MarketFeeMultiplier
	1,  // 25: injective.exchange.v1beta1.GenesisState.orderbook_sequences:type_name -> injective.exchange.v1beta1.OrderbookSequence
	29, // 26: injective.exchange.v1beta1.GenesisState.subaccount_volumes:type_name -> injective.exchange.v1beta1.AggregateSubaccountVolumeRecord
	30, // 27: injective.exchange.v1beta1.GenesisState.market_volumes:type_name -> injective.exchange.v1beta1.MarketVolume
	15, // 28: injective.exchange.v1beta1.GenesisState.grant_authorizations:type_name -> injective.exchange.v1beta1.FullGrantAuthorizations
	16, // 29: injective.exchange.v1beta1.GenesisState.active_grants:type_name -> injective.exchange.v1beta1.FullActiveGrant
	31, // 30: injective.exchange.v1beta1.GenesisState.denom_min_notionals:type_name -> injective.exchange.v1beta1.DenomMinNotional
	32, // 31: injective.exchange.v1beta1.FeeDiscountAccountTierTTL.tier_ttl:type_name -> injective.exchange.v1beta1.FeeDiscountTierTTL
	4,  // 32: injective.exchange.v1beta1.FeeDiscountBucketVolumeAccounts.account_volume:type_name -> injective.exchange.v1beta1.AccountVolume
	5,  // 33: injective.exchange.v1beta1.TradingRewardCampaignAccountPendingPoints.account_points:type_name -> injective.exchange.v1beta1.TradingRewardCampaignAccountPoints
	33, // 34: injective.exchange.v1beta1.SpotOrderBook.orders:type_name -> injective.exchange.v1beta1.SpotLimitOrder
	34, // 35: injective.exchange.v1beta1.DerivativeOrderBook.orders:type_name -> injective.exchange.v1beta1.DerivativeLimitOrder
	34, // 36: injective.exchange.v1beta1.ConditionalDerivativeOrderBook.limit_buy_orders:type_name -> injective.exchange.v1beta1.DerivativeLimitOrder
	35, // 37: injective.exchange.v1beta1.ConditionalDerivativeOrderBook.market_buy_orders:type_name -> injective.exchange.v1beta1.DerivativeMarketOrder
	34, // 38: injective.exchange.v1beta1.ConditionalDerivativeOrderBook.limit_sell_orders:type_name -> injective.exchange.v1beta1.DerivativeLimitOrder
	35, // 39: injective.exchange.v1beta1.ConditionalDerivativeOrderBook.market_sell_orders:type_name -> injective.exchange.v1beta1.DerivativeMarketOrder
	36, // 40: injective.exchange.v1beta1.Balance.deposits:type_name -> injective.exchange.v1beta1.Deposit
	37, // 41: injective.exchange.v1beta1.DerivativePosition.position:type_name -> injective.exchange.v1beta1.Position
	38, // 42: injective.exchange.v1beta1.SubaccountNonce.subaccount_trade_nonce:type_name -> injective.exchange.v1beta1.SubaccountTradeNonce
	39, // 43: injective.exchange.v1beta1.ExpiryFuturesMarketInfoState.market_info:type_name -> injective.exchange.v1beta1.ExpiryFuturesMarketInfo
	40, // 44: injective.exchange.v1beta1.PerpetualMarketFundingState.funding:type_name -> injective.exchange.v1beta1.PerpetualMarketFunding
	41, // 45: injective.exchange.v1beta1.FullGrantAuthorizations.grants:type_name -> injective.exchange.v1beta1.GrantAuthorization
	42, // 46: injective.exchange.v1beta1.FullActiveGrant.active_grant:type_name -> injective.exchange.v1beta1.ActiveGrant
	47, // [47:47] is the sub-list for method output_type
	47, // [47:47] is the sub-list for method input_type
	47, // [47:47] is the sub-list for extension type_name
	47, // [47:47] is the sub-list for extension extendee
	0,  // [0:47] is the sub-list for field type_name
}

func init() { file_injective_exchange_v1beta1_genesis_proto_init() }
func file_injective_exchange_v1beta1_genesis_proto_init() {
	if File_injective_exchange_v1beta1_genesis_proto != nil {
		return
	}
	file_injective_exchange_v1beta1_exchange_proto_init()
	file_injective_exchange_v1beta1_tx_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_injective_exchange_v1beta1_genesis_proto_rawDesc), len(file_injective_exchange_v1beta1_genesis_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_injective_exchange_v1beta1_genesis_proto_goTypes,
		DependencyIndexes: file_injective_exchange_v1beta1_genesis_proto_depIdxs,
		MessageInfos:      file_injective_exchange_v1beta1_genesis_proto_msgTypes,
	}.Build()
	File_injective_exchange_v1beta1_genesis_proto = out.File
	file_injective_exchange_v1beta1_genesis_proto_goTypes = nil
	file_injective_exchange_v1beta1_genesis_proto_depIdxs = nil
}
