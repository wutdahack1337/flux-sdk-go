// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: injective/exchange/v2/query.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Query_L3DerivativeOrderBook_FullMethodName               = "/injective.exchange.v2.Query/L3DerivativeOrderBook"
	Query_L3SpotOrderBook_FullMethodName                     = "/injective.exchange.v2.Query/L3SpotOrderBook"
	Query_QueryExchangeParams_FullMethodName                 = "/injective.exchange.v2.Query/QueryExchangeParams"
	Query_SubaccountDeposits_FullMethodName                  = "/injective.exchange.v2.Query/SubaccountDeposits"
	Query_SubaccountDeposit_FullMethodName                   = "/injective.exchange.v2.Query/SubaccountDeposit"
	Query_ExchangeBalances_FullMethodName                    = "/injective.exchange.v2.Query/ExchangeBalances"
	Query_AggregateVolume_FullMethodName                     = "/injective.exchange.v2.Query/AggregateVolume"
	Query_AggregateVolumes_FullMethodName                    = "/injective.exchange.v2.Query/AggregateVolumes"
	Query_AggregateMarketVolume_FullMethodName               = "/injective.exchange.v2.Query/AggregateMarketVolume"
	Query_AggregateMarketVolumes_FullMethodName              = "/injective.exchange.v2.Query/AggregateMarketVolumes"
	Query_DenomDecimal_FullMethodName                        = "/injective.exchange.v2.Query/DenomDecimal"
	Query_DenomDecimals_FullMethodName                       = "/injective.exchange.v2.Query/DenomDecimals"
	Query_SpotMarkets_FullMethodName                         = "/injective.exchange.v2.Query/SpotMarkets"
	Query_SpotMarket_FullMethodName                          = "/injective.exchange.v2.Query/SpotMarket"
	Query_FullSpotMarkets_FullMethodName                     = "/injective.exchange.v2.Query/FullSpotMarkets"
	Query_FullSpotMarket_FullMethodName                      = "/injective.exchange.v2.Query/FullSpotMarket"
	Query_SpotOrderbook_FullMethodName                       = "/injective.exchange.v2.Query/SpotOrderbook"
	Query_TraderSpotOrders_FullMethodName                    = "/injective.exchange.v2.Query/TraderSpotOrders"
	Query_AccountAddressSpotOrders_FullMethodName            = "/injective.exchange.v2.Query/AccountAddressSpotOrders"
	Query_SpotOrdersByHashes_FullMethodName                  = "/injective.exchange.v2.Query/SpotOrdersByHashes"
	Query_SubaccountOrders_FullMethodName                    = "/injective.exchange.v2.Query/SubaccountOrders"
	Query_TraderSpotTransientOrders_FullMethodName           = "/injective.exchange.v2.Query/TraderSpotTransientOrders"
	Query_SpotMidPriceAndTOB_FullMethodName                  = "/injective.exchange.v2.Query/SpotMidPriceAndTOB"
	Query_DerivativeMidPriceAndTOB_FullMethodName            = "/injective.exchange.v2.Query/DerivativeMidPriceAndTOB"
	Query_DerivativeOrderbook_FullMethodName                 = "/injective.exchange.v2.Query/DerivativeOrderbook"
	Query_TraderDerivativeOrders_FullMethodName              = "/injective.exchange.v2.Query/TraderDerivativeOrders"
	Query_AccountAddressDerivativeOrders_FullMethodName      = "/injective.exchange.v2.Query/AccountAddressDerivativeOrders"
	Query_DerivativeOrdersByHashes_FullMethodName            = "/injective.exchange.v2.Query/DerivativeOrdersByHashes"
	Query_TraderDerivativeTransientOrders_FullMethodName     = "/injective.exchange.v2.Query/TraderDerivativeTransientOrders"
	Query_DerivativeMarkets_FullMethodName                   = "/injective.exchange.v2.Query/DerivativeMarkets"
	Query_DerivativeMarket_FullMethodName                    = "/injective.exchange.v2.Query/DerivativeMarket"
	Query_DerivativeMarketAddress_FullMethodName             = "/injective.exchange.v2.Query/DerivativeMarketAddress"
	Query_SubaccountTradeNonce_FullMethodName                = "/injective.exchange.v2.Query/SubaccountTradeNonce"
	Query_ExchangeModuleState_FullMethodName                 = "/injective.exchange.v2.Query/ExchangeModuleState"
	Query_Positions_FullMethodName                           = "/injective.exchange.v2.Query/Positions"
	Query_PositionsInMarket_FullMethodName                   = "/injective.exchange.v2.Query/PositionsInMarket"
	Query_SubaccountPositions_FullMethodName                 = "/injective.exchange.v2.Query/SubaccountPositions"
	Query_SubaccountPositionInMarket_FullMethodName          = "/injective.exchange.v2.Query/SubaccountPositionInMarket"
	Query_SubaccountEffectivePositionInMarket_FullMethodName = "/injective.exchange.v2.Query/SubaccountEffectivePositionInMarket"
	Query_PerpetualMarketInfo_FullMethodName                 = "/injective.exchange.v2.Query/PerpetualMarketInfo"
	Query_ExpiryFuturesMarketInfo_FullMethodName             = "/injective.exchange.v2.Query/ExpiryFuturesMarketInfo"
	Query_PerpetualMarketFunding_FullMethodName              = "/injective.exchange.v2.Query/PerpetualMarketFunding"
	Query_SubaccountOrderMetadata_FullMethodName             = "/injective.exchange.v2.Query/SubaccountOrderMetadata"
	Query_TradeRewardPoints_FullMethodName                   = "/injective.exchange.v2.Query/TradeRewardPoints"
	Query_PendingTradeRewardPoints_FullMethodName            = "/injective.exchange.v2.Query/PendingTradeRewardPoints"
	Query_TradeRewardCampaign_FullMethodName                 = "/injective.exchange.v2.Query/TradeRewardCampaign"
	Query_FeeDiscountAccountInfo_FullMethodName              = "/injective.exchange.v2.Query/FeeDiscountAccountInfo"
	Query_FeeDiscountSchedule_FullMethodName                 = "/injective.exchange.v2.Query/FeeDiscountSchedule"
	Query_BalanceMismatches_FullMethodName                   = "/injective.exchange.v2.Query/BalanceMismatches"
	Query_BalanceWithBalanceHolds_FullMethodName             = "/injective.exchange.v2.Query/BalanceWithBalanceHolds"
	Query_FeeDiscountTierStatistics_FullMethodName           = "/injective.exchange.v2.Query/FeeDiscountTierStatistics"
	Query_MitoVaultInfos_FullMethodName                      = "/injective.exchange.v2.Query/MitoVaultInfos"
	Query_QueryMarketIDFromVault_FullMethodName              = "/injective.exchange.v2.Query/QueryMarketIDFromVault"
	Query_HistoricalTradeRecords_FullMethodName              = "/injective.exchange.v2.Query/HistoricalTradeRecords"
	Query_IsOptedOutOfRewards_FullMethodName                 = "/injective.exchange.v2.Query/IsOptedOutOfRewards"
	Query_OptedOutOfRewardsAccounts_FullMethodName           = "/injective.exchange.v2.Query/OptedOutOfRewardsAccounts"
	Query_MarketVolatility_FullMethodName                    = "/injective.exchange.v2.Query/MarketVolatility"
	Query_BinaryOptionsMarkets_FullMethodName                = "/injective.exchange.v2.Query/BinaryOptionsMarkets"
	Query_TraderDerivativeConditionalOrders_FullMethodName   = "/injective.exchange.v2.Query/TraderDerivativeConditionalOrders"
	Query_MarketAtomicExecutionFeeMultiplier_FullMethodName  = "/injective.exchange.v2.Query/MarketAtomicExecutionFeeMultiplier"
	Query_ActiveStakeGrant_FullMethodName                    = "/injective.exchange.v2.Query/ActiveStakeGrant"
	Query_GrantAuthorization_FullMethodName                  = "/injective.exchange.v2.Query/GrantAuthorization"
	Query_GrantAuthorizations_FullMethodName                 = "/injective.exchange.v2.Query/GrantAuthorizations"
	Query_MarketBalance_FullMethodName                       = "/injective.exchange.v2.Query/MarketBalance"
	Query_MarketBalances_FullMethodName                      = "/injective.exchange.v2.Query/MarketBalances"
	Query_DenomMinNotional_FullMethodName                    = "/injective.exchange.v2.Query/DenomMinNotional"
	Query_DenomMinNotionals_FullMethodName                   = "/injective.exchange.v2.Query/DenomMinNotionals"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Query defines the gRPC querier service.
type QueryClient interface {
	L3DerivativeOrderBook(ctx context.Context, in *QueryFullDerivativeOrderbookRequest, opts ...grpc.CallOption) (*QueryFullDerivativeOrderbookResponse, error)
	L3SpotOrderBook(ctx context.Context, in *QueryFullSpotOrderbookRequest, opts ...grpc.CallOption) (*QueryFullSpotOrderbookResponse, error)
	// Retrieves exchange params
	QueryExchangeParams(ctx context.Context, in *QueryExchangeParamsRequest, opts ...grpc.CallOption) (*QueryExchangeParamsResponse, error)
	// Retrieves a Subaccount's Deposits
	SubaccountDeposits(ctx context.Context, in *QuerySubaccountDepositsRequest, opts ...grpc.CallOption) (*QuerySubaccountDepositsResponse, error)
	// Retrieves a Subaccount's Deposits
	SubaccountDeposit(ctx context.Context, in *QuerySubaccountDepositRequest, opts ...grpc.CallOption) (*QuerySubaccountDepositResponse, error)
	// Retrieves all of the balances of all users on the exchange.
	ExchangeBalances(ctx context.Context, in *QueryExchangeBalancesRequest, opts ...grpc.CallOption) (*QueryExchangeBalancesResponse, error)
	// Retrieves the aggregate volumes for the specified account or subaccount
	AggregateVolume(ctx context.Context, in *QueryAggregateVolumeRequest, opts ...grpc.CallOption) (*QueryAggregateVolumeResponse, error)
	// Retrieves the aggregate volumes for specified accounts
	AggregateVolumes(ctx context.Context, in *QueryAggregateVolumesRequest, opts ...grpc.CallOption) (*QueryAggregateVolumesResponse, error)
	// Retrieves the aggregate volume for the specified market
	AggregateMarketVolume(ctx context.Context, in *QueryAggregateMarketVolumeRequest, opts ...grpc.CallOption) (*QueryAggregateMarketVolumeResponse, error)
	// Retrieves the aggregate market volumes for specified markets
	AggregateMarketVolumes(ctx context.Context, in *QueryAggregateMarketVolumesRequest, opts ...grpc.CallOption) (*QueryAggregateMarketVolumesResponse, error)
	// Retrieves the denom decimals for a denom.
	DenomDecimal(ctx context.Context, in *QueryDenomDecimalRequest, opts ...grpc.CallOption) (*QueryDenomDecimalResponse, error)
	// Retrieves the denom decimals for multiple denoms. Returns all denom
	// decimals if unspecified.
	DenomDecimals(ctx context.Context, in *QueryDenomDecimalsRequest, opts ...grpc.CallOption) (*QueryDenomDecimalsResponse, error)
	// Retrieves a list of spot markets.
	SpotMarkets(ctx context.Context, in *QuerySpotMarketsRequest, opts ...grpc.CallOption) (*QuerySpotMarketsResponse, error)
	// Retrieves a spot market by ticker
	SpotMarket(ctx context.Context, in *QuerySpotMarketRequest, opts ...grpc.CallOption) (*QuerySpotMarketResponse, error)
	// Retrieves a list of spot markets with extra information.
	FullSpotMarkets(ctx context.Context, in *QueryFullSpotMarketsRequest, opts ...grpc.CallOption) (*QueryFullSpotMarketsResponse, error)
	// Retrieves a spot market with extra information.
	FullSpotMarket(ctx context.Context, in *QueryFullSpotMarketRequest, opts ...grpc.CallOption) (*QueryFullSpotMarketResponse, error)
	// Retrieves a spot market's orderbook by marketID
	SpotOrderbook(ctx context.Context, in *QuerySpotOrderbookRequest, opts ...grpc.CallOption) (*QuerySpotOrderbookResponse, error)
	// Retrieves a trader's spot orders
	TraderSpotOrders(ctx context.Context, in *QueryTraderSpotOrdersRequest, opts ...grpc.CallOption) (*QueryTraderSpotOrdersResponse, error)
	// Retrieves all account address spot orders
	AccountAddressSpotOrders(ctx context.Context, in *QueryAccountAddressSpotOrdersRequest, opts ...grpc.CallOption) (*QueryAccountAddressSpotOrdersResponse, error)
	// Retrieves spot orders corresponding to specified order hashes for a given
	// subaccountID and marketID
	SpotOrdersByHashes(ctx context.Context, in *QuerySpotOrdersByHashesRequest, opts ...grpc.CallOption) (*QuerySpotOrdersByHashesResponse, error)
	// Retrieves subaccount's orders
	SubaccountOrders(ctx context.Context, in *QuerySubaccountOrdersRequest, opts ...grpc.CallOption) (*QuerySubaccountOrdersResponse, error)
	// Retrieves a trader's transient spot orders
	TraderSpotTransientOrders(ctx context.Context, in *QueryTraderSpotOrdersRequest, opts ...grpc.CallOption) (*QueryTraderSpotOrdersResponse, error)
	// Retrieves a spot market's mid-price
	SpotMidPriceAndTOB(ctx context.Context, in *QuerySpotMidPriceAndTOBRequest, opts ...grpc.CallOption) (*QuerySpotMidPriceAndTOBResponse, error)
	// Retrieves a derivative market's mid-price
	DerivativeMidPriceAndTOB(ctx context.Context, in *QueryDerivativeMidPriceAndTOBRequest, opts ...grpc.CallOption) (*QueryDerivativeMidPriceAndTOBResponse, error)
	// Retrieves a derivative market's orderbook by marketID
	DerivativeOrderbook(ctx context.Context, in *QueryDerivativeOrderbookRequest, opts ...grpc.CallOption) (*QueryDerivativeOrderbookResponse, error)
	// Retrieves a trader's derivative orders
	TraderDerivativeOrders(ctx context.Context, in *QueryTraderDerivativeOrdersRequest, opts ...grpc.CallOption) (*QueryTraderDerivativeOrdersResponse, error)
	// Retrieves all account address derivative orders
	AccountAddressDerivativeOrders(ctx context.Context, in *QueryAccountAddressDerivativeOrdersRequest, opts ...grpc.CallOption) (*QueryAccountAddressDerivativeOrdersResponse, error)
	// Retrieves a trader's derivative orders
	DerivativeOrdersByHashes(ctx context.Context, in *QueryDerivativeOrdersByHashesRequest, opts ...grpc.CallOption) (*QueryDerivativeOrdersByHashesResponse, error)
	// Retrieves a trader's transient derivative orders
	TraderDerivativeTransientOrders(ctx context.Context, in *QueryTraderDerivativeOrdersRequest, opts ...grpc.CallOption) (*QueryTraderDerivativeOrdersResponse, error)
	// Retrieves a list of derivative markets.
	DerivativeMarkets(ctx context.Context, in *QueryDerivativeMarketsRequest, opts ...grpc.CallOption) (*QueryDerivativeMarketsResponse, error)
	// Retrieves a derivative market by ticker
	DerivativeMarket(ctx context.Context, in *QueryDerivativeMarketRequest, opts ...grpc.CallOption) (*QueryDerivativeMarketResponse, error)
	// Retrieves a derivative market's corresponding address for fees that
	// contribute to the market's insurance fund
	DerivativeMarketAddress(ctx context.Context, in *QueryDerivativeMarketAddressRequest, opts ...grpc.CallOption) (*QueryDerivativeMarketAddressResponse, error)
	// Retrieves a subaccount's trade nonce
	SubaccountTradeNonce(ctx context.Context, in *QuerySubaccountTradeNonceRequest, opts ...grpc.CallOption) (*QuerySubaccountTradeNonceResponse, error)
	// Retrieves the entire exchange module's state
	ExchangeModuleState(ctx context.Context, in *QueryModuleStateRequest, opts ...grpc.CallOption) (*QueryModuleStateResponse, error)
	// Retrieves the entire exchange module's positions
	Positions(ctx context.Context, in *QueryPositionsRequest, opts ...grpc.CallOption) (*QueryPositionsResponse, error)
	// Retrieves all positions in market
	PositionsInMarket(ctx context.Context, in *QueryPositionsInMarketRequest, opts ...grpc.CallOption) (*QueryPositionsInMarketResponse, error)
	// Retrieves subaccount's positions
	SubaccountPositions(ctx context.Context, in *QuerySubaccountPositionsRequest, opts ...grpc.CallOption) (*QuerySubaccountPositionsResponse, error)
	// Retrieves subaccount's position in market
	SubaccountPositionInMarket(ctx context.Context, in *QuerySubaccountPositionInMarketRequest, opts ...grpc.CallOption) (*QuerySubaccountPositionInMarketResponse, error)
	// Retrieves subaccount's position in market
	SubaccountEffectivePositionInMarket(ctx context.Context, in *QuerySubaccountEffectivePositionInMarketRequest, opts ...grpc.CallOption) (*QuerySubaccountEffectivePositionInMarketResponse, error)
	// Retrieves perpetual market info
	PerpetualMarketInfo(ctx context.Context, in *QueryPerpetualMarketInfoRequest, opts ...grpc.CallOption) (*QueryPerpetualMarketInfoResponse, error)
	// Retrieves expiry market info
	ExpiryFuturesMarketInfo(ctx context.Context, in *QueryExpiryFuturesMarketInfoRequest, opts ...grpc.CallOption) (*QueryExpiryFuturesMarketInfoResponse, error)
	// Retrieves perpetual market funding
	PerpetualMarketFunding(ctx context.Context, in *QueryPerpetualMarketFundingRequest, opts ...grpc.CallOption) (*QueryPerpetualMarketFundingResponse, error)
	// Retrieves subaccount's order metadata
	SubaccountOrderMetadata(ctx context.Context, in *QuerySubaccountOrderMetadataRequest, opts ...grpc.CallOption) (*QuerySubaccountOrderMetadataResponse, error)
	// Retrieves the account and total trade rewards points
	TradeRewardPoints(ctx context.Context, in *QueryTradeRewardPointsRequest, opts ...grpc.CallOption) (*QueryTradeRewardPointsResponse, error)
	// Retrieves the pending account and total trade rewards points
	PendingTradeRewardPoints(ctx context.Context, in *QueryTradeRewardPointsRequest, opts ...grpc.CallOption) (*QueryTradeRewardPointsResponse, error)
	// Retrieves the trade reward campaign
	TradeRewardCampaign(ctx context.Context, in *QueryTradeRewardCampaignRequest, opts ...grpc.CallOption) (*QueryTradeRewardCampaignResponse, error)
	// Retrieves the account's fee discount info
	FeeDiscountAccountInfo(ctx context.Context, in *QueryFeeDiscountAccountInfoRequest, opts ...grpc.CallOption) (*QueryFeeDiscountAccountInfoResponse, error)
	// Retrieves the fee discount schedule
	FeeDiscountSchedule(ctx context.Context, in *QueryFeeDiscountScheduleRequest, opts ...grpc.CallOption) (*QueryFeeDiscountScheduleResponse, error)
	// Retrieves mismatches between available vs. total balance
	BalanceMismatches(ctx context.Context, in *QueryBalanceMismatchesRequest, opts ...grpc.CallOption) (*QueryBalanceMismatchesResponse, error)
	// Retrieves available and total balances with balance holds
	BalanceWithBalanceHolds(ctx context.Context, in *QueryBalanceWithBalanceHoldsRequest, opts ...grpc.CallOption) (*QueryBalanceWithBalanceHoldsResponse, error)
	// Retrieves fee discount tier stats
	FeeDiscountTierStatistics(ctx context.Context, in *QueryFeeDiscountTierStatisticsRequest, opts ...grpc.CallOption) (*QueryFeeDiscountTierStatisticsResponse, error)
	// Retrieves market making pool info
	MitoVaultInfos(ctx context.Context, in *MitoVaultInfosRequest, opts ...grpc.CallOption) (*MitoVaultInfosResponse, error)
	// QueryMarketIDFromVault returns the market ID for a given vault subaccount
	// ID
	QueryMarketIDFromVault(ctx context.Context, in *QueryMarketIDFromVaultRequest, opts ...grpc.CallOption) (*QueryMarketIDFromVaultResponse, error)
	// Retrieves historical trade records for a given market ID
	HistoricalTradeRecords(ctx context.Context, in *QueryHistoricalTradeRecordsRequest, opts ...grpc.CallOption) (*QueryHistoricalTradeRecordsResponse, error)
	// Retrieves if the account is opted out of rewards
	IsOptedOutOfRewards(ctx context.Context, in *QueryIsOptedOutOfRewardsRequest, opts ...grpc.CallOption) (*QueryIsOptedOutOfRewardsResponse, error)
	// Retrieves all accounts opted out of rewards
	OptedOutOfRewardsAccounts(ctx context.Context, in *QueryOptedOutOfRewardsAccountsRequest, opts ...grpc.CallOption) (*QueryOptedOutOfRewardsAccountsResponse, error)
	// MarketVolatility computes the volatility for spot and derivative markets
	// trading history.
	MarketVolatility(ctx context.Context, in *QueryMarketVolatilityRequest, opts ...grpc.CallOption) (*QueryMarketVolatilityResponse, error)
	// Retrieves a spot market's orderbook by marketID
	BinaryOptionsMarkets(ctx context.Context, in *QueryBinaryMarketsRequest, opts ...grpc.CallOption) (*QueryBinaryMarketsResponse, error)
	// Retrieves a trader's derivative conditional orders
	TraderDerivativeConditionalOrders(ctx context.Context, in *QueryTraderDerivativeConditionalOrdersRequest, opts ...grpc.CallOption) (*QueryTraderDerivativeConditionalOrdersResponse, error)
	MarketAtomicExecutionFeeMultiplier(ctx context.Context, in *QueryMarketAtomicExecutionFeeMultiplierRequest, opts ...grpc.CallOption) (*QueryMarketAtomicExecutionFeeMultiplierResponse, error)
	// Retrieves the active stake grant for a grantee
	ActiveStakeGrant(ctx context.Context, in *QueryActiveStakeGrantRequest, opts ...grpc.CallOption) (*QueryActiveStakeGrantResponse, error)
	// Retrieves the grant authorization amount for a granter and grantee
	GrantAuthorization(ctx context.Context, in *QueryGrantAuthorizationRequest, opts ...grpc.CallOption) (*QueryGrantAuthorizationResponse, error)
	// Retrieves the grant authorization amount for a granter and grantee
	GrantAuthorizations(ctx context.Context, in *QueryGrantAuthorizationsRequest, opts ...grpc.CallOption) (*QueryGrantAuthorizationsResponse, error)
	// Retrieves a derivative or binary options market's balance
	MarketBalance(ctx context.Context, in *QueryMarketBalanceRequest, opts ...grpc.CallOption) (*QueryMarketBalanceResponse, error)
	// Retrieves all derivative or binary options market balances
	MarketBalances(ctx context.Context, in *QueryMarketBalancesRequest, opts ...grpc.CallOption) (*QueryMarketBalancesResponse, error)
	// Retrieves the min notional for a denom
	DenomMinNotional(ctx context.Context, in *QueryDenomMinNotionalRequest, opts ...grpc.CallOption) (*QueryDenomMinNotionalResponse, error)
	// Retrieves the min notionals for all denoms
	DenomMinNotionals(ctx context.Context, in *QueryDenomMinNotionalsRequest, opts ...grpc.CallOption) (*QueryDenomMinNotionalsResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) L3DerivativeOrderBook(ctx context.Context, in *QueryFullDerivativeOrderbookRequest, opts ...grpc.CallOption) (*QueryFullDerivativeOrderbookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryFullDerivativeOrderbookResponse)
	err := c.cc.Invoke(ctx, Query_L3DerivativeOrderBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) L3SpotOrderBook(ctx context.Context, in *QueryFullSpotOrderbookRequest, opts ...grpc.CallOption) (*QueryFullSpotOrderbookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryFullSpotOrderbookResponse)
	err := c.cc.Invoke(ctx, Query_L3SpotOrderBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryExchangeParams(ctx context.Context, in *QueryExchangeParamsRequest, opts ...grpc.CallOption) (*QueryExchangeParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryExchangeParamsResponse)
	err := c.cc.Invoke(ctx, Query_QueryExchangeParams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubaccountDeposits(ctx context.Context, in *QuerySubaccountDepositsRequest, opts ...grpc.CallOption) (*QuerySubaccountDepositsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuerySubaccountDepositsResponse)
	err := c.cc.Invoke(ctx, Query_SubaccountDeposits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubaccountDeposit(ctx context.Context, in *QuerySubaccountDepositRequest, opts ...grpc.CallOption) (*QuerySubaccountDepositResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuerySubaccountDepositResponse)
	err := c.cc.Invoke(ctx, Query_SubaccountDeposit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExchangeBalances(ctx context.Context, in *QueryExchangeBalancesRequest, opts ...grpc.CallOption) (*QueryExchangeBalancesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryExchangeBalancesResponse)
	err := c.cc.Invoke(ctx, Query_ExchangeBalances_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AggregateVolume(ctx context.Context, in *QueryAggregateVolumeRequest, opts ...grpc.CallOption) (*QueryAggregateVolumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryAggregateVolumeResponse)
	err := c.cc.Invoke(ctx, Query_AggregateVolume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AggregateVolumes(ctx context.Context, in *QueryAggregateVolumesRequest, opts ...grpc.CallOption) (*QueryAggregateVolumesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryAggregateVolumesResponse)
	err := c.cc.Invoke(ctx, Query_AggregateVolumes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AggregateMarketVolume(ctx context.Context, in *QueryAggregateMarketVolumeRequest, opts ...grpc.CallOption) (*QueryAggregateMarketVolumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryAggregateMarketVolumeResponse)
	err := c.cc.Invoke(ctx, Query_AggregateMarketVolume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AggregateMarketVolumes(ctx context.Context, in *QueryAggregateMarketVolumesRequest, opts ...grpc.CallOption) (*QueryAggregateMarketVolumesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryAggregateMarketVolumesResponse)
	err := c.cc.Invoke(ctx, Query_AggregateMarketVolumes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DenomDecimal(ctx context.Context, in *QueryDenomDecimalRequest, opts ...grpc.CallOption) (*QueryDenomDecimalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryDenomDecimalResponse)
	err := c.cc.Invoke(ctx, Query_DenomDecimal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DenomDecimals(ctx context.Context, in *QueryDenomDecimalsRequest, opts ...grpc.CallOption) (*QueryDenomDecimalsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryDenomDecimalsResponse)
	err := c.cc.Invoke(ctx, Query_DenomDecimals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpotMarkets(ctx context.Context, in *QuerySpotMarketsRequest, opts ...grpc.CallOption) (*QuerySpotMarketsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuerySpotMarketsResponse)
	err := c.cc.Invoke(ctx, Query_SpotMarkets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpotMarket(ctx context.Context, in *QuerySpotMarketRequest, opts ...grpc.CallOption) (*QuerySpotMarketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuerySpotMarketResponse)
	err := c.cc.Invoke(ctx, Query_SpotMarket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FullSpotMarkets(ctx context.Context, in *QueryFullSpotMarketsRequest, opts ...grpc.CallOption) (*QueryFullSpotMarketsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryFullSpotMarketsResponse)
	err := c.cc.Invoke(ctx, Query_FullSpotMarkets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FullSpotMarket(ctx context.Context, in *QueryFullSpotMarketRequest, opts ...grpc.CallOption) (*QueryFullSpotMarketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryFullSpotMarketResponse)
	err := c.cc.Invoke(ctx, Query_FullSpotMarket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpotOrderbook(ctx context.Context, in *QuerySpotOrderbookRequest, opts ...grpc.CallOption) (*QuerySpotOrderbookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuerySpotOrderbookResponse)
	err := c.cc.Invoke(ctx, Query_SpotOrderbook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TraderSpotOrders(ctx context.Context, in *QueryTraderSpotOrdersRequest, opts ...grpc.CallOption) (*QueryTraderSpotOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryTraderSpotOrdersResponse)
	err := c.cc.Invoke(ctx, Query_TraderSpotOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountAddressSpotOrders(ctx context.Context, in *QueryAccountAddressSpotOrdersRequest, opts ...grpc.CallOption) (*QueryAccountAddressSpotOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryAccountAddressSpotOrdersResponse)
	err := c.cc.Invoke(ctx, Query_AccountAddressSpotOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpotOrdersByHashes(ctx context.Context, in *QuerySpotOrdersByHashesRequest, opts ...grpc.CallOption) (*QuerySpotOrdersByHashesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuerySpotOrdersByHashesResponse)
	err := c.cc.Invoke(ctx, Query_SpotOrdersByHashes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubaccountOrders(ctx context.Context, in *QuerySubaccountOrdersRequest, opts ...grpc.CallOption) (*QuerySubaccountOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuerySubaccountOrdersResponse)
	err := c.cc.Invoke(ctx, Query_SubaccountOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TraderSpotTransientOrders(ctx context.Context, in *QueryTraderSpotOrdersRequest, opts ...grpc.CallOption) (*QueryTraderSpotOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryTraderSpotOrdersResponse)
	err := c.cc.Invoke(ctx, Query_TraderSpotTransientOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpotMidPriceAndTOB(ctx context.Context, in *QuerySpotMidPriceAndTOBRequest, opts ...grpc.CallOption) (*QuerySpotMidPriceAndTOBResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuerySpotMidPriceAndTOBResponse)
	err := c.cc.Invoke(ctx, Query_SpotMidPriceAndTOB_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DerivativeMidPriceAndTOB(ctx context.Context, in *QueryDerivativeMidPriceAndTOBRequest, opts ...grpc.CallOption) (*QueryDerivativeMidPriceAndTOBResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryDerivativeMidPriceAndTOBResponse)
	err := c.cc.Invoke(ctx, Query_DerivativeMidPriceAndTOB_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DerivativeOrderbook(ctx context.Context, in *QueryDerivativeOrderbookRequest, opts ...grpc.CallOption) (*QueryDerivativeOrderbookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryDerivativeOrderbookResponse)
	err := c.cc.Invoke(ctx, Query_DerivativeOrderbook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TraderDerivativeOrders(ctx context.Context, in *QueryTraderDerivativeOrdersRequest, opts ...grpc.CallOption) (*QueryTraderDerivativeOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryTraderDerivativeOrdersResponse)
	err := c.cc.Invoke(ctx, Query_TraderDerivativeOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountAddressDerivativeOrders(ctx context.Context, in *QueryAccountAddressDerivativeOrdersRequest, opts ...grpc.CallOption) (*QueryAccountAddressDerivativeOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryAccountAddressDerivativeOrdersResponse)
	err := c.cc.Invoke(ctx, Query_AccountAddressDerivativeOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DerivativeOrdersByHashes(ctx context.Context, in *QueryDerivativeOrdersByHashesRequest, opts ...grpc.CallOption) (*QueryDerivativeOrdersByHashesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryDerivativeOrdersByHashesResponse)
	err := c.cc.Invoke(ctx, Query_DerivativeOrdersByHashes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TraderDerivativeTransientOrders(ctx context.Context, in *QueryTraderDerivativeOrdersRequest, opts ...grpc.CallOption) (*QueryTraderDerivativeOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryTraderDerivativeOrdersResponse)
	err := c.cc.Invoke(ctx, Query_TraderDerivativeTransientOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DerivativeMarkets(ctx context.Context, in *QueryDerivativeMarketsRequest, opts ...grpc.CallOption) (*QueryDerivativeMarketsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryDerivativeMarketsResponse)
	err := c.cc.Invoke(ctx, Query_DerivativeMarkets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DerivativeMarket(ctx context.Context, in *QueryDerivativeMarketRequest, opts ...grpc.CallOption) (*QueryDerivativeMarketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryDerivativeMarketResponse)
	err := c.cc.Invoke(ctx, Query_DerivativeMarket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DerivativeMarketAddress(ctx context.Context, in *QueryDerivativeMarketAddressRequest, opts ...grpc.CallOption) (*QueryDerivativeMarketAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryDerivativeMarketAddressResponse)
	err := c.cc.Invoke(ctx, Query_DerivativeMarketAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubaccountTradeNonce(ctx context.Context, in *QuerySubaccountTradeNonceRequest, opts ...grpc.CallOption) (*QuerySubaccountTradeNonceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuerySubaccountTradeNonceResponse)
	err := c.cc.Invoke(ctx, Query_SubaccountTradeNonce_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExchangeModuleState(ctx context.Context, in *QueryModuleStateRequest, opts ...grpc.CallOption) (*QueryModuleStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryModuleStateResponse)
	err := c.cc.Invoke(ctx, Query_ExchangeModuleState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Positions(ctx context.Context, in *QueryPositionsRequest, opts ...grpc.CallOption) (*QueryPositionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryPositionsResponse)
	err := c.cc.Invoke(ctx, Query_Positions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PositionsInMarket(ctx context.Context, in *QueryPositionsInMarketRequest, opts ...grpc.CallOption) (*QueryPositionsInMarketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryPositionsInMarketResponse)
	err := c.cc.Invoke(ctx, Query_PositionsInMarket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubaccountPositions(ctx context.Context, in *QuerySubaccountPositionsRequest, opts ...grpc.CallOption) (*QuerySubaccountPositionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuerySubaccountPositionsResponse)
	err := c.cc.Invoke(ctx, Query_SubaccountPositions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubaccountPositionInMarket(ctx context.Context, in *QuerySubaccountPositionInMarketRequest, opts ...grpc.CallOption) (*QuerySubaccountPositionInMarketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuerySubaccountPositionInMarketResponse)
	err := c.cc.Invoke(ctx, Query_SubaccountPositionInMarket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubaccountEffectivePositionInMarket(ctx context.Context, in *QuerySubaccountEffectivePositionInMarketRequest, opts ...grpc.CallOption) (*QuerySubaccountEffectivePositionInMarketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuerySubaccountEffectivePositionInMarketResponse)
	err := c.cc.Invoke(ctx, Query_SubaccountEffectivePositionInMarket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PerpetualMarketInfo(ctx context.Context, in *QueryPerpetualMarketInfoRequest, opts ...grpc.CallOption) (*QueryPerpetualMarketInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryPerpetualMarketInfoResponse)
	err := c.cc.Invoke(ctx, Query_PerpetualMarketInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExpiryFuturesMarketInfo(ctx context.Context, in *QueryExpiryFuturesMarketInfoRequest, opts ...grpc.CallOption) (*QueryExpiryFuturesMarketInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryExpiryFuturesMarketInfoResponse)
	err := c.cc.Invoke(ctx, Query_ExpiryFuturesMarketInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PerpetualMarketFunding(ctx context.Context, in *QueryPerpetualMarketFundingRequest, opts ...grpc.CallOption) (*QueryPerpetualMarketFundingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryPerpetualMarketFundingResponse)
	err := c.cc.Invoke(ctx, Query_PerpetualMarketFunding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SubaccountOrderMetadata(ctx context.Context, in *QuerySubaccountOrderMetadataRequest, opts ...grpc.CallOption) (*QuerySubaccountOrderMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuerySubaccountOrderMetadataResponse)
	err := c.cc.Invoke(ctx, Query_SubaccountOrderMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TradeRewardPoints(ctx context.Context, in *QueryTradeRewardPointsRequest, opts ...grpc.CallOption) (*QueryTradeRewardPointsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryTradeRewardPointsResponse)
	err := c.cc.Invoke(ctx, Query_TradeRewardPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingTradeRewardPoints(ctx context.Context, in *QueryTradeRewardPointsRequest, opts ...grpc.CallOption) (*QueryTradeRewardPointsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryTradeRewardPointsResponse)
	err := c.cc.Invoke(ctx, Query_PendingTradeRewardPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TradeRewardCampaign(ctx context.Context, in *QueryTradeRewardCampaignRequest, opts ...grpc.CallOption) (*QueryTradeRewardCampaignResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryTradeRewardCampaignResponse)
	err := c.cc.Invoke(ctx, Query_TradeRewardCampaign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeeDiscountAccountInfo(ctx context.Context, in *QueryFeeDiscountAccountInfoRequest, opts ...grpc.CallOption) (*QueryFeeDiscountAccountInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryFeeDiscountAccountInfoResponse)
	err := c.cc.Invoke(ctx, Query_FeeDiscountAccountInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeeDiscountSchedule(ctx context.Context, in *QueryFeeDiscountScheduleRequest, opts ...grpc.CallOption) (*QueryFeeDiscountScheduleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryFeeDiscountScheduleResponse)
	err := c.cc.Invoke(ctx, Query_FeeDiscountSchedule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BalanceMismatches(ctx context.Context, in *QueryBalanceMismatchesRequest, opts ...grpc.CallOption) (*QueryBalanceMismatchesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryBalanceMismatchesResponse)
	err := c.cc.Invoke(ctx, Query_BalanceMismatches_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BalanceWithBalanceHolds(ctx context.Context, in *QueryBalanceWithBalanceHoldsRequest, opts ...grpc.CallOption) (*QueryBalanceWithBalanceHoldsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryBalanceWithBalanceHoldsResponse)
	err := c.cc.Invoke(ctx, Query_BalanceWithBalanceHolds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeeDiscountTierStatistics(ctx context.Context, in *QueryFeeDiscountTierStatisticsRequest, opts ...grpc.CallOption) (*QueryFeeDiscountTierStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryFeeDiscountTierStatisticsResponse)
	err := c.cc.Invoke(ctx, Query_FeeDiscountTierStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MitoVaultInfos(ctx context.Context, in *MitoVaultInfosRequest, opts ...grpc.CallOption) (*MitoVaultInfosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MitoVaultInfosResponse)
	err := c.cc.Invoke(ctx, Query_MitoVaultInfos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryMarketIDFromVault(ctx context.Context, in *QueryMarketIDFromVaultRequest, opts ...grpc.CallOption) (*QueryMarketIDFromVaultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryMarketIDFromVaultResponse)
	err := c.cc.Invoke(ctx, Query_QueryMarketIDFromVault_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HistoricalTradeRecords(ctx context.Context, in *QueryHistoricalTradeRecordsRequest, opts ...grpc.CallOption) (*QueryHistoricalTradeRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryHistoricalTradeRecordsResponse)
	err := c.cc.Invoke(ctx, Query_HistoricalTradeRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsOptedOutOfRewards(ctx context.Context, in *QueryIsOptedOutOfRewardsRequest, opts ...grpc.CallOption) (*QueryIsOptedOutOfRewardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryIsOptedOutOfRewardsResponse)
	err := c.cc.Invoke(ctx, Query_IsOptedOutOfRewards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OptedOutOfRewardsAccounts(ctx context.Context, in *QueryOptedOutOfRewardsAccountsRequest, opts ...grpc.CallOption) (*QueryOptedOutOfRewardsAccountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryOptedOutOfRewardsAccountsResponse)
	err := c.cc.Invoke(ctx, Query_OptedOutOfRewardsAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MarketVolatility(ctx context.Context, in *QueryMarketVolatilityRequest, opts ...grpc.CallOption) (*QueryMarketVolatilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryMarketVolatilityResponse)
	err := c.cc.Invoke(ctx, Query_MarketVolatility_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BinaryOptionsMarkets(ctx context.Context, in *QueryBinaryMarketsRequest, opts ...grpc.CallOption) (*QueryBinaryMarketsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryBinaryMarketsResponse)
	err := c.cc.Invoke(ctx, Query_BinaryOptionsMarkets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TraderDerivativeConditionalOrders(ctx context.Context, in *QueryTraderDerivativeConditionalOrdersRequest, opts ...grpc.CallOption) (*QueryTraderDerivativeConditionalOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryTraderDerivativeConditionalOrdersResponse)
	err := c.cc.Invoke(ctx, Query_TraderDerivativeConditionalOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MarketAtomicExecutionFeeMultiplier(ctx context.Context, in *QueryMarketAtomicExecutionFeeMultiplierRequest, opts ...grpc.CallOption) (*QueryMarketAtomicExecutionFeeMultiplierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryMarketAtomicExecutionFeeMultiplierResponse)
	err := c.cc.Invoke(ctx, Query_MarketAtomicExecutionFeeMultiplier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActiveStakeGrant(ctx context.Context, in *QueryActiveStakeGrantRequest, opts ...grpc.CallOption) (*QueryActiveStakeGrantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryActiveStakeGrantResponse)
	err := c.cc.Invoke(ctx, Query_ActiveStakeGrant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GrantAuthorization(ctx context.Context, in *QueryGrantAuthorizationRequest, opts ...grpc.CallOption) (*QueryGrantAuthorizationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryGrantAuthorizationResponse)
	err := c.cc.Invoke(ctx, Query_GrantAuthorization_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GrantAuthorizations(ctx context.Context, in *QueryGrantAuthorizationsRequest, opts ...grpc.CallOption) (*QueryGrantAuthorizationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryGrantAuthorizationsResponse)
	err := c.cc.Invoke(ctx, Query_GrantAuthorizations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MarketBalance(ctx context.Context, in *QueryMarketBalanceRequest, opts ...grpc.CallOption) (*QueryMarketBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryMarketBalanceResponse)
	err := c.cc.Invoke(ctx, Query_MarketBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MarketBalances(ctx context.Context, in *QueryMarketBalancesRequest, opts ...grpc.CallOption) (*QueryMarketBalancesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryMarketBalancesResponse)
	err := c.cc.Invoke(ctx, Query_MarketBalances_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DenomMinNotional(ctx context.Context, in *QueryDenomMinNotionalRequest, opts ...grpc.CallOption) (*QueryDenomMinNotionalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryDenomMinNotionalResponse)
	err := c.cc.Invoke(ctx, Query_DenomMinNotional_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DenomMinNotionals(ctx context.Context, in *QueryDenomMinNotionalsRequest, opts ...grpc.CallOption) (*QueryDenomMinNotionalsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryDenomMinNotionalsResponse)
	err := c.cc.Invoke(ctx, Query_DenomMinNotionals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility.
//
// Query defines the gRPC querier service.
type QueryServer interface {
	L3DerivativeOrderBook(context.Context, *QueryFullDerivativeOrderbookRequest) (*QueryFullDerivativeOrderbookResponse, error)
	L3SpotOrderBook(context.Context, *QueryFullSpotOrderbookRequest) (*QueryFullSpotOrderbookResponse, error)
	// Retrieves exchange params
	QueryExchangeParams(context.Context, *QueryExchangeParamsRequest) (*QueryExchangeParamsResponse, error)
	// Retrieves a Subaccount's Deposits
	SubaccountDeposits(context.Context, *QuerySubaccountDepositsRequest) (*QuerySubaccountDepositsResponse, error)
	// Retrieves a Subaccount's Deposits
	SubaccountDeposit(context.Context, *QuerySubaccountDepositRequest) (*QuerySubaccountDepositResponse, error)
	// Retrieves all of the balances of all users on the exchange.
	ExchangeBalances(context.Context, *QueryExchangeBalancesRequest) (*QueryExchangeBalancesResponse, error)
	// Retrieves the aggregate volumes for the specified account or subaccount
	AggregateVolume(context.Context, *QueryAggregateVolumeRequest) (*QueryAggregateVolumeResponse, error)
	// Retrieves the aggregate volumes for specified accounts
	AggregateVolumes(context.Context, *QueryAggregateVolumesRequest) (*QueryAggregateVolumesResponse, error)
	// Retrieves the aggregate volume for the specified market
	AggregateMarketVolume(context.Context, *QueryAggregateMarketVolumeRequest) (*QueryAggregateMarketVolumeResponse, error)
	// Retrieves the aggregate market volumes for specified markets
	AggregateMarketVolumes(context.Context, *QueryAggregateMarketVolumesRequest) (*QueryAggregateMarketVolumesResponse, error)
	// Retrieves the denom decimals for a denom.
	DenomDecimal(context.Context, *QueryDenomDecimalRequest) (*QueryDenomDecimalResponse, error)
	// Retrieves the denom decimals for multiple denoms. Returns all denom
	// decimals if unspecified.
	DenomDecimals(context.Context, *QueryDenomDecimalsRequest) (*QueryDenomDecimalsResponse, error)
	// Retrieves a list of spot markets.
	SpotMarkets(context.Context, *QuerySpotMarketsRequest) (*QuerySpotMarketsResponse, error)
	// Retrieves a spot market by ticker
	SpotMarket(context.Context, *QuerySpotMarketRequest) (*QuerySpotMarketResponse, error)
	// Retrieves a list of spot markets with extra information.
	FullSpotMarkets(context.Context, *QueryFullSpotMarketsRequest) (*QueryFullSpotMarketsResponse, error)
	// Retrieves a spot market with extra information.
	FullSpotMarket(context.Context, *QueryFullSpotMarketRequest) (*QueryFullSpotMarketResponse, error)
	// Retrieves a spot market's orderbook by marketID
	SpotOrderbook(context.Context, *QuerySpotOrderbookRequest) (*QuerySpotOrderbookResponse, error)
	// Retrieves a trader's spot orders
	TraderSpotOrders(context.Context, *QueryTraderSpotOrdersRequest) (*QueryTraderSpotOrdersResponse, error)
	// Retrieves all account address spot orders
	AccountAddressSpotOrders(context.Context, *QueryAccountAddressSpotOrdersRequest) (*QueryAccountAddressSpotOrdersResponse, error)
	// Retrieves spot orders corresponding to specified order hashes for a given
	// subaccountID and marketID
	SpotOrdersByHashes(context.Context, *QuerySpotOrdersByHashesRequest) (*QuerySpotOrdersByHashesResponse, error)
	// Retrieves subaccount's orders
	SubaccountOrders(context.Context, *QuerySubaccountOrdersRequest) (*QuerySubaccountOrdersResponse, error)
	// Retrieves a trader's transient spot orders
	TraderSpotTransientOrders(context.Context, *QueryTraderSpotOrdersRequest) (*QueryTraderSpotOrdersResponse, error)
	// Retrieves a spot market's mid-price
	SpotMidPriceAndTOB(context.Context, *QuerySpotMidPriceAndTOBRequest) (*QuerySpotMidPriceAndTOBResponse, error)
	// Retrieves a derivative market's mid-price
	DerivativeMidPriceAndTOB(context.Context, *QueryDerivativeMidPriceAndTOBRequest) (*QueryDerivativeMidPriceAndTOBResponse, error)
	// Retrieves a derivative market's orderbook by marketID
	DerivativeOrderbook(context.Context, *QueryDerivativeOrderbookRequest) (*QueryDerivativeOrderbookResponse, error)
	// Retrieves a trader's derivative orders
	TraderDerivativeOrders(context.Context, *QueryTraderDerivativeOrdersRequest) (*QueryTraderDerivativeOrdersResponse, error)
	// Retrieves all account address derivative orders
	AccountAddressDerivativeOrders(context.Context, *QueryAccountAddressDerivativeOrdersRequest) (*QueryAccountAddressDerivativeOrdersResponse, error)
	// Retrieves a trader's derivative orders
	DerivativeOrdersByHashes(context.Context, *QueryDerivativeOrdersByHashesRequest) (*QueryDerivativeOrdersByHashesResponse, error)
	// Retrieves a trader's transient derivative orders
	TraderDerivativeTransientOrders(context.Context, *QueryTraderDerivativeOrdersRequest) (*QueryTraderDerivativeOrdersResponse, error)
	// Retrieves a list of derivative markets.
	DerivativeMarkets(context.Context, *QueryDerivativeMarketsRequest) (*QueryDerivativeMarketsResponse, error)
	// Retrieves a derivative market by ticker
	DerivativeMarket(context.Context, *QueryDerivativeMarketRequest) (*QueryDerivativeMarketResponse, error)
	// Retrieves a derivative market's corresponding address for fees that
	// contribute to the market's insurance fund
	DerivativeMarketAddress(context.Context, *QueryDerivativeMarketAddressRequest) (*QueryDerivativeMarketAddressResponse, error)
	// Retrieves a subaccount's trade nonce
	SubaccountTradeNonce(context.Context, *QuerySubaccountTradeNonceRequest) (*QuerySubaccountTradeNonceResponse, error)
	// Retrieves the entire exchange module's state
	ExchangeModuleState(context.Context, *QueryModuleStateRequest) (*QueryModuleStateResponse, error)
	// Retrieves the entire exchange module's positions
	Positions(context.Context, *QueryPositionsRequest) (*QueryPositionsResponse, error)
	// Retrieves all positions in market
	PositionsInMarket(context.Context, *QueryPositionsInMarketRequest) (*QueryPositionsInMarketResponse, error)
	// Retrieves subaccount's positions
	SubaccountPositions(context.Context, *QuerySubaccountPositionsRequest) (*QuerySubaccountPositionsResponse, error)
	// Retrieves subaccount's position in market
	SubaccountPositionInMarket(context.Context, *QuerySubaccountPositionInMarketRequest) (*QuerySubaccountPositionInMarketResponse, error)
	// Retrieves subaccount's position in market
	SubaccountEffectivePositionInMarket(context.Context, *QuerySubaccountEffectivePositionInMarketRequest) (*QuerySubaccountEffectivePositionInMarketResponse, error)
	// Retrieves perpetual market info
	PerpetualMarketInfo(context.Context, *QueryPerpetualMarketInfoRequest) (*QueryPerpetualMarketInfoResponse, error)
	// Retrieves expiry market info
	ExpiryFuturesMarketInfo(context.Context, *QueryExpiryFuturesMarketInfoRequest) (*QueryExpiryFuturesMarketInfoResponse, error)
	// Retrieves perpetual market funding
	PerpetualMarketFunding(context.Context, *QueryPerpetualMarketFundingRequest) (*QueryPerpetualMarketFundingResponse, error)
	// Retrieves subaccount's order metadata
	SubaccountOrderMetadata(context.Context, *QuerySubaccountOrderMetadataRequest) (*QuerySubaccountOrderMetadataResponse, error)
	// Retrieves the account and total trade rewards points
	TradeRewardPoints(context.Context, *QueryTradeRewardPointsRequest) (*QueryTradeRewardPointsResponse, error)
	// Retrieves the pending account and total trade rewards points
	PendingTradeRewardPoints(context.Context, *QueryTradeRewardPointsRequest) (*QueryTradeRewardPointsResponse, error)
	// Retrieves the trade reward campaign
	TradeRewardCampaign(context.Context, *QueryTradeRewardCampaignRequest) (*QueryTradeRewardCampaignResponse, error)
	// Retrieves the account's fee discount info
	FeeDiscountAccountInfo(context.Context, *QueryFeeDiscountAccountInfoRequest) (*QueryFeeDiscountAccountInfoResponse, error)
	// Retrieves the fee discount schedule
	FeeDiscountSchedule(context.Context, *QueryFeeDiscountScheduleRequest) (*QueryFeeDiscountScheduleResponse, error)
	// Retrieves mismatches between available vs. total balance
	BalanceMismatches(context.Context, *QueryBalanceMismatchesRequest) (*QueryBalanceMismatchesResponse, error)
	// Retrieves available and total balances with balance holds
	BalanceWithBalanceHolds(context.Context, *QueryBalanceWithBalanceHoldsRequest) (*QueryBalanceWithBalanceHoldsResponse, error)
	// Retrieves fee discount tier stats
	FeeDiscountTierStatistics(context.Context, *QueryFeeDiscountTierStatisticsRequest) (*QueryFeeDiscountTierStatisticsResponse, error)
	// Retrieves market making pool info
	MitoVaultInfos(context.Context, *MitoVaultInfosRequest) (*MitoVaultInfosResponse, error)
	// QueryMarketIDFromVault returns the market ID for a given vault subaccount
	// ID
	QueryMarketIDFromVault(context.Context, *QueryMarketIDFromVaultRequest) (*QueryMarketIDFromVaultResponse, error)
	// Retrieves historical trade records for a given market ID
	HistoricalTradeRecords(context.Context, *QueryHistoricalTradeRecordsRequest) (*QueryHistoricalTradeRecordsResponse, error)
	// Retrieves if the account is opted out of rewards
	IsOptedOutOfRewards(context.Context, *QueryIsOptedOutOfRewardsRequest) (*QueryIsOptedOutOfRewardsResponse, error)
	// Retrieves all accounts opted out of rewards
	OptedOutOfRewardsAccounts(context.Context, *QueryOptedOutOfRewardsAccountsRequest) (*QueryOptedOutOfRewardsAccountsResponse, error)
	// MarketVolatility computes the volatility for spot and derivative markets
	// trading history.
	MarketVolatility(context.Context, *QueryMarketVolatilityRequest) (*QueryMarketVolatilityResponse, error)
	// Retrieves a spot market's orderbook by marketID
	BinaryOptionsMarkets(context.Context, *QueryBinaryMarketsRequest) (*QueryBinaryMarketsResponse, error)
	// Retrieves a trader's derivative conditional orders
	TraderDerivativeConditionalOrders(context.Context, *QueryTraderDerivativeConditionalOrdersRequest) (*QueryTraderDerivativeConditionalOrdersResponse, error)
	MarketAtomicExecutionFeeMultiplier(context.Context, *QueryMarketAtomicExecutionFeeMultiplierRequest) (*QueryMarketAtomicExecutionFeeMultiplierResponse, error)
	// Retrieves the active stake grant for a grantee
	ActiveStakeGrant(context.Context, *QueryActiveStakeGrantRequest) (*QueryActiveStakeGrantResponse, error)
	// Retrieves the grant authorization amount for a granter and grantee
	GrantAuthorization(context.Context, *QueryGrantAuthorizationRequest) (*QueryGrantAuthorizationResponse, error)
	// Retrieves the grant authorization amount for a granter and grantee
	GrantAuthorizations(context.Context, *QueryGrantAuthorizationsRequest) (*QueryGrantAuthorizationsResponse, error)
	// Retrieves a derivative or binary options market's balance
	MarketBalance(context.Context, *QueryMarketBalanceRequest) (*QueryMarketBalanceResponse, error)
	// Retrieves all derivative or binary options market balances
	MarketBalances(context.Context, *QueryMarketBalancesRequest) (*QueryMarketBalancesResponse, error)
	// Retrieves the min notional for a denom
	DenomMinNotional(context.Context, *QueryDenomMinNotionalRequest) (*QueryDenomMinNotionalResponse, error)
	// Retrieves the min notionals for all denoms
	DenomMinNotionals(context.Context, *QueryDenomMinNotionalsRequest) (*QueryDenomMinNotionalsResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQueryServer struct{}

func (UnimplementedQueryServer) L3DerivativeOrderBook(context.Context, *QueryFullDerivativeOrderbookRequest) (*QueryFullDerivativeOrderbookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method L3DerivativeOrderBook not implemented")
}
func (UnimplementedQueryServer) L3SpotOrderBook(context.Context, *QueryFullSpotOrderbookRequest) (*QueryFullSpotOrderbookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method L3SpotOrderBook not implemented")
}
func (UnimplementedQueryServer) QueryExchangeParams(context.Context, *QueryExchangeParamsRequest) (*QueryExchangeParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryExchangeParams not implemented")
}
func (UnimplementedQueryServer) SubaccountDeposits(context.Context, *QuerySubaccountDepositsRequest) (*QuerySubaccountDepositsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubaccountDeposits not implemented")
}
func (UnimplementedQueryServer) SubaccountDeposit(context.Context, *QuerySubaccountDepositRequest) (*QuerySubaccountDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubaccountDeposit not implemented")
}
func (UnimplementedQueryServer) ExchangeBalances(context.Context, *QueryExchangeBalancesRequest) (*QueryExchangeBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeBalances not implemented")
}
func (UnimplementedQueryServer) AggregateVolume(context.Context, *QueryAggregateVolumeRequest) (*QueryAggregateVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregateVolume not implemented")
}
func (UnimplementedQueryServer) AggregateVolumes(context.Context, *QueryAggregateVolumesRequest) (*QueryAggregateVolumesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregateVolumes not implemented")
}
func (UnimplementedQueryServer) AggregateMarketVolume(context.Context, *QueryAggregateMarketVolumeRequest) (*QueryAggregateMarketVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregateMarketVolume not implemented")
}
func (UnimplementedQueryServer) AggregateMarketVolumes(context.Context, *QueryAggregateMarketVolumesRequest) (*QueryAggregateMarketVolumesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregateMarketVolumes not implemented")
}
func (UnimplementedQueryServer) DenomDecimal(context.Context, *QueryDenomDecimalRequest) (*QueryDenomDecimalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenomDecimal not implemented")
}
func (UnimplementedQueryServer) DenomDecimals(context.Context, *QueryDenomDecimalsRequest) (*QueryDenomDecimalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenomDecimals not implemented")
}
func (UnimplementedQueryServer) SpotMarkets(context.Context, *QuerySpotMarketsRequest) (*QuerySpotMarketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpotMarkets not implemented")
}
func (UnimplementedQueryServer) SpotMarket(context.Context, *QuerySpotMarketRequest) (*QuerySpotMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpotMarket not implemented")
}
func (UnimplementedQueryServer) FullSpotMarkets(context.Context, *QueryFullSpotMarketsRequest) (*QueryFullSpotMarketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FullSpotMarkets not implemented")
}
func (UnimplementedQueryServer) FullSpotMarket(context.Context, *QueryFullSpotMarketRequest) (*QueryFullSpotMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FullSpotMarket not implemented")
}
func (UnimplementedQueryServer) SpotOrderbook(context.Context, *QuerySpotOrderbookRequest) (*QuerySpotOrderbookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpotOrderbook not implemented")
}
func (UnimplementedQueryServer) TraderSpotOrders(context.Context, *QueryTraderSpotOrdersRequest) (*QueryTraderSpotOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TraderSpotOrders not implemented")
}
func (UnimplementedQueryServer) AccountAddressSpotOrders(context.Context, *QueryAccountAddressSpotOrdersRequest) (*QueryAccountAddressSpotOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountAddressSpotOrders not implemented")
}
func (UnimplementedQueryServer) SpotOrdersByHashes(context.Context, *QuerySpotOrdersByHashesRequest) (*QuerySpotOrdersByHashesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpotOrdersByHashes not implemented")
}
func (UnimplementedQueryServer) SubaccountOrders(context.Context, *QuerySubaccountOrdersRequest) (*QuerySubaccountOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubaccountOrders not implemented")
}
func (UnimplementedQueryServer) TraderSpotTransientOrders(context.Context, *QueryTraderSpotOrdersRequest) (*QueryTraderSpotOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TraderSpotTransientOrders not implemented")
}
func (UnimplementedQueryServer) SpotMidPriceAndTOB(context.Context, *QuerySpotMidPriceAndTOBRequest) (*QuerySpotMidPriceAndTOBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpotMidPriceAndTOB not implemented")
}
func (UnimplementedQueryServer) DerivativeMidPriceAndTOB(context.Context, *QueryDerivativeMidPriceAndTOBRequest) (*QueryDerivativeMidPriceAndTOBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DerivativeMidPriceAndTOB not implemented")
}
func (UnimplementedQueryServer) DerivativeOrderbook(context.Context, *QueryDerivativeOrderbookRequest) (*QueryDerivativeOrderbookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DerivativeOrderbook not implemented")
}
func (UnimplementedQueryServer) TraderDerivativeOrders(context.Context, *QueryTraderDerivativeOrdersRequest) (*QueryTraderDerivativeOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TraderDerivativeOrders not implemented")
}
func (UnimplementedQueryServer) AccountAddressDerivativeOrders(context.Context, *QueryAccountAddressDerivativeOrdersRequest) (*QueryAccountAddressDerivativeOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountAddressDerivativeOrders not implemented")
}
func (UnimplementedQueryServer) DerivativeOrdersByHashes(context.Context, *QueryDerivativeOrdersByHashesRequest) (*QueryDerivativeOrdersByHashesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DerivativeOrdersByHashes not implemented")
}
func (UnimplementedQueryServer) TraderDerivativeTransientOrders(context.Context, *QueryTraderDerivativeOrdersRequest) (*QueryTraderDerivativeOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TraderDerivativeTransientOrders not implemented")
}
func (UnimplementedQueryServer) DerivativeMarkets(context.Context, *QueryDerivativeMarketsRequest) (*QueryDerivativeMarketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DerivativeMarkets not implemented")
}
func (UnimplementedQueryServer) DerivativeMarket(context.Context, *QueryDerivativeMarketRequest) (*QueryDerivativeMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DerivativeMarket not implemented")
}
func (UnimplementedQueryServer) DerivativeMarketAddress(context.Context, *QueryDerivativeMarketAddressRequest) (*QueryDerivativeMarketAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DerivativeMarketAddress not implemented")
}
func (UnimplementedQueryServer) SubaccountTradeNonce(context.Context, *QuerySubaccountTradeNonceRequest) (*QuerySubaccountTradeNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubaccountTradeNonce not implemented")
}
func (UnimplementedQueryServer) ExchangeModuleState(context.Context, *QueryModuleStateRequest) (*QueryModuleStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeModuleState not implemented")
}
func (UnimplementedQueryServer) Positions(context.Context, *QueryPositionsRequest) (*QueryPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Positions not implemented")
}
func (UnimplementedQueryServer) PositionsInMarket(context.Context, *QueryPositionsInMarketRequest) (*QueryPositionsInMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PositionsInMarket not implemented")
}
func (UnimplementedQueryServer) SubaccountPositions(context.Context, *QuerySubaccountPositionsRequest) (*QuerySubaccountPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubaccountPositions not implemented")
}
func (UnimplementedQueryServer) SubaccountPositionInMarket(context.Context, *QuerySubaccountPositionInMarketRequest) (*QuerySubaccountPositionInMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubaccountPositionInMarket not implemented")
}
func (UnimplementedQueryServer) SubaccountEffectivePositionInMarket(context.Context, *QuerySubaccountEffectivePositionInMarketRequest) (*QuerySubaccountEffectivePositionInMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubaccountEffectivePositionInMarket not implemented")
}
func (UnimplementedQueryServer) PerpetualMarketInfo(context.Context, *QueryPerpetualMarketInfoRequest) (*QueryPerpetualMarketInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerpetualMarketInfo not implemented")
}
func (UnimplementedQueryServer) ExpiryFuturesMarketInfo(context.Context, *QueryExpiryFuturesMarketInfoRequest) (*QueryExpiryFuturesMarketInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExpiryFuturesMarketInfo not implemented")
}
func (UnimplementedQueryServer) PerpetualMarketFunding(context.Context, *QueryPerpetualMarketFundingRequest) (*QueryPerpetualMarketFundingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerpetualMarketFunding not implemented")
}
func (UnimplementedQueryServer) SubaccountOrderMetadata(context.Context, *QuerySubaccountOrderMetadataRequest) (*QuerySubaccountOrderMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubaccountOrderMetadata not implemented")
}
func (UnimplementedQueryServer) TradeRewardPoints(context.Context, *QueryTradeRewardPointsRequest) (*QueryTradeRewardPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeRewardPoints not implemented")
}
func (UnimplementedQueryServer) PendingTradeRewardPoints(context.Context, *QueryTradeRewardPointsRequest) (*QueryTradeRewardPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingTradeRewardPoints not implemented")
}
func (UnimplementedQueryServer) TradeRewardCampaign(context.Context, *QueryTradeRewardCampaignRequest) (*QueryTradeRewardCampaignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeRewardCampaign not implemented")
}
func (UnimplementedQueryServer) FeeDiscountAccountInfo(context.Context, *QueryFeeDiscountAccountInfoRequest) (*QueryFeeDiscountAccountInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeDiscountAccountInfo not implemented")
}
func (UnimplementedQueryServer) FeeDiscountSchedule(context.Context, *QueryFeeDiscountScheduleRequest) (*QueryFeeDiscountScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeDiscountSchedule not implemented")
}
func (UnimplementedQueryServer) BalanceMismatches(context.Context, *QueryBalanceMismatchesRequest) (*QueryBalanceMismatchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BalanceMismatches not implemented")
}
func (UnimplementedQueryServer) BalanceWithBalanceHolds(context.Context, *QueryBalanceWithBalanceHoldsRequest) (*QueryBalanceWithBalanceHoldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BalanceWithBalanceHolds not implemented")
}
func (UnimplementedQueryServer) FeeDiscountTierStatistics(context.Context, *QueryFeeDiscountTierStatisticsRequest) (*QueryFeeDiscountTierStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeDiscountTierStatistics not implemented")
}
func (UnimplementedQueryServer) MitoVaultInfos(context.Context, *MitoVaultInfosRequest) (*MitoVaultInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MitoVaultInfos not implemented")
}
func (UnimplementedQueryServer) QueryMarketIDFromVault(context.Context, *QueryMarketIDFromVaultRequest) (*QueryMarketIDFromVaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryMarketIDFromVault not implemented")
}
func (UnimplementedQueryServer) HistoricalTradeRecords(context.Context, *QueryHistoricalTradeRecordsRequest) (*QueryHistoricalTradeRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoricalTradeRecords not implemented")
}
func (UnimplementedQueryServer) IsOptedOutOfRewards(context.Context, *QueryIsOptedOutOfRewardsRequest) (*QueryIsOptedOutOfRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsOptedOutOfRewards not implemented")
}
func (UnimplementedQueryServer) OptedOutOfRewardsAccounts(context.Context, *QueryOptedOutOfRewardsAccountsRequest) (*QueryOptedOutOfRewardsAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptedOutOfRewardsAccounts not implemented")
}
func (UnimplementedQueryServer) MarketVolatility(context.Context, *QueryMarketVolatilityRequest) (*QueryMarketVolatilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketVolatility not implemented")
}
func (UnimplementedQueryServer) BinaryOptionsMarkets(context.Context, *QueryBinaryMarketsRequest) (*QueryBinaryMarketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BinaryOptionsMarkets not implemented")
}
func (UnimplementedQueryServer) TraderDerivativeConditionalOrders(context.Context, *QueryTraderDerivativeConditionalOrdersRequest) (*QueryTraderDerivativeConditionalOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TraderDerivativeConditionalOrders not implemented")
}
func (UnimplementedQueryServer) MarketAtomicExecutionFeeMultiplier(context.Context, *QueryMarketAtomicExecutionFeeMultiplierRequest) (*QueryMarketAtomicExecutionFeeMultiplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketAtomicExecutionFeeMultiplier not implemented")
}
func (UnimplementedQueryServer) ActiveStakeGrant(context.Context, *QueryActiveStakeGrantRequest) (*QueryActiveStakeGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActiveStakeGrant not implemented")
}
func (UnimplementedQueryServer) GrantAuthorization(context.Context, *QueryGrantAuthorizationRequest) (*QueryGrantAuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantAuthorization not implemented")
}
func (UnimplementedQueryServer) GrantAuthorizations(context.Context, *QueryGrantAuthorizationsRequest) (*QueryGrantAuthorizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantAuthorizations not implemented")
}
func (UnimplementedQueryServer) MarketBalance(context.Context, *QueryMarketBalanceRequest) (*QueryMarketBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketBalance not implemented")
}
func (UnimplementedQueryServer) MarketBalances(context.Context, *QueryMarketBalancesRequest) (*QueryMarketBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketBalances not implemented")
}
func (UnimplementedQueryServer) DenomMinNotional(context.Context, *QueryDenomMinNotionalRequest) (*QueryDenomMinNotionalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenomMinNotional not implemented")
}
func (UnimplementedQueryServer) DenomMinNotionals(context.Context, *QueryDenomMinNotionalsRequest) (*QueryDenomMinNotionalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenomMinNotionals not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}
func (UnimplementedQueryServer) testEmbeddedByValue()               {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	// If the following call pancis, it indicates UnimplementedQueryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_L3DerivativeOrderBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFullDerivativeOrderbookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).L3DerivativeOrderBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_L3DerivativeOrderBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).L3DerivativeOrderBook(ctx, req.(*QueryFullDerivativeOrderbookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_L3SpotOrderBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFullSpotOrderbookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).L3SpotOrderBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_L3SpotOrderBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).L3SpotOrderBook(ctx, req.(*QueryFullSpotOrderbookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryExchangeParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExchangeParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryExchangeParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryExchangeParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryExchangeParams(ctx, req.(*QueryExchangeParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubaccountDeposits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubaccountDepositsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubaccountDeposits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SubaccountDeposits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubaccountDeposits(ctx, req.(*QuerySubaccountDepositsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubaccountDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubaccountDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubaccountDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SubaccountDeposit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubaccountDeposit(ctx, req.(*QuerySubaccountDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExchangeBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExchangeBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExchangeBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ExchangeBalances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExchangeBalances(ctx, req.(*QueryExchangeBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AggregateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAggregateVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AggregateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AggregateVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AggregateVolume(ctx, req.(*QueryAggregateVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AggregateVolumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAggregateVolumesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AggregateVolumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AggregateVolumes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AggregateVolumes(ctx, req.(*QueryAggregateVolumesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AggregateMarketVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAggregateMarketVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AggregateMarketVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AggregateMarketVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AggregateMarketVolume(ctx, req.(*QueryAggregateMarketVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AggregateMarketVolumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAggregateMarketVolumesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AggregateMarketVolumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AggregateMarketVolumes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AggregateMarketVolumes(ctx, req.(*QueryAggregateMarketVolumesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DenomDecimal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDenomDecimalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DenomDecimal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DenomDecimal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DenomDecimal(ctx, req.(*QueryDenomDecimalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DenomDecimals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDenomDecimalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DenomDecimals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DenomDecimals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DenomDecimals(ctx, req.(*QueryDenomDecimalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpotMarkets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpotMarketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpotMarkets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SpotMarkets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpotMarkets(ctx, req.(*QuerySpotMarketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpotMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpotMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpotMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SpotMarket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpotMarket(ctx, req.(*QuerySpotMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FullSpotMarkets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFullSpotMarketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FullSpotMarkets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_FullSpotMarkets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FullSpotMarkets(ctx, req.(*QueryFullSpotMarketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FullSpotMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFullSpotMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FullSpotMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_FullSpotMarket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FullSpotMarket(ctx, req.(*QueryFullSpotMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpotOrderbook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpotOrderbookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpotOrderbook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SpotOrderbook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpotOrderbook(ctx, req.(*QuerySpotOrderbookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TraderSpotOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTraderSpotOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TraderSpotOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TraderSpotOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TraderSpotOrders(ctx, req.(*QueryTraderSpotOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountAddressSpotOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAccountAddressSpotOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountAddressSpotOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AccountAddressSpotOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountAddressSpotOrders(ctx, req.(*QueryAccountAddressSpotOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpotOrdersByHashes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpotOrdersByHashesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpotOrdersByHashes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SpotOrdersByHashes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpotOrdersByHashes(ctx, req.(*QuerySpotOrdersByHashesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubaccountOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubaccountOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubaccountOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SubaccountOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubaccountOrders(ctx, req.(*QuerySubaccountOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TraderSpotTransientOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTraderSpotOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TraderSpotTransientOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TraderSpotTransientOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TraderSpotTransientOrders(ctx, req.(*QueryTraderSpotOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpotMidPriceAndTOB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpotMidPriceAndTOBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpotMidPriceAndTOB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SpotMidPriceAndTOB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpotMidPriceAndTOB(ctx, req.(*QuerySpotMidPriceAndTOBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DerivativeMidPriceAndTOB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDerivativeMidPriceAndTOBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DerivativeMidPriceAndTOB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DerivativeMidPriceAndTOB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DerivativeMidPriceAndTOB(ctx, req.(*QueryDerivativeMidPriceAndTOBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DerivativeOrderbook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDerivativeOrderbookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DerivativeOrderbook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DerivativeOrderbook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DerivativeOrderbook(ctx, req.(*QueryDerivativeOrderbookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TraderDerivativeOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTraderDerivativeOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TraderDerivativeOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TraderDerivativeOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TraderDerivativeOrders(ctx, req.(*QueryTraderDerivativeOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountAddressDerivativeOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAccountAddressDerivativeOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountAddressDerivativeOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AccountAddressDerivativeOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountAddressDerivativeOrders(ctx, req.(*QueryAccountAddressDerivativeOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DerivativeOrdersByHashes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDerivativeOrdersByHashesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DerivativeOrdersByHashes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DerivativeOrdersByHashes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DerivativeOrdersByHashes(ctx, req.(*QueryDerivativeOrdersByHashesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TraderDerivativeTransientOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTraderDerivativeOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TraderDerivativeTransientOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TraderDerivativeTransientOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TraderDerivativeTransientOrders(ctx, req.(*QueryTraderDerivativeOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DerivativeMarkets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDerivativeMarketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DerivativeMarkets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DerivativeMarkets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DerivativeMarkets(ctx, req.(*QueryDerivativeMarketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DerivativeMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDerivativeMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DerivativeMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DerivativeMarket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DerivativeMarket(ctx, req.(*QueryDerivativeMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DerivativeMarketAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDerivativeMarketAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DerivativeMarketAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DerivativeMarketAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DerivativeMarketAddress(ctx, req.(*QueryDerivativeMarketAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubaccountTradeNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubaccountTradeNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubaccountTradeNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SubaccountTradeNonce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubaccountTradeNonce(ctx, req.(*QuerySubaccountTradeNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExchangeModuleState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryModuleStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExchangeModuleState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ExchangeModuleState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExchangeModuleState(ctx, req.(*QueryModuleStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Positions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Positions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Positions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Positions(ctx, req.(*QueryPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PositionsInMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPositionsInMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PositionsInMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PositionsInMarket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PositionsInMarket(ctx, req.(*QueryPositionsInMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubaccountPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubaccountPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubaccountPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SubaccountPositions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubaccountPositions(ctx, req.(*QuerySubaccountPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubaccountPositionInMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubaccountPositionInMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubaccountPositionInMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SubaccountPositionInMarket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubaccountPositionInMarket(ctx, req.(*QuerySubaccountPositionInMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubaccountEffectivePositionInMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubaccountEffectivePositionInMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubaccountEffectivePositionInMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SubaccountEffectivePositionInMarket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubaccountEffectivePositionInMarket(ctx, req.(*QuerySubaccountEffectivePositionInMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PerpetualMarketInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPerpetualMarketInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PerpetualMarketInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PerpetualMarketInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PerpetualMarketInfo(ctx, req.(*QueryPerpetualMarketInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExpiryFuturesMarketInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExpiryFuturesMarketInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExpiryFuturesMarketInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ExpiryFuturesMarketInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExpiryFuturesMarketInfo(ctx, req.(*QueryExpiryFuturesMarketInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PerpetualMarketFunding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPerpetualMarketFundingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PerpetualMarketFunding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PerpetualMarketFunding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PerpetualMarketFunding(ctx, req.(*QueryPerpetualMarketFundingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SubaccountOrderMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySubaccountOrderMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SubaccountOrderMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SubaccountOrderMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SubaccountOrderMetadata(ctx, req.(*QuerySubaccountOrderMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TradeRewardPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTradeRewardPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TradeRewardPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TradeRewardPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TradeRewardPoints(ctx, req.(*QueryTradeRewardPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingTradeRewardPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTradeRewardPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingTradeRewardPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PendingTradeRewardPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingTradeRewardPoints(ctx, req.(*QueryTradeRewardPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TradeRewardCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTradeRewardCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TradeRewardCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TradeRewardCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TradeRewardCampaign(ctx, req.(*QueryTradeRewardCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeeDiscountAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeeDiscountAccountInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeDiscountAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_FeeDiscountAccountInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeDiscountAccountInfo(ctx, req.(*QueryFeeDiscountAccountInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeeDiscountSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeeDiscountScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeDiscountSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_FeeDiscountSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeDiscountSchedule(ctx, req.(*QueryFeeDiscountScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BalanceMismatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBalanceMismatchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BalanceMismatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BalanceMismatches_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BalanceMismatches(ctx, req.(*QueryBalanceMismatchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BalanceWithBalanceHolds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBalanceWithBalanceHoldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BalanceWithBalanceHolds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BalanceWithBalanceHolds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BalanceWithBalanceHolds(ctx, req.(*QueryBalanceWithBalanceHoldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeeDiscountTierStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeeDiscountTierStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeDiscountTierStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_FeeDiscountTierStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeDiscountTierStatistics(ctx, req.(*QueryFeeDiscountTierStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MitoVaultInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MitoVaultInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MitoVaultInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_MitoVaultInfos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MitoVaultInfos(ctx, req.(*MitoVaultInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryMarketIDFromVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMarketIDFromVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryMarketIDFromVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_QueryMarketIDFromVault_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryMarketIDFromVault(ctx, req.(*QueryMarketIDFromVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HistoricalTradeRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHistoricalTradeRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HistoricalTradeRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_HistoricalTradeRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HistoricalTradeRecords(ctx, req.(*QueryHistoricalTradeRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsOptedOutOfRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIsOptedOutOfRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsOptedOutOfRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_IsOptedOutOfRewards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsOptedOutOfRewards(ctx, req.(*QueryIsOptedOutOfRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OptedOutOfRewardsAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOptedOutOfRewardsAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OptedOutOfRewardsAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OptedOutOfRewardsAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OptedOutOfRewardsAccounts(ctx, req.(*QueryOptedOutOfRewardsAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MarketVolatility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMarketVolatilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MarketVolatility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_MarketVolatility_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MarketVolatility(ctx, req.(*QueryMarketVolatilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BinaryOptionsMarkets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBinaryMarketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BinaryOptionsMarkets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_BinaryOptionsMarkets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BinaryOptionsMarkets(ctx, req.(*QueryBinaryMarketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TraderDerivativeConditionalOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTraderDerivativeConditionalOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TraderDerivativeConditionalOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TraderDerivativeConditionalOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TraderDerivativeConditionalOrders(ctx, req.(*QueryTraderDerivativeConditionalOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MarketAtomicExecutionFeeMultiplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMarketAtomicExecutionFeeMultiplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MarketAtomicExecutionFeeMultiplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_MarketAtomicExecutionFeeMultiplier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MarketAtomicExecutionFeeMultiplier(ctx, req.(*QueryMarketAtomicExecutionFeeMultiplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActiveStakeGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryActiveStakeGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActiveStakeGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ActiveStakeGrant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActiveStakeGrant(ctx, req.(*QueryActiveStakeGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GrantAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGrantAuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GrantAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GrantAuthorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GrantAuthorization(ctx, req.(*QueryGrantAuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GrantAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGrantAuthorizationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GrantAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GrantAuthorizations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GrantAuthorizations(ctx, req.(*QueryGrantAuthorizationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MarketBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMarketBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MarketBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_MarketBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MarketBalance(ctx, req.(*QueryMarketBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MarketBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMarketBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MarketBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_MarketBalances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MarketBalances(ctx, req.(*QueryMarketBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DenomMinNotional_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDenomMinNotionalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DenomMinNotional(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DenomMinNotional_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DenomMinNotional(ctx, req.(*QueryDenomMinNotionalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DenomMinNotionals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDenomMinNotionalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DenomMinNotionals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DenomMinNotionals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DenomMinNotionals(ctx, req.(*QueryDenomMinNotionalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "injective.exchange.v2.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "L3DerivativeOrderBook",
			Handler:    _Query_L3DerivativeOrderBook_Handler,
		},
		{
			MethodName: "L3SpotOrderBook",
			Handler:    _Query_L3SpotOrderBook_Handler,
		},
		{
			MethodName: "QueryExchangeParams",
			Handler:    _Query_QueryExchangeParams_Handler,
		},
		{
			MethodName: "SubaccountDeposits",
			Handler:    _Query_SubaccountDeposits_Handler,
		},
		{
			MethodName: "SubaccountDeposit",
			Handler:    _Query_SubaccountDeposit_Handler,
		},
		{
			MethodName: "ExchangeBalances",
			Handler:    _Query_ExchangeBalances_Handler,
		},
		{
			MethodName: "AggregateVolume",
			Handler:    _Query_AggregateVolume_Handler,
		},
		{
			MethodName: "AggregateVolumes",
			Handler:    _Query_AggregateVolumes_Handler,
		},
		{
			MethodName: "AggregateMarketVolume",
			Handler:    _Query_AggregateMarketVolume_Handler,
		},
		{
			MethodName: "AggregateMarketVolumes",
			Handler:    _Query_AggregateMarketVolumes_Handler,
		},
		{
			MethodName: "DenomDecimal",
			Handler:    _Query_DenomDecimal_Handler,
		},
		{
			MethodName: "DenomDecimals",
			Handler:    _Query_DenomDecimals_Handler,
		},
		{
			MethodName: "SpotMarkets",
			Handler:    _Query_SpotMarkets_Handler,
		},
		{
			MethodName: "SpotMarket",
			Handler:    _Query_SpotMarket_Handler,
		},
		{
			MethodName: "FullSpotMarkets",
			Handler:    _Query_FullSpotMarkets_Handler,
		},
		{
			MethodName: "FullSpotMarket",
			Handler:    _Query_FullSpotMarket_Handler,
		},
		{
			MethodName: "SpotOrderbook",
			Handler:    _Query_SpotOrderbook_Handler,
		},
		{
			MethodName: "TraderSpotOrders",
			Handler:    _Query_TraderSpotOrders_Handler,
		},
		{
			MethodName: "AccountAddressSpotOrders",
			Handler:    _Query_AccountAddressSpotOrders_Handler,
		},
		{
			MethodName: "SpotOrdersByHashes",
			Handler:    _Query_SpotOrdersByHashes_Handler,
		},
		{
			MethodName: "SubaccountOrders",
			Handler:    _Query_SubaccountOrders_Handler,
		},
		{
			MethodName: "TraderSpotTransientOrders",
			Handler:    _Query_TraderSpotTransientOrders_Handler,
		},
		{
			MethodName: "SpotMidPriceAndTOB",
			Handler:    _Query_SpotMidPriceAndTOB_Handler,
		},
		{
			MethodName: "DerivativeMidPriceAndTOB",
			Handler:    _Query_DerivativeMidPriceAndTOB_Handler,
		},
		{
			MethodName: "DerivativeOrderbook",
			Handler:    _Query_DerivativeOrderbook_Handler,
		},
		{
			MethodName: "TraderDerivativeOrders",
			Handler:    _Query_TraderDerivativeOrders_Handler,
		},
		{
			MethodName: "AccountAddressDerivativeOrders",
			Handler:    _Query_AccountAddressDerivativeOrders_Handler,
		},
		{
			MethodName: "DerivativeOrdersByHashes",
			Handler:    _Query_DerivativeOrdersByHashes_Handler,
		},
		{
			MethodName: "TraderDerivativeTransientOrders",
			Handler:    _Query_TraderDerivativeTransientOrders_Handler,
		},
		{
			MethodName: "DerivativeMarkets",
			Handler:    _Query_DerivativeMarkets_Handler,
		},
		{
			MethodName: "DerivativeMarket",
			Handler:    _Query_DerivativeMarket_Handler,
		},
		{
			MethodName: "DerivativeMarketAddress",
			Handler:    _Query_DerivativeMarketAddress_Handler,
		},
		{
			MethodName: "SubaccountTradeNonce",
			Handler:    _Query_SubaccountTradeNonce_Handler,
		},
		{
			MethodName: "ExchangeModuleState",
			Handler:    _Query_ExchangeModuleState_Handler,
		},
		{
			MethodName: "Positions",
			Handler:    _Query_Positions_Handler,
		},
		{
			MethodName: "PositionsInMarket",
			Handler:    _Query_PositionsInMarket_Handler,
		},
		{
			MethodName: "SubaccountPositions",
			Handler:    _Query_SubaccountPositions_Handler,
		},
		{
			MethodName: "SubaccountPositionInMarket",
			Handler:    _Query_SubaccountPositionInMarket_Handler,
		},
		{
			MethodName: "SubaccountEffectivePositionInMarket",
			Handler:    _Query_SubaccountEffectivePositionInMarket_Handler,
		},
		{
			MethodName: "PerpetualMarketInfo",
			Handler:    _Query_PerpetualMarketInfo_Handler,
		},
		{
			MethodName: "ExpiryFuturesMarketInfo",
			Handler:    _Query_ExpiryFuturesMarketInfo_Handler,
		},
		{
			MethodName: "PerpetualMarketFunding",
			Handler:    _Query_PerpetualMarketFunding_Handler,
		},
		{
			MethodName: "SubaccountOrderMetadata",
			Handler:    _Query_SubaccountOrderMetadata_Handler,
		},
		{
			MethodName: "TradeRewardPoints",
			Handler:    _Query_TradeRewardPoints_Handler,
		},
		{
			MethodName: "PendingTradeRewardPoints",
			Handler:    _Query_PendingTradeRewardPoints_Handler,
		},
		{
			MethodName: "TradeRewardCampaign",
			Handler:    _Query_TradeRewardCampaign_Handler,
		},
		{
			MethodName: "FeeDiscountAccountInfo",
			Handler:    _Query_FeeDiscountAccountInfo_Handler,
		},
		{
			MethodName: "FeeDiscountSchedule",
			Handler:    _Query_FeeDiscountSchedule_Handler,
		},
		{
			MethodName: "BalanceMismatches",
			Handler:    _Query_BalanceMismatches_Handler,
		},
		{
			MethodName: "BalanceWithBalanceHolds",
			Handler:    _Query_BalanceWithBalanceHolds_Handler,
		},
		{
			MethodName: "FeeDiscountTierStatistics",
			Handler:    _Query_FeeDiscountTierStatistics_Handler,
		},
		{
			MethodName: "MitoVaultInfos",
			Handler:    _Query_MitoVaultInfos_Handler,
		},
		{
			MethodName: "QueryMarketIDFromVault",
			Handler:    _Query_QueryMarketIDFromVault_Handler,
		},
		{
			MethodName: "HistoricalTradeRecords",
			Handler:    _Query_HistoricalTradeRecords_Handler,
		},
		{
			MethodName: "IsOptedOutOfRewards",
			Handler:    _Query_IsOptedOutOfRewards_Handler,
		},
		{
			MethodName: "OptedOutOfRewardsAccounts",
			Handler:    _Query_OptedOutOfRewardsAccounts_Handler,
		},
		{
			MethodName: "MarketVolatility",
			Handler:    _Query_MarketVolatility_Handler,
		},
		{
			MethodName: "BinaryOptionsMarkets",
			Handler:    _Query_BinaryOptionsMarkets_Handler,
		},
		{
			MethodName: "TraderDerivativeConditionalOrders",
			Handler:    _Query_TraderDerivativeConditionalOrders_Handler,
		},
		{
			MethodName: "MarketAtomicExecutionFeeMultiplier",
			Handler:    _Query_MarketAtomicExecutionFeeMultiplier_Handler,
		},
		{
			MethodName: "ActiveStakeGrant",
			Handler:    _Query_ActiveStakeGrant_Handler,
		},
		{
			MethodName: "GrantAuthorization",
			Handler:    _Query_GrantAuthorization_Handler,
		},
		{
			MethodName: "GrantAuthorizations",
			Handler:    _Query_GrantAuthorizations_Handler,
		},
		{
			MethodName: "MarketBalance",
			Handler:    _Query_MarketBalance_Handler,
		},
		{
			MethodName: "MarketBalances",
			Handler:    _Query_MarketBalances_Handler,
		},
		{
			MethodName: "DenomMinNotional",
			Handler:    _Query_DenomMinNotional_Handler,
		},
		{
			MethodName: "DenomMinNotionals",
			Handler:    _Query_DenomMinNotionals_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "injective/exchange/v2/query.proto",
}
