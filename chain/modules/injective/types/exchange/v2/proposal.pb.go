// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: injective/exchange/v2/proposal.proto

package v2

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	types "github.com/InjectiveLabs/injective-core/injective-chain/modules/oracle/types"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	types1 "github.com/cosmos/cosmos-sdk/x/distribution/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExchangeType int32

const (
	ExchangeType_EXCHANGE_UNSPECIFIED ExchangeType = 0
	ExchangeType_SPOT                 ExchangeType = 1
	ExchangeType_DERIVATIVES          ExchangeType = 2
)

// Enum value maps for ExchangeType.
var (
	ExchangeType_name = map[int32]string{
		0: "EXCHANGE_UNSPECIFIED",
		1: "SPOT",
		2: "DERIVATIVES",
	}
	ExchangeType_value = map[string]int32{
		"EXCHANGE_UNSPECIFIED": 0,
		"SPOT":                 1,
		"DERIVATIVES":          2,
	}
)

func (x ExchangeType) Enum() *ExchangeType {
	p := new(ExchangeType)
	*p = x
	return p
}

func (x ExchangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExchangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_injective_exchange_v2_proposal_proto_enumTypes[0].Descriptor()
}

func (ExchangeType) Type() protoreflect.EnumType {
	return &file_injective_exchange_v2_proposal_proto_enumTypes[0]
}

func (x ExchangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExchangeType.Descriptor instead.
func (ExchangeType) EnumDescriptor() ([]byte, []int) {
	return file_injective_exchange_v2_proposal_proto_rawDescGZIP(), []int{0}
}

type SpotMarketParamUpdateProposal struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Title       string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	MarketId    string                 `protobuf:"bytes,3,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// maker_fee_rate defines the trade fee rate for makers on the spot market
	MakerFeeRate string `protobuf:"bytes,4,opt,name=maker_fee_rate,json=makerFeeRate,proto3" json:"maker_fee_rate,omitempty"`
	// taker_fee_rate defines the trade fee rate for takers on the spot market
	TakerFeeRate string `protobuf:"bytes,5,opt,name=taker_fee_rate,json=takerFeeRate,proto3" json:"taker_fee_rate,omitempty"`
	// relayer_fee_share_rate defines the relayer fee share rate for the spot
	// market
	RelayerFeeShareRate string `protobuf:"bytes,6,opt,name=relayer_fee_share_rate,json=relayerFeeShareRate,proto3" json:"relayer_fee_share_rate,omitempty"`
	// min_price_tick_size defines the minimum tick size of the order's price and
	// margin
	MinPriceTickSize string `protobuf:"bytes,7,opt,name=min_price_tick_size,json=minPriceTickSize,proto3" json:"min_price_tick_size,omitempty"`
	// min_quantity_tick_size defines the minimum tick size of the order's
	// quantity
	MinQuantityTickSize string       `protobuf:"bytes,8,opt,name=min_quantity_tick_size,json=minQuantityTickSize,proto3" json:"min_quantity_tick_size,omitempty"`
	Status              MarketStatus `protobuf:"varint,9,opt,name=status,proto3,enum=injective.exchange.v2.MarketStatus" json:"status,omitempty"`
	Ticker              string       `protobuf:"bytes,10,opt,name=ticker,proto3" json:"ticker,omitempty"`
	// min_notional defines the minimum notional (in quote asset) required for
	// orders in the market
	MinNotional string     `protobuf:"bytes,11,opt,name=min_notional,json=minNotional,proto3" json:"min_notional,omitempty"`
	AdminInfo   *AdminInfo `protobuf:"bytes,12,opt,name=admin_info,json=adminInfo,proto3" json:"admin_info,omitempty"`
	// base token decimals
	BaseDecimals uint32 `protobuf:"varint,13,opt,name=base_decimals,json=baseDecimals,proto3" json:"base_decimals,omitempty"`
	// quote token decimals
	QuoteDecimals uint32 `protobuf:"varint,14,opt,name=quote_decimals,json=quoteDecimals,proto3" json:"quote_decimals,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpotMarketParamUpdateProposal) Reset() {
	*x = SpotMarketParamUpdateProposal{}
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpotMarketParamUpdateProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotMarketParamUpdateProposal) ProtoMessage() {}

func (x *SpotMarketParamUpdateProposal) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotMarketParamUpdateProposal.ProtoReflect.Descriptor instead.
func (*SpotMarketParamUpdateProposal) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v2_proposal_proto_rawDescGZIP(), []int{0}
}

func (x *SpotMarketParamUpdateProposal) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SpotMarketParamUpdateProposal) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SpotMarketParamUpdateProposal) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *SpotMarketParamUpdateProposal) GetMakerFeeRate() string {
	if x != nil {
		return x.MakerFeeRate
	}
	return ""
}

func (x *SpotMarketParamUpdateProposal) GetTakerFeeRate() string {
	if x != nil {
		return x.TakerFeeRate
	}
	return ""
}

func (x *SpotMarketParamUpdateProposal) GetRelayerFeeShareRate() string {
	if x != nil {
		return x.RelayerFeeShareRate
	}
	return ""
}

func (x *SpotMarketParamUpdateProposal) GetMinPriceTickSize() string {
	if x != nil {
		return x.MinPriceTickSize
	}
	return ""
}

func (x *SpotMarketParamUpdateProposal) GetMinQuantityTickSize() string {
	if x != nil {
		return x.MinQuantityTickSize
	}
	return ""
}

func (x *SpotMarketParamUpdateProposal) GetStatus() MarketStatus {
	if x != nil {
		return x.Status
	}
	return MarketStatus_Unspecified
}

func (x *SpotMarketParamUpdateProposal) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *SpotMarketParamUpdateProposal) GetMinNotional() string {
	if x != nil {
		return x.MinNotional
	}
	return ""
}

func (x *SpotMarketParamUpdateProposal) GetAdminInfo() *AdminInfo {
	if x != nil {
		return x.AdminInfo
	}
	return nil
}

func (x *SpotMarketParamUpdateProposal) GetBaseDecimals() uint32 {
	if x != nil {
		return x.BaseDecimals
	}
	return 0
}

func (x *SpotMarketParamUpdateProposal) GetQuoteDecimals() uint32 {
	if x != nil {
		return x.QuoteDecimals
	}
	return 0
}

type ExchangeEnableProposal struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	ExchangeType  ExchangeType           `protobuf:"varint,3,opt,name=exchangeType,proto3,enum=injective.exchange.v2.ExchangeType" json:"exchangeType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExchangeEnableProposal) Reset() {
	*x = ExchangeEnableProposal{}
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExchangeEnableProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeEnableProposal) ProtoMessage() {}

func (x *ExchangeEnableProposal) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeEnableProposal.ProtoReflect.Descriptor instead.
func (*ExchangeEnableProposal) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v2_proposal_proto_rawDescGZIP(), []int{1}
}

func (x *ExchangeEnableProposal) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ExchangeEnableProposal) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ExchangeEnableProposal) GetExchangeType() ExchangeType {
	if x != nil {
		return x.ExchangeType
	}
	return ExchangeType_EXCHANGE_UNSPECIFIED
}

type BatchExchangeModificationProposal struct {
	state                                protoimpl.MessageState                    `protogen:"open.v1"`
	Title                                string                                    `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description                          string                                    `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	SpotMarketParamUpdateProposals       []*SpotMarketParamUpdateProposal          `protobuf:"bytes,3,rep,name=spot_market_param_update_proposals,json=spotMarketParamUpdateProposals,proto3" json:"spot_market_param_update_proposals,omitempty"`
	DerivativeMarketParamUpdateProposals []*DerivativeMarketParamUpdateProposal    `protobuf:"bytes,4,rep,name=derivative_market_param_update_proposals,json=derivativeMarketParamUpdateProposals,proto3" json:"derivative_market_param_update_proposals,omitempty"`
	SpotMarketLaunchProposals            []*SpotMarketLaunchProposal               `protobuf:"bytes,5,rep,name=spot_market_launch_proposals,json=spotMarketLaunchProposals,proto3" json:"spot_market_launch_proposals,omitempty"`
	PerpetualMarketLaunchProposals       []*PerpetualMarketLaunchProposal          `protobuf:"bytes,6,rep,name=perpetual_market_launch_proposals,json=perpetualMarketLaunchProposals,proto3" json:"perpetual_market_launch_proposals,omitempty"`
	ExpiryFuturesMarketLaunchProposals   []*ExpiryFuturesMarketLaunchProposal      `protobuf:"bytes,7,rep,name=expiry_futures_market_launch_proposals,json=expiryFuturesMarketLaunchProposals,proto3" json:"expiry_futures_market_launch_proposals,omitempty"`
	TradingRewardCampaignUpdateProposal  *TradingRewardCampaignUpdateProposal      `protobuf:"bytes,8,opt,name=trading_reward_campaign_update_proposal,json=tradingRewardCampaignUpdateProposal,proto3" json:"trading_reward_campaign_update_proposal,omitempty"`
	BinaryOptionsMarketLaunchProposals   []*BinaryOptionsMarketLaunchProposal      `protobuf:"bytes,9,rep,name=binary_options_market_launch_proposals,json=binaryOptionsMarketLaunchProposals,proto3" json:"binary_options_market_launch_proposals,omitempty"`
	BinaryOptionsParamUpdateProposals    []*BinaryOptionsMarketParamUpdateProposal `protobuf:"bytes,10,rep,name=binary_options_param_update_proposals,json=binaryOptionsParamUpdateProposals,proto3" json:"binary_options_param_update_proposals,omitempty"`
	DenomDecimalsUpdateProposal          *UpdateDenomDecimalsProposal              `protobuf:"bytes,11,opt,name=denom_decimals_update_proposal,json=denomDecimalsUpdateProposal,proto3" json:"denom_decimals_update_proposal,omitempty"`
	FeeDiscountProposal                  *FeeDiscountProposal                      `protobuf:"bytes,12,opt,name=fee_discount_proposal,json=feeDiscountProposal,proto3" json:"fee_discount_proposal,omitempty"`
	MarketForcedSettlementProposals      []*MarketForcedSettlementProposal         `protobuf:"bytes,13,rep,name=market_forced_settlement_proposals,json=marketForcedSettlementProposals,proto3" json:"market_forced_settlement_proposals,omitempty"`
	DenomMinNotionalProposal             *DenomMinNotionalProposal                 `protobuf:"bytes,14,opt,name=denom_min_notional_proposal,json=denomMinNotionalProposal,proto3" json:"denom_min_notional_proposal,omitempty"`
	unknownFields                        protoimpl.UnknownFields
	sizeCache                            protoimpl.SizeCache
}

func (x *BatchExchangeModificationProposal) Reset() {
	*x = BatchExchangeModificationProposal{}
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchExchangeModificationProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchExchangeModificationProposal) ProtoMessage() {}

func (x *BatchExchangeModificationProposal) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchExchangeModificationProposal.ProtoReflect.Descriptor instead.
func (*BatchExchangeModificationProposal) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v2_proposal_proto_rawDescGZIP(), []int{2}
}

func (x *BatchExchangeModificationProposal) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *BatchExchangeModificationProposal) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BatchExchangeModificationProposal) GetSpotMarketParamUpdateProposals() []*SpotMarketParamUpdateProposal {
	if x != nil {
		return x.SpotMarketParamUpdateProposals
	}
	return nil
}

func (x *BatchExchangeModificationProposal) GetDerivativeMarketParamUpdateProposals() []*DerivativeMarketParamUpdateProposal {
	if x != nil {
		return x.DerivativeMarketParamUpdateProposals
	}
	return nil
}

func (x *BatchExchangeModificationProposal) GetSpotMarketLaunchProposals() []*SpotMarketLaunchProposal {
	if x != nil {
		return x.SpotMarketLaunchProposals
	}
	return nil
}

func (x *BatchExchangeModificationProposal) GetPerpetualMarketLaunchProposals() []*PerpetualMarketLaunchProposal {
	if x != nil {
		return x.PerpetualMarketLaunchProposals
	}
	return nil
}

func (x *BatchExchangeModificationProposal) GetExpiryFuturesMarketLaunchProposals() []*ExpiryFuturesMarketLaunchProposal {
	if x != nil {
		return x.ExpiryFuturesMarketLaunchProposals
	}
	return nil
}

func (x *BatchExchangeModificationProposal) GetTradingRewardCampaignUpdateProposal() *TradingRewardCampaignUpdateProposal {
	if x != nil {
		return x.TradingRewardCampaignUpdateProposal
	}
	return nil
}

func (x *BatchExchangeModificationProposal) GetBinaryOptionsMarketLaunchProposals() []*BinaryOptionsMarketLaunchProposal {
	if x != nil {
		return x.BinaryOptionsMarketLaunchProposals
	}
	return nil
}

func (x *BatchExchangeModificationProposal) GetBinaryOptionsParamUpdateProposals() []*BinaryOptionsMarketParamUpdateProposal {
	if x != nil {
		return x.BinaryOptionsParamUpdateProposals
	}
	return nil
}

func (x *BatchExchangeModificationProposal) GetDenomDecimalsUpdateProposal() *UpdateDenomDecimalsProposal {
	if x != nil {
		return x.DenomDecimalsUpdateProposal
	}
	return nil
}

func (x *BatchExchangeModificationProposal) GetFeeDiscountProposal() *FeeDiscountProposal {
	if x != nil {
		return x.FeeDiscountProposal
	}
	return nil
}

func (x *BatchExchangeModificationProposal) GetMarketForcedSettlementProposals() []*MarketForcedSettlementProposal {
	if x != nil {
		return x.MarketForcedSettlementProposals
	}
	return nil
}

func (x *BatchExchangeModificationProposal) GetDenomMinNotionalProposal() *DenomMinNotionalProposal {
	if x != nil {
		return x.DenomMinNotionalProposal
	}
	return nil
}

// SpotMarketLaunchProposal defines a SDK message for proposing a new spot
// market through governance
type SpotMarketLaunchProposal struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Title       string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Ticker for the spot market.
	Ticker string `protobuf:"bytes,3,opt,name=ticker,proto3" json:"ticker,omitempty"`
	// type of coin to use as the base currency
	BaseDenom string `protobuf:"bytes,4,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty"`
	// type of coin to use as the quote currency
	QuoteDenom string `protobuf:"bytes,5,opt,name=quote_denom,json=quoteDenom,proto3" json:"quote_denom,omitempty"`
	// min_price_tick_size defines the minimum tick size of the order's price
	MinPriceTickSize string `protobuf:"bytes,6,opt,name=min_price_tick_size,json=minPriceTickSize,proto3" json:"min_price_tick_size,omitempty"`
	// min_quantity_tick_size defines the minimum tick size of the order's
	// quantity
	MinQuantityTickSize string `protobuf:"bytes,7,opt,name=min_quantity_tick_size,json=minQuantityTickSize,proto3" json:"min_quantity_tick_size,omitempty"`
	// maker_fee_rate defines the fee percentage makers pay when trading
	MakerFeeRate string `protobuf:"bytes,8,opt,name=maker_fee_rate,json=makerFeeRate,proto3" json:"maker_fee_rate,omitempty"`
	// taker_fee_rate defines the fee percentage takers pay when trading
	TakerFeeRate string `protobuf:"bytes,9,opt,name=taker_fee_rate,json=takerFeeRate,proto3" json:"taker_fee_rate,omitempty"`
	// min_notional defines the minimum notional for orders in the market
	MinNotional string     `protobuf:"bytes,10,opt,name=min_notional,json=minNotional,proto3" json:"min_notional,omitempty"`
	AdminInfo   *AdminInfo `protobuf:"bytes,11,opt,name=admin_info,json=adminInfo,proto3" json:"admin_info,omitempty"`
	// base token decimals
	BaseDecimals uint32 `protobuf:"varint,14,opt,name=base_decimals,json=baseDecimals,proto3" json:"base_decimals,omitempty"`
	// quote token decimals
	QuoteDecimals uint32 `protobuf:"varint,15,opt,name=quote_decimals,json=quoteDecimals,proto3" json:"quote_decimals,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpotMarketLaunchProposal) Reset() {
	*x = SpotMarketLaunchProposal{}
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpotMarketLaunchProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotMarketLaunchProposal) ProtoMessage() {}

func (x *SpotMarketLaunchProposal) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotMarketLaunchProposal.ProtoReflect.Descriptor instead.
func (*SpotMarketLaunchProposal) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v2_proposal_proto_rawDescGZIP(), []int{3}
}

func (x *SpotMarketLaunchProposal) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SpotMarketLaunchProposal) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SpotMarketLaunchProposal) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *SpotMarketLaunchProposal) GetBaseDenom() string {
	if x != nil {
		return x.BaseDenom
	}
	return ""
}

func (x *SpotMarketLaunchProposal) GetQuoteDenom() string {
	if x != nil {
		return x.QuoteDenom
	}
	return ""
}

func (x *SpotMarketLaunchProposal) GetMinPriceTickSize() string {
	if x != nil {
		return x.MinPriceTickSize
	}
	return ""
}

func (x *SpotMarketLaunchProposal) GetMinQuantityTickSize() string {
	if x != nil {
		return x.MinQuantityTickSize
	}
	return ""
}

func (x *SpotMarketLaunchProposal) GetMakerFeeRate() string {
	if x != nil {
		return x.MakerFeeRate
	}
	return ""
}

func (x *SpotMarketLaunchProposal) GetTakerFeeRate() string {
	if x != nil {
		return x.TakerFeeRate
	}
	return ""
}

func (x *SpotMarketLaunchProposal) GetMinNotional() string {
	if x != nil {
		return x.MinNotional
	}
	return ""
}

func (x *SpotMarketLaunchProposal) GetAdminInfo() *AdminInfo {
	if x != nil {
		return x.AdminInfo
	}
	return nil
}

func (x *SpotMarketLaunchProposal) GetBaseDecimals() uint32 {
	if x != nil {
		return x.BaseDecimals
	}
	return 0
}

func (x *SpotMarketLaunchProposal) GetQuoteDecimals() uint32 {
	if x != nil {
		return x.QuoteDecimals
	}
	return 0
}

// PerpetualMarketLaunchProposal defines a SDK message for proposing a new
// perpetual futures market through governance
type PerpetualMarketLaunchProposal struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Title       string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Ticker for the derivative market.
	Ticker string `protobuf:"bytes,3,opt,name=ticker,proto3" json:"ticker,omitempty"`
	// type of coin to use as the base currency
	QuoteDenom string `protobuf:"bytes,4,opt,name=quote_denom,json=quoteDenom,proto3" json:"quote_denom,omitempty"`
	// Oracle base currency
	OracleBase string `protobuf:"bytes,5,opt,name=oracle_base,json=oracleBase,proto3" json:"oracle_base,omitempty"`
	// Oracle quote currency
	OracleQuote string `protobuf:"bytes,6,opt,name=oracle_quote,json=oracleQuote,proto3" json:"oracle_quote,omitempty"`
	// Scale factor for oracle prices.
	OracleScaleFactor uint32 `protobuf:"varint,7,opt,name=oracle_scale_factor,json=oracleScaleFactor,proto3" json:"oracle_scale_factor,omitempty"`
	// Oracle type
	OracleType types.OracleType `protobuf:"varint,8,opt,name=oracle_type,json=oracleType,proto3,enum=injective.oracle.v1beta1.OracleType" json:"oracle_type,omitempty"`
	// initial_margin_ratio defines the initial margin ratio for the derivative
	// market
	InitialMarginRatio string `protobuf:"bytes,9,opt,name=initial_margin_ratio,json=initialMarginRatio,proto3" json:"initial_margin_ratio,omitempty"`
	// maintenance_margin_ratio defines the maintenance margin ratio for the
	// derivative market
	MaintenanceMarginRatio string `protobuf:"bytes,10,opt,name=maintenance_margin_ratio,json=maintenanceMarginRatio,proto3" json:"maintenance_margin_ratio,omitempty"`
	// maker_fee_rate defines the exchange trade fee for makers for the derivative
	// market
	MakerFeeRate string `protobuf:"bytes,11,opt,name=maker_fee_rate,json=makerFeeRate,proto3" json:"maker_fee_rate,omitempty"`
	// taker_fee_rate defines the exchange trade fee for takers for the derivative
	// market
	TakerFeeRate string `protobuf:"bytes,12,opt,name=taker_fee_rate,json=takerFeeRate,proto3" json:"taker_fee_rate,omitempty"`
	// min_price_tick_size defines the minimum tick size of the order's price and
	// margin
	MinPriceTickSize string `protobuf:"bytes,13,opt,name=min_price_tick_size,json=minPriceTickSize,proto3" json:"min_price_tick_size,omitempty"`
	// min_quantity_tick_size defines the minimum tick size of the order's
	// quantity
	MinQuantityTickSize string `protobuf:"bytes,14,opt,name=min_quantity_tick_size,json=minQuantityTickSize,proto3" json:"min_quantity_tick_size,omitempty"`
	// min_notional defines the minimum notional (in quote asset) required for
	// orders in the market
	MinNotional string     `protobuf:"bytes,15,opt,name=min_notional,json=minNotional,proto3" json:"min_notional,omitempty"`
	AdminInfo   *AdminInfo `protobuf:"bytes,16,opt,name=admin_info,json=adminInfo,proto3" json:"admin_info,omitempty"`
	// reduce_margin_ratio defines the ratio of the margin that is reduced
	ReduceMarginRatio string `protobuf:"bytes,17,opt,name=reduce_margin_ratio,json=reduceMarginRatio,proto3" json:"reduce_margin_ratio,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *PerpetualMarketLaunchProposal) Reset() {
	*x = PerpetualMarketLaunchProposal{}
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PerpetualMarketLaunchProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerpetualMarketLaunchProposal) ProtoMessage() {}

func (x *PerpetualMarketLaunchProposal) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerpetualMarketLaunchProposal.ProtoReflect.Descriptor instead.
func (*PerpetualMarketLaunchProposal) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v2_proposal_proto_rawDescGZIP(), []int{4}
}

func (x *PerpetualMarketLaunchProposal) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PerpetualMarketLaunchProposal) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PerpetualMarketLaunchProposal) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *PerpetualMarketLaunchProposal) GetQuoteDenom() string {
	if x != nil {
		return x.QuoteDenom
	}
	return ""
}

func (x *PerpetualMarketLaunchProposal) GetOracleBase() string {
	if x != nil {
		return x.OracleBase
	}
	return ""
}

func (x *PerpetualMarketLaunchProposal) GetOracleQuote() string {
	if x != nil {
		return x.OracleQuote
	}
	return ""
}

func (x *PerpetualMarketLaunchProposal) GetOracleScaleFactor() uint32 {
	if x != nil {
		return x.OracleScaleFactor
	}
	return 0
}

func (x *PerpetualMarketLaunchProposal) GetOracleType() types.OracleType {
	if x != nil {
		return x.OracleType
	}
	return types.OracleType(0)
}

func (x *PerpetualMarketLaunchProposal) GetInitialMarginRatio() string {
	if x != nil {
		return x.InitialMarginRatio
	}
	return ""
}

func (x *PerpetualMarketLaunchProposal) GetMaintenanceMarginRatio() string {
	if x != nil {
		return x.MaintenanceMarginRatio
	}
	return ""
}

func (x *PerpetualMarketLaunchProposal) GetMakerFeeRate() string {
	if x != nil {
		return x.MakerFeeRate
	}
	return ""
}

func (x *PerpetualMarketLaunchProposal) GetTakerFeeRate() string {
	if x != nil {
		return x.TakerFeeRate
	}
	return ""
}

func (x *PerpetualMarketLaunchProposal) GetMinPriceTickSize() string {
	if x != nil {
		return x.MinPriceTickSize
	}
	return ""
}

func (x *PerpetualMarketLaunchProposal) GetMinQuantityTickSize() string {
	if x != nil {
		return x.MinQuantityTickSize
	}
	return ""
}

func (x *PerpetualMarketLaunchProposal) GetMinNotional() string {
	if x != nil {
		return x.MinNotional
	}
	return ""
}

func (x *PerpetualMarketLaunchProposal) GetAdminInfo() *AdminInfo {
	if x != nil {
		return x.AdminInfo
	}
	return nil
}

func (x *PerpetualMarketLaunchProposal) GetReduceMarginRatio() string {
	if x != nil {
		return x.ReduceMarginRatio
	}
	return ""
}

type BinaryOptionsMarketLaunchProposal struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Title       string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Ticker for the derivative contract.
	Ticker string `protobuf:"bytes,3,opt,name=ticker,proto3" json:"ticker,omitempty"`
	// Oracle symbol
	OracleSymbol string `protobuf:"bytes,4,opt,name=oracle_symbol,json=oracleSymbol,proto3" json:"oracle_symbol,omitempty"`
	// Oracle Provider
	OracleProvider string `protobuf:"bytes,5,opt,name=oracle_provider,json=oracleProvider,proto3" json:"oracle_provider,omitempty"`
	// Oracle type
	OracleType types.OracleType `protobuf:"varint,6,opt,name=oracle_type,json=oracleType,proto3,enum=injective.oracle.v1beta1.OracleType" json:"oracle_type,omitempty"`
	// Scale factor for oracle prices.
	OracleScaleFactor uint32 `protobuf:"varint,7,opt,name=oracle_scale_factor,json=oracleScaleFactor,proto3" json:"oracle_scale_factor,omitempty"`
	// expiration timestamp
	ExpirationTimestamp int64 `protobuf:"varint,8,opt,name=expiration_timestamp,json=expirationTimestamp,proto3" json:"expiration_timestamp,omitempty"`
	// expiration timestamp
	SettlementTimestamp int64 `protobuf:"varint,9,opt,name=settlement_timestamp,json=settlementTimestamp,proto3" json:"settlement_timestamp,omitempty"`
	// admin of the market
	Admin string `protobuf:"bytes,10,opt,name=admin,proto3" json:"admin,omitempty"`
	// Address of the quote currency denomination for the binary options contract
	QuoteDenom string `protobuf:"bytes,11,opt,name=quote_denom,json=quoteDenom,proto3" json:"quote_denom,omitempty"`
	// maker_fee_rate defines the maker fee rate of a binary options market
	MakerFeeRate string `protobuf:"bytes,12,opt,name=maker_fee_rate,json=makerFeeRate,proto3" json:"maker_fee_rate,omitempty"`
	// taker_fee_rate defines the taker fee rate of a derivative market
	TakerFeeRate string `protobuf:"bytes,13,opt,name=taker_fee_rate,json=takerFeeRate,proto3" json:"taker_fee_rate,omitempty"`
	// min_price_tick_size defines the minimum tick size that the price and margin
	// required for orders in the market
	MinPriceTickSize string `protobuf:"bytes,14,opt,name=min_price_tick_size,json=minPriceTickSize,proto3" json:"min_price_tick_size,omitempty"`
	// min_quantity_tick_size defines the minimum tick size of the quantity
	// required for orders in the market
	MinQuantityTickSize string `protobuf:"bytes,15,opt,name=min_quantity_tick_size,json=minQuantityTickSize,proto3" json:"min_quantity_tick_size,omitempty"`
	// min_notional defines the minimum notional (in quote asset) required for
	// orders in the market
	MinNotional      string `protobuf:"bytes,16,opt,name=min_notional,json=minNotional,proto3" json:"min_notional,omitempty"`
	AdminPermissions uint32 `protobuf:"varint,17,opt,name=admin_permissions,json=adminPermissions,proto3" json:"admin_permissions,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *BinaryOptionsMarketLaunchProposal) Reset() {
	*x = BinaryOptionsMarketLaunchProposal{}
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BinaryOptionsMarketLaunchProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryOptionsMarketLaunchProposal) ProtoMessage() {}

func (x *BinaryOptionsMarketLaunchProposal) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryOptionsMarketLaunchProposal.ProtoReflect.Descriptor instead.
func (*BinaryOptionsMarketLaunchProposal) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v2_proposal_proto_rawDescGZIP(), []int{5}
}

func (x *BinaryOptionsMarketLaunchProposal) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *BinaryOptionsMarketLaunchProposal) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BinaryOptionsMarketLaunchProposal) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *BinaryOptionsMarketLaunchProposal) GetOracleSymbol() string {
	if x != nil {
		return x.OracleSymbol
	}
	return ""
}

func (x *BinaryOptionsMarketLaunchProposal) GetOracleProvider() string {
	if x != nil {
		return x.OracleProvider
	}
	return ""
}

func (x *BinaryOptionsMarketLaunchProposal) GetOracleType() types.OracleType {
	if x != nil {
		return x.OracleType
	}
	return types.OracleType(0)
}

func (x *BinaryOptionsMarketLaunchProposal) GetOracleScaleFactor() uint32 {
	if x != nil {
		return x.OracleScaleFactor
	}
	return 0
}

func (x *BinaryOptionsMarketLaunchProposal) GetExpirationTimestamp() int64 {
	if x != nil {
		return x.ExpirationTimestamp
	}
	return 0
}

func (x *BinaryOptionsMarketLaunchProposal) GetSettlementTimestamp() int64 {
	if x != nil {
		return x.SettlementTimestamp
	}
	return 0
}

func (x *BinaryOptionsMarketLaunchProposal) GetAdmin() string {
	if x != nil {
		return x.Admin
	}
	return ""
}

func (x *BinaryOptionsMarketLaunchProposal) GetQuoteDenom() string {
	if x != nil {
		return x.QuoteDenom
	}
	return ""
}

func (x *BinaryOptionsMarketLaunchProposal) GetMakerFeeRate() string {
	if x != nil {
		return x.MakerFeeRate
	}
	return ""
}

func (x *BinaryOptionsMarketLaunchProposal) GetTakerFeeRate() string {
	if x != nil {
		return x.TakerFeeRate
	}
	return ""
}

func (x *BinaryOptionsMarketLaunchProposal) GetMinPriceTickSize() string {
	if x != nil {
		return x.MinPriceTickSize
	}
	return ""
}

func (x *BinaryOptionsMarketLaunchProposal) GetMinQuantityTickSize() string {
	if x != nil {
		return x.MinQuantityTickSize
	}
	return ""
}

func (x *BinaryOptionsMarketLaunchProposal) GetMinNotional() string {
	if x != nil {
		return x.MinNotional
	}
	return ""
}

func (x *BinaryOptionsMarketLaunchProposal) GetAdminPermissions() uint32 {
	if x != nil {
		return x.AdminPermissions
	}
	return 0
}

// ExpiryFuturesMarketLaunchProposal defines a SDK message for proposing a new
// expiry futures market through governance
type ExpiryFuturesMarketLaunchProposal struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Title       string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Ticker for the derivative market.
	Ticker string `protobuf:"bytes,3,opt,name=ticker,proto3" json:"ticker,omitempty"`
	// type of coin to use as the quote currency
	QuoteDenom string `protobuf:"bytes,4,opt,name=quote_denom,json=quoteDenom,proto3" json:"quote_denom,omitempty"`
	// Oracle base currency
	OracleBase string `protobuf:"bytes,5,opt,name=oracle_base,json=oracleBase,proto3" json:"oracle_base,omitempty"`
	// Oracle quote currency
	OracleQuote string `protobuf:"bytes,6,opt,name=oracle_quote,json=oracleQuote,proto3" json:"oracle_quote,omitempty"`
	// Scale factor for oracle prices.
	OracleScaleFactor uint32 `protobuf:"varint,7,opt,name=oracle_scale_factor,json=oracleScaleFactor,proto3" json:"oracle_scale_factor,omitempty"`
	// Oracle type
	OracleType types.OracleType `protobuf:"varint,8,opt,name=oracle_type,json=oracleType,proto3,enum=injective.oracle.v1beta1.OracleType" json:"oracle_type,omitempty"`
	// Expiration time of the market
	Expiry int64 `protobuf:"varint,9,opt,name=expiry,proto3" json:"expiry,omitempty"`
	// initial_margin_ratio defines the initial margin ratio for the derivative
	// market
	InitialMarginRatio string `protobuf:"bytes,10,opt,name=initial_margin_ratio,json=initialMarginRatio,proto3" json:"initial_margin_ratio,omitempty"`
	// maintenance_margin_ratio defines the maintenance margin ratio for the
	// derivative market
	MaintenanceMarginRatio string `protobuf:"bytes,11,opt,name=maintenance_margin_ratio,json=maintenanceMarginRatio,proto3" json:"maintenance_margin_ratio,omitempty"`
	// maker_fee_rate defines the exchange trade fee for makers for the derivative
	// market
	MakerFeeRate string `protobuf:"bytes,12,opt,name=maker_fee_rate,json=makerFeeRate,proto3" json:"maker_fee_rate,omitempty"`
	// taker_fee_rate defines the exchange trade fee for takers for the derivative
	// market
	TakerFeeRate string `protobuf:"bytes,13,opt,name=taker_fee_rate,json=takerFeeRate,proto3" json:"taker_fee_rate,omitempty"`
	// min_price_tick_size defines the minimum tick size of the order's price and
	// margin
	MinPriceTickSize string `protobuf:"bytes,14,opt,name=min_price_tick_size,json=minPriceTickSize,proto3" json:"min_price_tick_size,omitempty"`
	// min_quantity_tick_size defines the minimum tick size of the order's
	// quantity
	MinQuantityTickSize string `protobuf:"bytes,15,opt,name=min_quantity_tick_size,json=minQuantityTickSize,proto3" json:"min_quantity_tick_size,omitempty"`
	// min_notional defines the minimum notional (in quote asset) required for
	// orders in the market
	MinNotional string     `protobuf:"bytes,16,opt,name=min_notional,json=minNotional,proto3" json:"min_notional,omitempty"`
	AdminInfo   *AdminInfo `protobuf:"bytes,17,opt,name=admin_info,json=adminInfo,proto3" json:"admin_info,omitempty"`
	// reduce_margin_ratio defines the ratio of the margin that is reduced
	ReduceMarginRatio string `protobuf:"bytes,18,opt,name=reduce_margin_ratio,json=reduceMarginRatio,proto3" json:"reduce_margin_ratio,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ExpiryFuturesMarketLaunchProposal) Reset() {
	*x = ExpiryFuturesMarketLaunchProposal{}
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExpiryFuturesMarketLaunchProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpiryFuturesMarketLaunchProposal) ProtoMessage() {}

func (x *ExpiryFuturesMarketLaunchProposal) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpiryFuturesMarketLaunchProposal.ProtoReflect.Descriptor instead.
func (*ExpiryFuturesMarketLaunchProposal) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v2_proposal_proto_rawDescGZIP(), []int{6}
}

func (x *ExpiryFuturesMarketLaunchProposal) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ExpiryFuturesMarketLaunchProposal) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ExpiryFuturesMarketLaunchProposal) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *ExpiryFuturesMarketLaunchProposal) GetQuoteDenom() string {
	if x != nil {
		return x.QuoteDenom
	}
	return ""
}

func (x *ExpiryFuturesMarketLaunchProposal) GetOracleBase() string {
	if x != nil {
		return x.OracleBase
	}
	return ""
}

func (x *ExpiryFuturesMarketLaunchProposal) GetOracleQuote() string {
	if x != nil {
		return x.OracleQuote
	}
	return ""
}

func (x *ExpiryFuturesMarketLaunchProposal) GetOracleScaleFactor() uint32 {
	if x != nil {
		return x.OracleScaleFactor
	}
	return 0
}

func (x *ExpiryFuturesMarketLaunchProposal) GetOracleType() types.OracleType {
	if x != nil {
		return x.OracleType
	}
	return types.OracleType(0)
}

func (x *ExpiryFuturesMarketLaunchProposal) GetExpiry() int64 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *ExpiryFuturesMarketLaunchProposal) GetInitialMarginRatio() string {
	if x != nil {
		return x.InitialMarginRatio
	}
	return ""
}

func (x *ExpiryFuturesMarketLaunchProposal) GetMaintenanceMarginRatio() string {
	if x != nil {
		return x.MaintenanceMarginRatio
	}
	return ""
}

func (x *ExpiryFuturesMarketLaunchProposal) GetMakerFeeRate() string {
	if x != nil {
		return x.MakerFeeRate
	}
	return ""
}

func (x *ExpiryFuturesMarketLaunchProposal) GetTakerFeeRate() string {
	if x != nil {
		return x.TakerFeeRate
	}
	return ""
}

func (x *ExpiryFuturesMarketLaunchProposal) GetMinPriceTickSize() string {
	if x != nil {
		return x.MinPriceTickSize
	}
	return ""
}

func (x *ExpiryFuturesMarketLaunchProposal) GetMinQuantityTickSize() string {
	if x != nil {
		return x.MinQuantityTickSize
	}
	return ""
}

func (x *ExpiryFuturesMarketLaunchProposal) GetMinNotional() string {
	if x != nil {
		return x.MinNotional
	}
	return ""
}

func (x *ExpiryFuturesMarketLaunchProposal) GetAdminInfo() *AdminInfo {
	if x != nil {
		return x.AdminInfo
	}
	return nil
}

func (x *ExpiryFuturesMarketLaunchProposal) GetReduceMarginRatio() string {
	if x != nil {
		return x.ReduceMarginRatio
	}
	return ""
}

type DerivativeMarketParamUpdateProposal struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Title       string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	MarketId    string                 `protobuf:"bytes,3,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// initial_margin_ratio defines the initial margin ratio for the derivative
	// market
	InitialMarginRatio string `protobuf:"bytes,4,opt,name=initial_margin_ratio,json=initialMarginRatio,proto3" json:"initial_margin_ratio,omitempty"`
	// maintenance_margin_ratio defines the maintenance margin ratio for the
	// derivative market
	MaintenanceMarginRatio string `protobuf:"bytes,5,opt,name=maintenance_margin_ratio,json=maintenanceMarginRatio,proto3" json:"maintenance_margin_ratio,omitempty"`
	// maker_fee_rate defines the exchange trade fee for makers for the derivative
	// market
	MakerFeeRate string `protobuf:"bytes,6,opt,name=maker_fee_rate,json=makerFeeRate,proto3" json:"maker_fee_rate,omitempty"`
	// taker_fee_rate defines the exchange trade fee for takers for the derivative
	// market
	TakerFeeRate string `protobuf:"bytes,7,opt,name=taker_fee_rate,json=takerFeeRate,proto3" json:"taker_fee_rate,omitempty"`
	// relayer_fee_share_rate defines the relayer fee share rate for the
	// derivative market
	RelayerFeeShareRate string `protobuf:"bytes,8,opt,name=relayer_fee_share_rate,json=relayerFeeShareRate,proto3" json:"relayer_fee_share_rate,omitempty"`
	// min_price_tick_size defines the minimum tick size of the order's price and
	// margin
	MinPriceTickSize string `protobuf:"bytes,9,opt,name=min_price_tick_size,json=minPriceTickSize,proto3" json:"min_price_tick_size,omitempty"`
	// min_quantity_tick_size defines the minimum tick size of the order's
	// quantity
	MinQuantityTickSize string `protobuf:"bytes,10,opt,name=min_quantity_tick_size,json=minQuantityTickSize,proto3" json:"min_quantity_tick_size,omitempty"`
	// hourly_interest_rate defines the hourly interest rate
	HourlyInterestRate string `protobuf:"bytes,11,opt,name=HourlyInterestRate,proto3" json:"HourlyInterestRate,omitempty"`
	// hourly_funding_rate_cap defines the maximum absolute value of the hourly
	// funding rate
	HourlyFundingRateCap string        `protobuf:"bytes,12,opt,name=HourlyFundingRateCap,proto3" json:"HourlyFundingRateCap,omitempty"`
	Status               MarketStatus  `protobuf:"varint,13,opt,name=status,proto3,enum=injective.exchange.v2.MarketStatus" json:"status,omitempty"`
	OracleParams         *OracleParams `protobuf:"bytes,14,opt,name=oracle_params,json=oracleParams,proto3" json:"oracle_params,omitempty"`
	Ticker               string        `protobuf:"bytes,15,opt,name=ticker,proto3" json:"ticker,omitempty"`
	// min_notional defines the minimum notional (in quote asset) required for
	// orders in the market
	MinNotional string     `protobuf:"bytes,16,opt,name=min_notional,json=minNotional,proto3" json:"min_notional,omitempty"`
	AdminInfo   *AdminInfo `protobuf:"bytes,17,opt,name=admin_info,json=adminInfo,proto3" json:"admin_info,omitempty"`
	// reduce_margin_ratio defines the ratio of the margin that is reduced
	ReduceMarginRatio string `protobuf:"bytes,18,opt,name=reduce_margin_ratio,json=reduceMarginRatio,proto3" json:"reduce_margin_ratio,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *DerivativeMarketParamUpdateProposal) Reset() {
	*x = DerivativeMarketParamUpdateProposal{}
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DerivativeMarketParamUpdateProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivativeMarketParamUpdateProposal) ProtoMessage() {}

func (x *DerivativeMarketParamUpdateProposal) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivativeMarketParamUpdateProposal.ProtoReflect.Descriptor instead.
func (*DerivativeMarketParamUpdateProposal) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v2_proposal_proto_rawDescGZIP(), []int{7}
}

func (x *DerivativeMarketParamUpdateProposal) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DerivativeMarketParamUpdateProposal) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DerivativeMarketParamUpdateProposal) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *DerivativeMarketParamUpdateProposal) GetInitialMarginRatio() string {
	if x != nil {
		return x.InitialMarginRatio
	}
	return ""
}

func (x *DerivativeMarketParamUpdateProposal) GetMaintenanceMarginRatio() string {
	if x != nil {
		return x.MaintenanceMarginRatio
	}
	return ""
}

func (x *DerivativeMarketParamUpdateProposal) GetMakerFeeRate() string {
	if x != nil {
		return x.MakerFeeRate
	}
	return ""
}

func (x *DerivativeMarketParamUpdateProposal) GetTakerFeeRate() string {
	if x != nil {
		return x.TakerFeeRate
	}
	return ""
}

func (x *DerivativeMarketParamUpdateProposal) GetRelayerFeeShareRate() string {
	if x != nil {
		return x.RelayerFeeShareRate
	}
	return ""
}

func (x *DerivativeMarketParamUpdateProposal) GetMinPriceTickSize() string {
	if x != nil {
		return x.MinPriceTickSize
	}
	return ""
}

func (x *DerivativeMarketParamUpdateProposal) GetMinQuantityTickSize() string {
	if x != nil {
		return x.MinQuantityTickSize
	}
	return ""
}

func (x *DerivativeMarketParamUpdateProposal) GetHourlyInterestRate() string {
	if x != nil {
		return x.HourlyInterestRate
	}
	return ""
}

func (x *DerivativeMarketParamUpdateProposal) GetHourlyFundingRateCap() string {
	if x != nil {
		return x.HourlyFundingRateCap
	}
	return ""
}

func (x *DerivativeMarketParamUpdateProposal) GetStatus() MarketStatus {
	if x != nil {
		return x.Status
	}
	return MarketStatus_Unspecified
}

func (x *DerivativeMarketParamUpdateProposal) GetOracleParams() *OracleParams {
	if x != nil {
		return x.OracleParams
	}
	return nil
}

func (x *DerivativeMarketParamUpdateProposal) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *DerivativeMarketParamUpdateProposal) GetMinNotional() string {
	if x != nil {
		return x.MinNotional
	}
	return ""
}

func (x *DerivativeMarketParamUpdateProposal) GetAdminInfo() *AdminInfo {
	if x != nil {
		return x.AdminInfo
	}
	return nil
}

func (x *DerivativeMarketParamUpdateProposal) GetReduceMarginRatio() string {
	if x != nil {
		return x.ReduceMarginRatio
	}
	return ""
}

type AdminInfo struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Admin            string                 `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty"`
	AdminPermissions uint32                 `protobuf:"varint,2,opt,name=admin_permissions,json=adminPermissions,proto3" json:"admin_permissions,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AdminInfo) Reset() {
	*x = AdminInfo{}
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdminInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminInfo) ProtoMessage() {}

func (x *AdminInfo) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminInfo.ProtoReflect.Descriptor instead.
func (*AdminInfo) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v2_proposal_proto_rawDescGZIP(), []int{8}
}

func (x *AdminInfo) GetAdmin() string {
	if x != nil {
		return x.Admin
	}
	return ""
}

func (x *AdminInfo) GetAdminPermissions() uint32 {
	if x != nil {
		return x.AdminPermissions
	}
	return 0
}

type MarketForcedSettlementProposal struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Title           string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description     string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	MarketId        string                 `protobuf:"bytes,3,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	SettlementPrice string                 `protobuf:"bytes,4,opt,name=settlement_price,json=settlementPrice,proto3" json:"settlement_price,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MarketForcedSettlementProposal) Reset() {
	*x = MarketForcedSettlementProposal{}
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketForcedSettlementProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketForcedSettlementProposal) ProtoMessage() {}

func (x *MarketForcedSettlementProposal) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketForcedSettlementProposal.ProtoReflect.Descriptor instead.
func (*MarketForcedSettlementProposal) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v2_proposal_proto_rawDescGZIP(), []int{9}
}

func (x *MarketForcedSettlementProposal) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MarketForcedSettlementProposal) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MarketForcedSettlementProposal) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *MarketForcedSettlementProposal) GetSettlementPrice() string {
	if x != nil {
		return x.SettlementPrice
	}
	return ""
}

type UpdateDenomDecimalsProposal struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	DenomDecimals []*DenomDecimals       `protobuf:"bytes,3,rep,name=denom_decimals,json=denomDecimals,proto3" json:"denom_decimals,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDenomDecimalsProposal) Reset() {
	*x = UpdateDenomDecimalsProposal{}
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDenomDecimalsProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDenomDecimalsProposal) ProtoMessage() {}

func (x *UpdateDenomDecimalsProposal) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDenomDecimalsProposal.ProtoReflect.Descriptor instead.
func (*UpdateDenomDecimalsProposal) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v2_proposal_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateDenomDecimalsProposal) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateDenomDecimalsProposal) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateDenomDecimalsProposal) GetDenomDecimals() []*DenomDecimals {
	if x != nil {
		return x.DenomDecimals
	}
	return nil
}

type BinaryOptionsMarketParamUpdateProposal struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Title       string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	MarketId    string                 `protobuf:"bytes,3,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// maker_fee_rate defines the exchange trade fee for makers for the derivative
	// market
	MakerFeeRate string `protobuf:"bytes,4,opt,name=maker_fee_rate,json=makerFeeRate,proto3" json:"maker_fee_rate,omitempty"`
	// taker_fee_rate defines the exchange trade fee for takers for the derivative
	// market
	TakerFeeRate string `protobuf:"bytes,5,opt,name=taker_fee_rate,json=takerFeeRate,proto3" json:"taker_fee_rate,omitempty"`
	// relayer_fee_share_rate defines the relayer fee share rate for the
	// derivative market
	RelayerFeeShareRate string `protobuf:"bytes,6,opt,name=relayer_fee_share_rate,json=relayerFeeShareRate,proto3" json:"relayer_fee_share_rate,omitempty"`
	// min_price_tick_size defines the minimum tick size of the order's price and
	// margin
	MinPriceTickSize string `protobuf:"bytes,7,opt,name=min_price_tick_size,json=minPriceTickSize,proto3" json:"min_price_tick_size,omitempty"`
	// min_quantity_tick_size defines the minimum tick size of the order's
	// quantity
	MinQuantityTickSize string `protobuf:"bytes,8,opt,name=min_quantity_tick_size,json=minQuantityTickSize,proto3" json:"min_quantity_tick_size,omitempty"`
	// expiration timestamp
	ExpirationTimestamp int64 `protobuf:"varint,9,opt,name=expiration_timestamp,json=expirationTimestamp,proto3" json:"expiration_timestamp,omitempty"`
	// expiration timestamp
	SettlementTimestamp int64 `protobuf:"varint,10,opt,name=settlement_timestamp,json=settlementTimestamp,proto3" json:"settlement_timestamp,omitempty"`
	// new price at which market will be settled
	SettlementPrice string `protobuf:"bytes,11,opt,name=settlement_price,json=settlementPrice,proto3" json:"settlement_price,omitempty"`
	// admin of the market
	Admin        string                `protobuf:"bytes,12,opt,name=admin,proto3" json:"admin,omitempty"`
	Status       MarketStatus          `protobuf:"varint,13,opt,name=status,proto3,enum=injective.exchange.v2.MarketStatus" json:"status,omitempty"`
	OracleParams *ProviderOracleParams `protobuf:"bytes,14,opt,name=oracle_params,json=oracleParams,proto3" json:"oracle_params,omitempty"`
	Ticker       string                `protobuf:"bytes,15,opt,name=ticker,proto3" json:"ticker,omitempty"`
	// min_notional defines the minimum notional (in quote asset) required for
	// orders in the market
	MinNotional   string `protobuf:"bytes,16,opt,name=min_notional,json=minNotional,proto3" json:"min_notional,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BinaryOptionsMarketParamUpdateProposal) Reset() {
	*x = BinaryOptionsMarketParamUpdateProposal{}
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BinaryOptionsMarketParamUpdateProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryOptionsMarketParamUpdateProposal) ProtoMessage() {}

func (x *BinaryOptionsMarketParamUpdateProposal) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryOptionsMarketParamUpdateProposal.ProtoReflect.Descriptor instead.
func (*BinaryOptionsMarketParamUpdateProposal) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v2_proposal_proto_rawDescGZIP(), []int{11}
}

func (x *BinaryOptionsMarketParamUpdateProposal) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *BinaryOptionsMarketParamUpdateProposal) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BinaryOptionsMarketParamUpdateProposal) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *BinaryOptionsMarketParamUpdateProposal) GetMakerFeeRate() string {
	if x != nil {
		return x.MakerFeeRate
	}
	return ""
}

func (x *BinaryOptionsMarketParamUpdateProposal) GetTakerFeeRate() string {
	if x != nil {
		return x.TakerFeeRate
	}
	return ""
}

func (x *BinaryOptionsMarketParamUpdateProposal) GetRelayerFeeShareRate() string {
	if x != nil {
		return x.RelayerFeeShareRate
	}
	return ""
}

func (x *BinaryOptionsMarketParamUpdateProposal) GetMinPriceTickSize() string {
	if x != nil {
		return x.MinPriceTickSize
	}
	return ""
}

func (x *BinaryOptionsMarketParamUpdateProposal) GetMinQuantityTickSize() string {
	if x != nil {
		return x.MinQuantityTickSize
	}
	return ""
}

func (x *BinaryOptionsMarketParamUpdateProposal) GetExpirationTimestamp() int64 {
	if x != nil {
		return x.ExpirationTimestamp
	}
	return 0
}

func (x *BinaryOptionsMarketParamUpdateProposal) GetSettlementTimestamp() int64 {
	if x != nil {
		return x.SettlementTimestamp
	}
	return 0
}

func (x *BinaryOptionsMarketParamUpdateProposal) GetSettlementPrice() string {
	if x != nil {
		return x.SettlementPrice
	}
	return ""
}

func (x *BinaryOptionsMarketParamUpdateProposal) GetAdmin() string {
	if x != nil {
		return x.Admin
	}
	return ""
}

func (x *BinaryOptionsMarketParamUpdateProposal) GetStatus() MarketStatus {
	if x != nil {
		return x.Status
	}
	return MarketStatus_Unspecified
}

func (x *BinaryOptionsMarketParamUpdateProposal) GetOracleParams() *ProviderOracleParams {
	if x != nil {
		return x.OracleParams
	}
	return nil
}

func (x *BinaryOptionsMarketParamUpdateProposal) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *BinaryOptionsMarketParamUpdateProposal) GetMinNotional() string {
	if x != nil {
		return x.MinNotional
	}
	return ""
}

type ProviderOracleParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Oracle base currency
	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// Oracle quote currency
	Provider string `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	// Scale factor for oracle prices.
	OracleScaleFactor uint32 `protobuf:"varint,3,opt,name=oracle_scale_factor,json=oracleScaleFactor,proto3" json:"oracle_scale_factor,omitempty"`
	// Oracle type
	OracleType    types.OracleType `protobuf:"varint,4,opt,name=oracle_type,json=oracleType,proto3,enum=injective.oracle.v1beta1.OracleType" json:"oracle_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProviderOracleParams) Reset() {
	*x = ProviderOracleParams{}
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProviderOracleParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderOracleParams) ProtoMessage() {}

func (x *ProviderOracleParams) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderOracleParams.ProtoReflect.Descriptor instead.
func (*ProviderOracleParams) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v2_proposal_proto_rawDescGZIP(), []int{12}
}

func (x *ProviderOracleParams) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *ProviderOracleParams) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ProviderOracleParams) GetOracleScaleFactor() uint32 {
	if x != nil {
		return x.OracleScaleFactor
	}
	return 0
}

func (x *ProviderOracleParams) GetOracleType() types.OracleType {
	if x != nil {
		return x.OracleType
	}
	return types.OracleType(0)
}

type OracleParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Oracle base currency
	OracleBase string `protobuf:"bytes,1,opt,name=oracle_base,json=oracleBase,proto3" json:"oracle_base,omitempty"`
	// Oracle quote currency
	OracleQuote string `protobuf:"bytes,2,opt,name=oracle_quote,json=oracleQuote,proto3" json:"oracle_quote,omitempty"`
	// Scale factor for oracle prices.
	OracleScaleFactor uint32 `protobuf:"varint,3,opt,name=oracle_scale_factor,json=oracleScaleFactor,proto3" json:"oracle_scale_factor,omitempty"`
	// Oracle type
	OracleType    types.OracleType `protobuf:"varint,4,opt,name=oracle_type,json=oracleType,proto3,enum=injective.oracle.v1beta1.OracleType" json:"oracle_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OracleParams) Reset() {
	*x = OracleParams{}
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OracleParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleParams) ProtoMessage() {}

func (x *OracleParams) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OracleParams.ProtoReflect.Descriptor instead.
func (*OracleParams) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v2_proposal_proto_rawDescGZIP(), []int{13}
}

func (x *OracleParams) GetOracleBase() string {
	if x != nil {
		return x.OracleBase
	}
	return ""
}

func (x *OracleParams) GetOracleQuote() string {
	if x != nil {
		return x.OracleQuote
	}
	return ""
}

func (x *OracleParams) GetOracleScaleFactor() uint32 {
	if x != nil {
		return x.OracleScaleFactor
	}
	return 0
}

func (x *OracleParams) GetOracleType() types.OracleType {
	if x != nil {
		return x.OracleType
	}
	return types.OracleType(0)
}

type TradingRewardCampaignLaunchProposal struct {
	state               protoimpl.MessageState     `protogen:"open.v1"`
	Title               string                     `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description         string                     `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	CampaignInfo        *TradingRewardCampaignInfo `protobuf:"bytes,3,opt,name=campaign_info,json=campaignInfo,proto3" json:"campaign_info,omitempty"`
	CampaignRewardPools []*CampaignRewardPool      `protobuf:"bytes,4,rep,name=campaign_reward_pools,json=campaignRewardPools,proto3" json:"campaign_reward_pools,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *TradingRewardCampaignLaunchProposal) Reset() {
	*x = TradingRewardCampaignLaunchProposal{}
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradingRewardCampaignLaunchProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingRewardCampaignLaunchProposal) ProtoMessage() {}

func (x *TradingRewardCampaignLaunchProposal) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingRewardCampaignLaunchProposal.ProtoReflect.Descriptor instead.
func (*TradingRewardCampaignLaunchProposal) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v2_proposal_proto_rawDescGZIP(), []int{14}
}

func (x *TradingRewardCampaignLaunchProposal) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TradingRewardCampaignLaunchProposal) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TradingRewardCampaignLaunchProposal) GetCampaignInfo() *TradingRewardCampaignInfo {
	if x != nil {
		return x.CampaignInfo
	}
	return nil
}

func (x *TradingRewardCampaignLaunchProposal) GetCampaignRewardPools() []*CampaignRewardPool {
	if x != nil {
		return x.CampaignRewardPools
	}
	return nil
}

type TradingRewardCampaignUpdateProposal struct {
	state                        protoimpl.MessageState     `protogen:"open.v1"`
	Title                        string                     `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description                  string                     `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	CampaignInfo                 *TradingRewardCampaignInfo `protobuf:"bytes,3,opt,name=campaign_info,json=campaignInfo,proto3" json:"campaign_info,omitempty"`
	CampaignRewardPoolsAdditions []*CampaignRewardPool      `protobuf:"bytes,4,rep,name=campaign_reward_pools_additions,json=campaignRewardPoolsAdditions,proto3" json:"campaign_reward_pools_additions,omitempty"`
	CampaignRewardPoolsUpdates   []*CampaignRewardPool      `protobuf:"bytes,5,rep,name=campaign_reward_pools_updates,json=campaignRewardPoolsUpdates,proto3" json:"campaign_reward_pools_updates,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *TradingRewardCampaignUpdateProposal) Reset() {
	*x = TradingRewardCampaignUpdateProposal{}
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradingRewardCampaignUpdateProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingRewardCampaignUpdateProposal) ProtoMessage() {}

func (x *TradingRewardCampaignUpdateProposal) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingRewardCampaignUpdateProposal.ProtoReflect.Descriptor instead.
func (*TradingRewardCampaignUpdateProposal) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v2_proposal_proto_rawDescGZIP(), []int{15}
}

func (x *TradingRewardCampaignUpdateProposal) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TradingRewardCampaignUpdateProposal) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TradingRewardCampaignUpdateProposal) GetCampaignInfo() *TradingRewardCampaignInfo {
	if x != nil {
		return x.CampaignInfo
	}
	return nil
}

func (x *TradingRewardCampaignUpdateProposal) GetCampaignRewardPoolsAdditions() []*CampaignRewardPool {
	if x != nil {
		return x.CampaignRewardPoolsAdditions
	}
	return nil
}

func (x *TradingRewardCampaignUpdateProposal) GetCampaignRewardPoolsUpdates() []*CampaignRewardPool {
	if x != nil {
		return x.CampaignRewardPoolsUpdates
	}
	return nil
}

type RewardPointUpdate struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AccountAddress string                 `protobuf:"bytes,1,opt,name=account_address,json=accountAddress,proto3" json:"account_address,omitempty"`
	// new_points overwrites the current trading reward points for the account
	NewPoints     string `protobuf:"bytes,12,opt,name=new_points,json=newPoints,proto3" json:"new_points,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RewardPointUpdate) Reset() {
	*x = RewardPointUpdate{}
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RewardPointUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardPointUpdate) ProtoMessage() {}

func (x *RewardPointUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardPointUpdate.ProtoReflect.Descriptor instead.
func (*RewardPointUpdate) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v2_proposal_proto_rawDescGZIP(), []int{16}
}

func (x *RewardPointUpdate) GetAccountAddress() string {
	if x != nil {
		return x.AccountAddress
	}
	return ""
}

func (x *RewardPointUpdate) GetNewPoints() string {
	if x != nil {
		return x.NewPoints
	}
	return ""
}

type TradingRewardPendingPointsUpdateProposal struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Title                string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description          string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	PendingPoolTimestamp int64                  `protobuf:"varint,3,opt,name=pending_pool_timestamp,json=pendingPoolTimestamp,proto3" json:"pending_pool_timestamp,omitempty"`
	RewardPointUpdates   []*RewardPointUpdate   `protobuf:"bytes,4,rep,name=reward_point_updates,json=rewardPointUpdates,proto3" json:"reward_point_updates,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *TradingRewardPendingPointsUpdateProposal) Reset() {
	*x = TradingRewardPendingPointsUpdateProposal{}
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradingRewardPendingPointsUpdateProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingRewardPendingPointsUpdateProposal) ProtoMessage() {}

func (x *TradingRewardPendingPointsUpdateProposal) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingRewardPendingPointsUpdateProposal.ProtoReflect.Descriptor instead.
func (*TradingRewardPendingPointsUpdateProposal) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v2_proposal_proto_rawDescGZIP(), []int{17}
}

func (x *TradingRewardPendingPointsUpdateProposal) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TradingRewardPendingPointsUpdateProposal) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TradingRewardPendingPointsUpdateProposal) GetPendingPoolTimestamp() int64 {
	if x != nil {
		return x.PendingPoolTimestamp
	}
	return 0
}

func (x *TradingRewardPendingPointsUpdateProposal) GetRewardPointUpdates() []*RewardPointUpdate {
	if x != nil {
		return x.RewardPointUpdates
	}
	return nil
}

type FeeDiscountProposal struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Schedule      *FeeDiscountSchedule   `protobuf:"bytes,3,opt,name=schedule,proto3" json:"schedule,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FeeDiscountProposal) Reset() {
	*x = FeeDiscountProposal{}
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeeDiscountProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeDiscountProposal) ProtoMessage() {}

func (x *FeeDiscountProposal) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeDiscountProposal.ProtoReflect.Descriptor instead.
func (*FeeDiscountProposal) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v2_proposal_proto_rawDescGZIP(), []int{18}
}

func (x *FeeDiscountProposal) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *FeeDiscountProposal) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FeeDiscountProposal) GetSchedule() *FeeDiscountSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

type BatchCommunityPoolSpendProposal struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Title         string                               `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                               `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Proposals     []*types1.CommunityPoolSpendProposal `protobuf:"bytes,3,rep,name=proposals,proto3" json:"proposals,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchCommunityPoolSpendProposal) Reset() {
	*x = BatchCommunityPoolSpendProposal{}
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchCommunityPoolSpendProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCommunityPoolSpendProposal) ProtoMessage() {}

func (x *BatchCommunityPoolSpendProposal) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCommunityPoolSpendProposal.ProtoReflect.Descriptor instead.
func (*BatchCommunityPoolSpendProposal) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v2_proposal_proto_rawDescGZIP(), []int{19}
}

func (x *BatchCommunityPoolSpendProposal) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *BatchCommunityPoolSpendProposal) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BatchCommunityPoolSpendProposal) GetProposals() []*types1.CommunityPoolSpendProposal {
	if x != nil {
		return x.Proposals
	}
	return nil
}

// AtomicMarketOrderFeeMultiplierScheduleProposal defines a SDK message for
// proposing new atomic take fee multipliers for specified markets
type AtomicMarketOrderFeeMultiplierScheduleProposal struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Title                string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description          string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	MarketFeeMultipliers []*MarketFeeMultiplier `protobuf:"bytes,3,rep,name=market_fee_multipliers,json=marketFeeMultipliers,proto3" json:"market_fee_multipliers,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *AtomicMarketOrderFeeMultiplierScheduleProposal) Reset() {
	*x = AtomicMarketOrderFeeMultiplierScheduleProposal{}
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AtomicMarketOrderFeeMultiplierScheduleProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AtomicMarketOrderFeeMultiplierScheduleProposal) ProtoMessage() {}

func (x *AtomicMarketOrderFeeMultiplierScheduleProposal) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AtomicMarketOrderFeeMultiplierScheduleProposal.ProtoReflect.Descriptor instead.
func (*AtomicMarketOrderFeeMultiplierScheduleProposal) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v2_proposal_proto_rawDescGZIP(), []int{20}
}

func (x *AtomicMarketOrderFeeMultiplierScheduleProposal) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AtomicMarketOrderFeeMultiplierScheduleProposal) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AtomicMarketOrderFeeMultiplierScheduleProposal) GetMarketFeeMultipliers() []*MarketFeeMultiplier {
	if x != nil {
		return x.MarketFeeMultipliers
	}
	return nil
}

type DenomMinNotionalProposal struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Title             string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description       string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	DenomMinNotionals []*DenomMinNotional    `protobuf:"bytes,3,rep,name=denom_min_notionals,json=denomMinNotionals,proto3" json:"denom_min_notionals,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *DenomMinNotionalProposal) Reset() {
	*x = DenomMinNotionalProposal{}
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DenomMinNotionalProposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DenomMinNotionalProposal) ProtoMessage() {}

func (x *DenomMinNotionalProposal) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v2_proposal_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DenomMinNotionalProposal.ProtoReflect.Descriptor instead.
func (*DenomMinNotionalProposal) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v2_proposal_proto_rawDescGZIP(), []int{21}
}

func (x *DenomMinNotionalProposal) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DenomMinNotionalProposal) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DenomMinNotionalProposal) GetDenomMinNotionals() []*DenomMinNotional {
	if x != nil {
		return x.DenomMinNotionals
	}
	return nil
}

var File_injective_exchange_v2_proposal_proto protoreflect.FileDescriptor

const file_injective_exchange_v2_proposal_proto_rawDesc = "" +
	"\n" +
	"$injective/exchange/v2/proposal.proto\x12\x15injective.exchange.v2\x1a\x19cosmos_proto/cosmos.proto\x1a\x14gogoproto/gogo.proto\x1a\x11amino/amino.proto\x1a\x1ecosmos/base/v1beta1/coin.proto\x1a\x17cosmos/msg/v1/msg.proto\x1a.cosmos/distribution/v1beta1/distribution.proto\x1a$injective/exchange/v2/exchange.proto\x1a\"injective/exchange/v2/market.proto\x1a%injective/oracle/v1beta1/oracle.proto\"\x95\a\n" +
	"\x1dSpotMarketParamUpdateProposal\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12\x1b\n" +
	"\tmarket_id\x18\x03 \x01(\tR\bmarketId\x12I\n" +
	"\x0emaker_fee_rate\x18\x04 \x01(\tB#\xc8\xde\x1f\x01\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\fmakerFeeRate\x12I\n" +
	"\x0etaker_fee_rate\x18\x05 \x01(\tB#\xc8\xde\x1f\x01\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\ftakerFeeRate\x12X\n" +
	"\x16relayer_fee_share_rate\x18\x06 \x01(\tB#\xc8\xde\x1f\x01\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x13relayerFeeShareRate\x12R\n" +
	"\x13min_price_tick_size\x18\a \x01(\tB#\xc8\xde\x1f\x01\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x10minPriceTickSize\x12X\n" +
	"\x16min_quantity_tick_size\x18\b \x01(\tB#\xc8\xde\x1f\x01\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x13minQuantityTickSize\x12;\n" +
	"\x06status\x18\t \x01(\x0e2#.injective.exchange.v2.MarketStatusR\x06status\x12\x1c\n" +
	"\x06ticker\x18\n" +
	" \x01(\tB\x04\xc8\xde\x1f\x01R\x06ticker\x12F\n" +
	"\fmin_notional\x18\v \x01(\tB#\xc8\xde\x1f\x01\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\vminNotional\x12?\n" +
	"\n" +
	"admin_info\x18\f \x01(\v2 .injective.exchange.v2.AdminInfoR\tadminInfo\x12#\n" +
	"\rbase_decimals\x18\r \x01(\rR\fbaseDecimals\x12%\n" +
	"\x0equote_decimals\x18\x0e \x01(\rR\rquoteDecimals:Q\x88\xa0\x1f\x00\xe8\xa0\x1f\x00ʴ-\x1acosmos.gov.v1beta1.Content\x8a\xe7\xb0*&exchange/SpotMarketParamUpdateProposal\"\xc7\x01\n" +
	"\x16ExchangeEnableProposal\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12G\n" +
	"\fexchangeType\x18\x03 \x01(\x0e2#.injective.exchange.v2.ExchangeTypeR\fexchangeType:,\x88\xa0\x1f\x00\xe8\xa0\x1f\x00\x8a\xe7\xb0*\x1fexchange/ExchangeEnableProposal\"\xce\r\n" +
	"!BatchExchangeModificationProposal\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12\x80\x01\n" +
	"\"spot_market_param_update_proposals\x18\x03 \x03(\v24.injective.exchange.v2.SpotMarketParamUpdateProposalR\x1espotMarketParamUpdateProposals\x12\x92\x01\n" +
	"(derivative_market_param_update_proposals\x18\x04 \x03(\v2:.injective.exchange.v2.DerivativeMarketParamUpdateProposalR$derivativeMarketParamUpdateProposals\x12p\n" +
	"\x1cspot_market_launch_proposals\x18\x05 \x03(\v2/.injective.exchange.v2.SpotMarketLaunchProposalR\x19spotMarketLaunchProposals\x12\x7f\n" +
	"!perpetual_market_launch_proposals\x18\x06 \x03(\v24.injective.exchange.v2.PerpetualMarketLaunchProposalR\x1eperpetualMarketLaunchProposals\x12\x8c\x01\n" +
	"&expiry_futures_market_launch_proposals\x18\a \x03(\v28.injective.exchange.v2.ExpiryFuturesMarketLaunchProposalR\"expiryFuturesMarketLaunchProposals\x12\x90\x01\n" +
	"'trading_reward_campaign_update_proposal\x18\b \x01(\v2:.injective.exchange.v2.TradingRewardCampaignUpdateProposalR#tradingRewardCampaignUpdateProposal\x12\x8c\x01\n" +
	"&binary_options_market_launch_proposals\x18\t \x03(\v28.injective.exchange.v2.BinaryOptionsMarketLaunchProposalR\"binaryOptionsMarketLaunchProposals\x12\x8f\x01\n" +
	"%binary_options_param_update_proposals\x18\n" +
	" \x03(\v2=.injective.exchange.v2.BinaryOptionsMarketParamUpdateProposalR!binaryOptionsParamUpdateProposals\x12w\n" +
	"\x1edenom_decimals_update_proposal\x18\v \x01(\v22.injective.exchange.v2.UpdateDenomDecimalsProposalR\x1bdenomDecimalsUpdateProposal\x12^\n" +
	"\x15fee_discount_proposal\x18\f \x01(\v2*.injective.exchange.v2.FeeDiscountProposalR\x13feeDiscountProposal\x12\x82\x01\n" +
	"\"market_forced_settlement_proposals\x18\r \x03(\v25.injective.exchange.v2.MarketForcedSettlementProposalR\x1fmarketForcedSettlementProposals\x12n\n" +
	"\x1bdenom_min_notional_proposal\x18\x0e \x01(\v2/.injective.exchange.v2.DenomMinNotionalProposalR\x18denomMinNotionalProposal:U\x88\xa0\x1f\x00\xe8\xa0\x1f\x00ʴ-\x1acosmos.gov.v1beta1.Content\x8a\xe7\xb0**exchange/BatchExchangeModificationProposal\"\x91\x06\n" +
	"\x18SpotMarketLaunchProposal\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12\x16\n" +
	"\x06ticker\x18\x03 \x01(\tR\x06ticker\x12\x1d\n" +
	"\n" +
	"base_denom\x18\x04 \x01(\tR\tbaseDenom\x12\x1f\n" +
	"\vquote_denom\x18\x05 \x01(\tR\n" +
	"quoteDenom\x12R\n" +
	"\x13min_price_tick_size\x18\x06 \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x10minPriceTickSize\x12X\n" +
	"\x16min_quantity_tick_size\x18\a \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x13minQuantityTickSize\x12I\n" +
	"\x0emaker_fee_rate\x18\b \x01(\tB#\xc8\xde\x1f\x01\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\fmakerFeeRate\x12I\n" +
	"\x0etaker_fee_rate\x18\t \x01(\tB#\xc8\xde\x1f\x01\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\ftakerFeeRate\x12F\n" +
	"\fmin_notional\x18\n" +
	" \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\vminNotional\x12?\n" +
	"\n" +
	"admin_info\x18\v \x01(\v2 .injective.exchange.v2.AdminInfoR\tadminInfo\x12#\n" +
	"\rbase_decimals\x18\x0e \x01(\rR\fbaseDecimals\x12%\n" +
	"\x0equote_decimals\x18\x0f \x01(\rR\rquoteDecimals:L\x88\xa0\x1f\x00\xe8\xa0\x1f\x00ʴ-\x1acosmos.gov.v1beta1.Content\x8a\xe7\xb0*!exchange/SpotMarketLaunchProposal\"\xf6\b\n" +
	"\x1dPerpetualMarketLaunchProposal\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12\x16\n" +
	"\x06ticker\x18\x03 \x01(\tR\x06ticker\x12\x1f\n" +
	"\vquote_denom\x18\x04 \x01(\tR\n" +
	"quoteDenom\x12\x1f\n" +
	"\voracle_base\x18\x05 \x01(\tR\n" +
	"oracleBase\x12!\n" +
	"\foracle_quote\x18\x06 \x01(\tR\voracleQuote\x12.\n" +
	"\x13oracle_scale_factor\x18\a \x01(\rR\x11oracleScaleFactor\x12E\n" +
	"\voracle_type\x18\b \x01(\x0e2$.injective.oracle.v1beta1.OracleTypeR\n" +
	"oracleType\x12U\n" +
	"\x14initial_margin_ratio\x18\t \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x12initialMarginRatio\x12]\n" +
	"\x18maintenance_margin_ratio\x18\n" +
	" \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x16maintenanceMarginRatio\x12I\n" +
	"\x0emaker_fee_rate\x18\v \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\fmakerFeeRate\x12I\n" +
	"\x0etaker_fee_rate\x18\f \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\ftakerFeeRate\x12R\n" +
	"\x13min_price_tick_size\x18\r \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x10minPriceTickSize\x12X\n" +
	"\x16min_quantity_tick_size\x18\x0e \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x13minQuantityTickSize\x12F\n" +
	"\fmin_notional\x18\x0f \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\vminNotional\x12?\n" +
	"\n" +
	"admin_info\x18\x10 \x01(\v2 .injective.exchange.v2.AdminInfoR\tadminInfo\x12S\n" +
	"\x13reduce_margin_ratio\x18\x11 \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x11reduceMarginRatio:Q\x88\xa0\x1f\x00\xe8\xa0\x1f\x00ʴ-\x1acosmos.gov.v1beta1.Content\x8a\xe7\xb0*&exchange/PerpetualMarketLaunchProposal\"\xe5\a\n" +
	"!BinaryOptionsMarketLaunchProposal\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12\x16\n" +
	"\x06ticker\x18\x03 \x01(\tR\x06ticker\x12#\n" +
	"\roracle_symbol\x18\x04 \x01(\tR\foracleSymbol\x12'\n" +
	"\x0foracle_provider\x18\x05 \x01(\tR\x0eoracleProvider\x12E\n" +
	"\voracle_type\x18\x06 \x01(\x0e2$.injective.oracle.v1beta1.OracleTypeR\n" +
	"oracleType\x12.\n" +
	"\x13oracle_scale_factor\x18\a \x01(\rR\x11oracleScaleFactor\x121\n" +
	"\x14expiration_timestamp\x18\b \x01(\x03R\x13expirationTimestamp\x121\n" +
	"\x14settlement_timestamp\x18\t \x01(\x03R\x13settlementTimestamp\x12\x14\n" +
	"\x05admin\x18\n" +
	" \x01(\tR\x05admin\x12\x1f\n" +
	"\vquote_denom\x18\v \x01(\tR\n" +
	"quoteDenom\x12I\n" +
	"\x0emaker_fee_rate\x18\f \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\fmakerFeeRate\x12I\n" +
	"\x0etaker_fee_rate\x18\r \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\ftakerFeeRate\x12R\n" +
	"\x13min_price_tick_size\x18\x0e \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x10minPriceTickSize\x12X\n" +
	"\x16min_quantity_tick_size\x18\x0f \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x13minQuantityTickSize\x12F\n" +
	"\fmin_notional\x18\x10 \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\vminNotional\x12+\n" +
	"\x11admin_permissions\x18\x11 \x01(\rR\x10adminPermissions:U\x88\xa0\x1f\x00\xe8\xa0\x1f\x00ʴ-\x1acosmos.gov.v1beta1.Content\x8a\xe7\xb0**exchange/BinaryOptionsMarketLaunchProposal\"\x96\t\n" +
	"!ExpiryFuturesMarketLaunchProposal\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12\x16\n" +
	"\x06ticker\x18\x03 \x01(\tR\x06ticker\x12\x1f\n" +
	"\vquote_denom\x18\x04 \x01(\tR\n" +
	"quoteDenom\x12\x1f\n" +
	"\voracle_base\x18\x05 \x01(\tR\n" +
	"oracleBase\x12!\n" +
	"\foracle_quote\x18\x06 \x01(\tR\voracleQuote\x12.\n" +
	"\x13oracle_scale_factor\x18\a \x01(\rR\x11oracleScaleFactor\x12E\n" +
	"\voracle_type\x18\b \x01(\x0e2$.injective.oracle.v1beta1.OracleTypeR\n" +
	"oracleType\x12\x16\n" +
	"\x06expiry\x18\t \x01(\x03R\x06expiry\x12U\n" +
	"\x14initial_margin_ratio\x18\n" +
	" \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x12initialMarginRatio\x12]\n" +
	"\x18maintenance_margin_ratio\x18\v \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x16maintenanceMarginRatio\x12I\n" +
	"\x0emaker_fee_rate\x18\f \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\fmakerFeeRate\x12I\n" +
	"\x0etaker_fee_rate\x18\r \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\ftakerFeeRate\x12R\n" +
	"\x13min_price_tick_size\x18\x0e \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x10minPriceTickSize\x12X\n" +
	"\x16min_quantity_tick_size\x18\x0f \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x13minQuantityTickSize\x12F\n" +
	"\fmin_notional\x18\x10 \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\vminNotional\x12?\n" +
	"\n" +
	"admin_info\x18\x11 \x01(\v2 .injective.exchange.v2.AdminInfoR\tadminInfo\x12S\n" +
	"\x13reduce_margin_ratio\x18\x12 \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x11reduceMarginRatio:U\x88\xa0\x1f\x00\xe8\xa0\x1f\x00ʴ-\x1acosmos.gov.v1beta1.Content\x8a\xe7\xb0**exchange/ExpiryFuturesMarketLaunchProposal\"\xd8\n" +
	"\n" +
	"#DerivativeMarketParamUpdateProposal\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12\x1b\n" +
	"\tmarket_id\x18\x03 \x01(\tR\bmarketId\x12U\n" +
	"\x14initial_margin_ratio\x18\x04 \x01(\tB#\xc8\xde\x1f\x01\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x12initialMarginRatio\x12]\n" +
	"\x18maintenance_margin_ratio\x18\x05 \x01(\tB#\xc8\xde\x1f\x01\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x16maintenanceMarginRatio\x12I\n" +
	"\x0emaker_fee_rate\x18\x06 \x01(\tB#\xc8\xde\x1f\x01\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\fmakerFeeRate\x12I\n" +
	"\x0etaker_fee_rate\x18\a \x01(\tB#\xc8\xde\x1f\x01\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\ftakerFeeRate\x12X\n" +
	"\x16relayer_fee_share_rate\x18\b \x01(\tB#\xc8\xde\x1f\x01\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x13relayerFeeShareRate\x12R\n" +
	"\x13min_price_tick_size\x18\t \x01(\tB#\xc8\xde\x1f\x01\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x10minPriceTickSize\x12X\n" +
	"\x16min_quantity_tick_size\x18\n" +
	" \x01(\tB#\xc8\xde\x1f\x01\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x13minQuantityTickSize\x12S\n" +
	"\x12HourlyInterestRate\x18\v \x01(\tB#\xc8\xde\x1f\x01\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x12HourlyInterestRate\x12W\n" +
	"\x14HourlyFundingRateCap\x18\f \x01(\tB#\xc8\xde\x1f\x01\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x14HourlyFundingRateCap\x12;\n" +
	"\x06status\x18\r \x01(\x0e2#.injective.exchange.v2.MarketStatusR\x06status\x12H\n" +
	"\roracle_params\x18\x0e \x01(\v2#.injective.exchange.v2.OracleParamsR\foracleParams\x12\x1c\n" +
	"\x06ticker\x18\x0f \x01(\tB\x04\xc8\xde\x1f\x01R\x06ticker\x12F\n" +
	"\fmin_notional\x18\x10 \x01(\tB#\xc8\xde\x1f\x01\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\vminNotional\x12?\n" +
	"\n" +
	"admin_info\x18\x11 \x01(\v2 .injective.exchange.v2.AdminInfoR\tadminInfo\x12S\n" +
	"\x13reduce_margin_ratio\x18\x12 \x01(\tB#\xc8\xde\x1f\x01\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x11reduceMarginRatio:W\x88\xa0\x1f\x00\xe8\xa0\x1f\x00ʴ-\x1acosmos.gov.v1beta1.Content\x8a\xe7\xb0*,exchange/DerivativeMarketParamUpdateProposal\"N\n" +
	"\tAdminInfo\x12\x14\n" +
	"\x05admin\x18\x01 \x01(\tR\x05admin\x12+\n" +
	"\x11admin_permissions\x18\x02 \x01(\rR\x10adminPermissions\"\x99\x02\n" +
	"\x1eMarketForcedSettlementProposal\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12\x1b\n" +
	"\tmarket_id\x18\x03 \x01(\tR\bmarketId\x12N\n" +
	"\x10settlement_price\x18\x04 \x01(\tB#\xc8\xde\x1f\x01\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x0fsettlementPrice:R\x88\xa0\x1f\x00\xe8\xa0\x1f\x00ʴ-\x1acosmos.gov.v1beta1.Content\x8a\xe7\xb0*'exchange/MarketForcedSettlementProposal\"\xf3\x01\n" +
	"\x1bUpdateDenomDecimalsProposal\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12K\n" +
	"\x0edenom_decimals\x18\x03 \x03(\v2$.injective.exchange.v2.DenomDecimalsR\rdenomDecimals:O\x88\xa0\x1f\x00\xe8\xa0\x1f\x00ʴ-\x1acosmos.gov.v1beta1.Content\x8a\xe7\xb0*$exchange/UpdateDenomDecimalsProposal\"\xb8\b\n" +
	"&BinaryOptionsMarketParamUpdateProposal\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12\x1b\n" +
	"\tmarket_id\x18\x03 \x01(\tR\bmarketId\x12I\n" +
	"\x0emaker_fee_rate\x18\x04 \x01(\tB#\xc8\xde\x1f\x01\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\fmakerFeeRate\x12I\n" +
	"\x0etaker_fee_rate\x18\x05 \x01(\tB#\xc8\xde\x1f\x01\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\ftakerFeeRate\x12X\n" +
	"\x16relayer_fee_share_rate\x18\x06 \x01(\tB#\xc8\xde\x1f\x01\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x13relayerFeeShareRate\x12R\n" +
	"\x13min_price_tick_size\x18\a \x01(\tB#\xc8\xde\x1f\x01\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x10minPriceTickSize\x12X\n" +
	"\x16min_quantity_tick_size\x18\b \x01(\tB#\xc8\xde\x1f\x01\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x13minQuantityTickSize\x121\n" +
	"\x14expiration_timestamp\x18\t \x01(\x03R\x13expirationTimestamp\x121\n" +
	"\x14settlement_timestamp\x18\n" +
	" \x01(\x03R\x13settlementTimestamp\x12N\n" +
	"\x10settlement_price\x18\v \x01(\tB#\xc8\xde\x1f\x01\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x0fsettlementPrice\x12\x14\n" +
	"\x05admin\x18\f \x01(\tR\x05admin\x12;\n" +
	"\x06status\x18\r \x01(\x0e2#.injective.exchange.v2.MarketStatusR\x06status\x12P\n" +
	"\roracle_params\x18\x0e \x01(\v2+.injective.exchange.v2.ProviderOracleParamsR\foracleParams\x12\x1c\n" +
	"\x06ticker\x18\x0f \x01(\tB\x04\xc8\xde\x1f\x01R\x06ticker\x12F\n" +
	"\fmin_notional\x18\x10 \x01(\tB#\xc8\xde\x1f\x01\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\vminNotional:Z\x88\xa0\x1f\x00\xe8\xa0\x1f\x00ʴ-\x1acosmos.gov.v1beta1.Content\x8a\xe7\xb0*/exchange/BinaryOptionsMarketParamUpdateProposal\"\xc1\x01\n" +
	"\x14ProviderOracleParams\x12\x16\n" +
	"\x06symbol\x18\x01 \x01(\tR\x06symbol\x12\x1a\n" +
	"\bprovider\x18\x02 \x01(\tR\bprovider\x12.\n" +
	"\x13oracle_scale_factor\x18\x03 \x01(\rR\x11oracleScaleFactor\x12E\n" +
	"\voracle_type\x18\x04 \x01(\x0e2$.injective.oracle.v1beta1.OracleTypeR\n" +
	"oracleType\"\xc9\x01\n" +
	"\fOracleParams\x12\x1f\n" +
	"\voracle_base\x18\x01 \x01(\tR\n" +
	"oracleBase\x12!\n" +
	"\foracle_quote\x18\x02 \x01(\tR\voracleQuote\x12.\n" +
	"\x13oracle_scale_factor\x18\x03 \x01(\rR\x11oracleScaleFactor\x12E\n" +
	"\voracle_type\x18\x04 \x01(\x0e2$.injective.oracle.v1beta1.OracleTypeR\n" +
	"oracleType\"\xec\x02\n" +
	"#TradingRewardCampaignLaunchProposal\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12U\n" +
	"\rcampaign_info\x18\x03 \x01(\v20.injective.exchange.v2.TradingRewardCampaignInfoR\fcampaignInfo\x12]\n" +
	"\x15campaign_reward_pools\x18\x04 \x03(\v2).injective.exchange.v2.CampaignRewardPoolR\x13campaignRewardPools:W\x88\xa0\x1f\x00\xe8\xa0\x1f\x00ʴ-\x1acosmos.gov.v1beta1.Content\x8a\xe7\xb0*,exchange/TradingRewardCampaignLaunchProposal\"\xed\x03\n" +
	"#TradingRewardCampaignUpdateProposal\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12U\n" +
	"\rcampaign_info\x18\x03 \x01(\v20.injective.exchange.v2.TradingRewardCampaignInfoR\fcampaignInfo\x12p\n" +
	"\x1fcampaign_reward_pools_additions\x18\x04 \x03(\v2).injective.exchange.v2.CampaignRewardPoolR\x1ccampaignRewardPoolsAdditions\x12l\n" +
	"\x1dcampaign_reward_pools_updates\x18\x05 \x03(\v2).injective.exchange.v2.CampaignRewardPoolR\x1acampaignRewardPoolsUpdates:W\x88\xa0\x1f\x00\xe8\xa0\x1f\x00ʴ-\x1acosmos.gov.v1beta1.Content\x8a\xe7\xb0*,exchange/TradingRewardCampaignUpdateProposal\"\x80\x01\n" +
	"\x11RewardPointUpdate\x12'\n" +
	"\x0faccount_address\x18\x01 \x01(\tR\x0eaccountAddress\x12B\n" +
	"\n" +
	"new_points\x18\f \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\tnewPoints\"\xd2\x02\n" +
	"(TradingRewardPendingPointsUpdateProposal\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x124\n" +
	"\x16pending_pool_timestamp\x18\x03 \x01(\x03R\x14pendingPoolTimestamp\x12Z\n" +
	"\x14reward_point_updates\x18\x04 \x03(\v2(.injective.exchange.v2.RewardPointUpdateR\x12rewardPointUpdates:\\\x88\xa0\x1f\x00\xe8\xa0\x1f\x00ʴ-\x1acosmos.gov.v1beta1.Content\x8a\xe7\xb0*1exchange/TradingRewardPendingPointsUpdateProposal\"\xde\x01\n" +
	"\x13FeeDiscountProposal\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12F\n" +
	"\bschedule\x18\x03 \x01(\v2*.injective.exchange.v2.FeeDiscountScheduleR\bschedule:G\x88\xa0\x1f\x00\xe8\xa0\x1f\x00ʴ-\x1acosmos.gov.v1beta1.Content\x8a\xe7\xb0*\x1cexchange/FeeDiscountProposal\"\x85\x02\n" +
	"\x1fBatchCommunityPoolSpendProposal\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12U\n" +
	"\tproposals\x18\x03 \x03(\v27.cosmos.distribution.v1beta1.CommunityPoolSpendProposalR\tproposals:S\x88\xa0\x1f\x00\xe8\xa0\x1f\x00ʴ-\x1acosmos.gov.v1beta1.Content\x8a\xe7\xb0*(exchange/BatchCommunityPoolSpendProposal\"\xae\x02\n" +
	".AtomicMarketOrderFeeMultiplierScheduleProposal\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12`\n" +
	"\x16market_fee_multipliers\x18\x03 \x03(\v2*.injective.exchange.v2.MarketFeeMultiplierR\x14marketFeeMultipliers:b\x88\xa0\x1f\x00\xe8\xa0\x1f\x00ʴ-\x1acosmos.gov.v1beta1.Content\x8a\xe7\xb0*7exchange/AtomicMarketOrderFeeMultiplierScheduleProposal\"\xf9\x01\n" +
	"\x18DenomMinNotionalProposal\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12W\n" +
	"\x13denom_min_notionals\x18\x03 \x03(\v2'.injective.exchange.v2.DenomMinNotionalR\x11denomMinNotionals:L\x88\xa0\x1f\x00\xe8\xa0\x1f\x00ʴ-\x1acosmos.gov.v1beta1.Content\x8a\xe7\xb0*!exchange/DenomMinNotionalProposal*x\n" +
	"\fExchangeType\x122\n" +
	"\x14EXCHANGE_UNSPECIFIED\x10\x00\x1a\x18\x8a\x9d \x14EXCHANGE_UNSPECIFIED\x12\x12\n" +
	"\x04SPOT\x10\x01\x1a\b\x8a\x9d \x04SPOT\x12 \n" +
	"\vDERIVATIVES\x10\x02\x1a\x0f\x8a\x9d \vDERIVATIVESBSZQgithub.com/InjectiveLabs/injective-core/injective-chain/modules/exchange/types/v2b\x06proto3"

var (
	file_injective_exchange_v2_proposal_proto_rawDescOnce sync.Once
	file_injective_exchange_v2_proposal_proto_rawDescData []byte
)

func file_injective_exchange_v2_proposal_proto_rawDescGZIP() []byte {
	file_injective_exchange_v2_proposal_proto_rawDescOnce.Do(func() {
		file_injective_exchange_v2_proposal_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_injective_exchange_v2_proposal_proto_rawDesc), len(file_injective_exchange_v2_proposal_proto_rawDesc)))
	})
	return file_injective_exchange_v2_proposal_proto_rawDescData
}

var file_injective_exchange_v2_proposal_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_injective_exchange_v2_proposal_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_injective_exchange_v2_proposal_proto_goTypes = []any{
	(ExchangeType)(0),                                      // 0: injective.exchange.v2.ExchangeType
	(*SpotMarketParamUpdateProposal)(nil),                  // 1: injective.exchange.v2.SpotMarketParamUpdateProposal
	(*ExchangeEnableProposal)(nil),                         // 2: injective.exchange.v2.ExchangeEnableProposal
	(*BatchExchangeModificationProposal)(nil),              // 3: injective.exchange.v2.BatchExchangeModificationProposal
	(*SpotMarketLaunchProposal)(nil),                       // 4: injective.exchange.v2.SpotMarketLaunchProposal
	(*PerpetualMarketLaunchProposal)(nil),                  // 5: injective.exchange.v2.PerpetualMarketLaunchProposal
	(*BinaryOptionsMarketLaunchProposal)(nil),              // 6: injective.exchange.v2.BinaryOptionsMarketLaunchProposal
	(*ExpiryFuturesMarketLaunchProposal)(nil),              // 7: injective.exchange.v2.ExpiryFuturesMarketLaunchProposal
	(*DerivativeMarketParamUpdateProposal)(nil),            // 8: injective.exchange.v2.DerivativeMarketParamUpdateProposal
	(*AdminInfo)(nil),                                      // 9: injective.exchange.v2.AdminInfo
	(*MarketForcedSettlementProposal)(nil),                 // 10: injective.exchange.v2.MarketForcedSettlementProposal
	(*UpdateDenomDecimalsProposal)(nil),                    // 11: injective.exchange.v2.UpdateDenomDecimalsProposal
	(*BinaryOptionsMarketParamUpdateProposal)(nil),         // 12: injective.exchange.v2.BinaryOptionsMarketParamUpdateProposal
	(*ProviderOracleParams)(nil),                           // 13: injective.exchange.v2.ProviderOracleParams
	(*OracleParams)(nil),                                   // 14: injective.exchange.v2.OracleParams
	(*TradingRewardCampaignLaunchProposal)(nil),            // 15: injective.exchange.v2.TradingRewardCampaignLaunchProposal
	(*TradingRewardCampaignUpdateProposal)(nil),            // 16: injective.exchange.v2.TradingRewardCampaignUpdateProposal
	(*RewardPointUpdate)(nil),                              // 17: injective.exchange.v2.RewardPointUpdate
	(*TradingRewardPendingPointsUpdateProposal)(nil),       // 18: injective.exchange.v2.TradingRewardPendingPointsUpdateProposal
	(*FeeDiscountProposal)(nil),                            // 19: injective.exchange.v2.FeeDiscountProposal
	(*BatchCommunityPoolSpendProposal)(nil),                // 20: injective.exchange.v2.BatchCommunityPoolSpendProposal
	(*AtomicMarketOrderFeeMultiplierScheduleProposal)(nil), // 21: injective.exchange.v2.AtomicMarketOrderFeeMultiplierScheduleProposal
	(*DenomMinNotionalProposal)(nil),                       // 22: injective.exchange.v2.DenomMinNotionalProposal
	(MarketStatus)(0),                                      // 23: injective.exchange.v2.MarketStatus
	(types.OracleType)(0),                                  // 24: injective.oracle.v1beta1.OracleType
	(*DenomDecimals)(nil),                                  // 25: injective.exchange.v2.DenomDecimals
	(*TradingRewardCampaignInfo)(nil),                      // 26: injective.exchange.v2.TradingRewardCampaignInfo
	(*CampaignRewardPool)(nil),                             // 27: injective.exchange.v2.CampaignRewardPool
	(*FeeDiscountSchedule)(nil),                            // 28: injective.exchange.v2.FeeDiscountSchedule
	(*types1.CommunityPoolSpendProposal)(nil),              // 29: cosmos.distribution.v1beta1.CommunityPoolSpendProposal
	(*MarketFeeMultiplier)(nil),                            // 30: injective.exchange.v2.MarketFeeMultiplier
	(*DenomMinNotional)(nil),                               // 31: injective.exchange.v2.DenomMinNotional
}
var file_injective_exchange_v2_proposal_proto_depIdxs = []int32{
	23, // 0: injective.exchange.v2.SpotMarketParamUpdateProposal.status:type_name -> injective.exchange.v2.MarketStatus
	9,  // 1: injective.exchange.v2.SpotMarketParamUpdateProposal.admin_info:type_name -> injective.exchange.v2.AdminInfo
	0,  // 2: injective.exchange.v2.ExchangeEnableProposal.exchangeType:type_name -> injective.exchange.v2.ExchangeType
	1,  // 3: injective.exchange.v2.BatchExchangeModificationProposal.spot_market_param_update_proposals:type_name -> injective.exchange.v2.SpotMarketParamUpdateProposal
	8,  // 4: injective.exchange.v2.BatchExchangeModificationProposal.derivative_market_param_update_proposals:type_name -> injective.exchange.v2.DerivativeMarketParamUpdateProposal
	4,  // 5: injective.exchange.v2.BatchExchangeModificationProposal.spot_market_launch_proposals:type_name -> injective.exchange.v2.SpotMarketLaunchProposal
	5,  // 6: injective.exchange.v2.BatchExchangeModificationProposal.perpetual_market_launch_proposals:type_name -> injective.exchange.v2.PerpetualMarketLaunchProposal
	7,  // 7: injective.exchange.v2.BatchExchangeModificationProposal.expiry_futures_market_launch_proposals:type_name -> injective.exchange.v2.ExpiryFuturesMarketLaunchProposal
	16, // 8: injective.exchange.v2.BatchExchangeModificationProposal.trading_reward_campaign_update_proposal:type_name -> injective.exchange.v2.TradingRewardCampaignUpdateProposal
	6,  // 9: injective.exchange.v2.BatchExchangeModificationProposal.binary_options_market_launch_proposals:type_name -> injective.exchange.v2.BinaryOptionsMarketLaunchProposal
	12, // 10: injective.exchange.v2.BatchExchangeModificationProposal.binary_options_param_update_proposals:type_name -> injective.exchange.v2.BinaryOptionsMarketParamUpdateProposal
	11, // 11: injective.exchange.v2.BatchExchangeModificationProposal.denom_decimals_update_proposal:type_name -> injective.exchange.v2.UpdateDenomDecimalsProposal
	19, // 12: injective.exchange.v2.BatchExchangeModificationProposal.fee_discount_proposal:type_name -> injective.exchange.v2.FeeDiscountProposal
	10, // 13: injective.exchange.v2.BatchExchangeModificationProposal.market_forced_settlement_proposals:type_name -> injective.exchange.v2.MarketForcedSettlementProposal
	22, // 14: injective.exchange.v2.BatchExchangeModificationProposal.denom_min_notional_proposal:type_name -> injective.exchange.v2.DenomMinNotionalProposal
	9,  // 15: injective.exchange.v2.SpotMarketLaunchProposal.admin_info:type_name -> injective.exchange.v2.AdminInfo
	24, // 16: injective.exchange.v2.PerpetualMarketLaunchProposal.oracle_type:type_name -> injective.oracle.v1beta1.OracleType
	9,  // 17: injective.exchange.v2.PerpetualMarketLaunchProposal.admin_info:type_name -> injective.exchange.v2.AdminInfo
	24, // 18: injective.exchange.v2.BinaryOptionsMarketLaunchProposal.oracle_type:type_name -> injective.oracle.v1beta1.OracleType
	24, // 19: injective.exchange.v2.ExpiryFuturesMarketLaunchProposal.oracle_type:type_name -> injective.oracle.v1beta1.OracleType
	9,  // 20: injective.exchange.v2.ExpiryFuturesMarketLaunchProposal.admin_info:type_name -> injective.exchange.v2.AdminInfo
	23, // 21: injective.exchange.v2.DerivativeMarketParamUpdateProposal.status:type_name -> injective.exchange.v2.MarketStatus
	14, // 22: injective.exchange.v2.DerivativeMarketParamUpdateProposal.oracle_params:type_name -> injective.exchange.v2.OracleParams
	9,  // 23: injective.exchange.v2.DerivativeMarketParamUpdateProposal.admin_info:type_name -> injective.exchange.v2.AdminInfo
	25, // 24: injective.exchange.v2.UpdateDenomDecimalsProposal.denom_decimals:type_name -> injective.exchange.v2.DenomDecimals
	23, // 25: injective.exchange.v2.BinaryOptionsMarketParamUpdateProposal.status:type_name -> injective.exchange.v2.MarketStatus
	13, // 26: injective.exchange.v2.BinaryOptionsMarketParamUpdateProposal.oracle_params:type_name -> injective.exchange.v2.ProviderOracleParams
	24, // 27: injective.exchange.v2.ProviderOracleParams.oracle_type:type_name -> injective.oracle.v1beta1.OracleType
	24, // 28: injective.exchange.v2.OracleParams.oracle_type:type_name -> injective.oracle.v1beta1.OracleType
	26, // 29: injective.exchange.v2.TradingRewardCampaignLaunchProposal.campaign_info:type_name -> injective.exchange.v2.TradingRewardCampaignInfo
	27, // 30: injective.exchange.v2.TradingRewardCampaignLaunchProposal.campaign_reward_pools:type_name -> injective.exchange.v2.CampaignRewardPool
	26, // 31: injective.exchange.v2.TradingRewardCampaignUpdateProposal.campaign_info:type_name -> injective.exchange.v2.TradingRewardCampaignInfo
	27, // 32: injective.exchange.v2.TradingRewardCampaignUpdateProposal.campaign_reward_pools_additions:type_name -> injective.exchange.v2.CampaignRewardPool
	27, // 33: injective.exchange.v2.TradingRewardCampaignUpdateProposal.campaign_reward_pools_updates:type_name -> injective.exchange.v2.CampaignRewardPool
	17, // 34: injective.exchange.v2.TradingRewardPendingPointsUpdateProposal.reward_point_updates:type_name -> injective.exchange.v2.RewardPointUpdate
	28, // 35: injective.exchange.v2.FeeDiscountProposal.schedule:type_name -> injective.exchange.v2.FeeDiscountSchedule
	29, // 36: injective.exchange.v2.BatchCommunityPoolSpendProposal.proposals:type_name -> cosmos.distribution.v1beta1.CommunityPoolSpendProposal
	30, // 37: injective.exchange.v2.AtomicMarketOrderFeeMultiplierScheduleProposal.market_fee_multipliers:type_name -> injective.exchange.v2.MarketFeeMultiplier
	31, // 38: injective.exchange.v2.DenomMinNotionalProposal.denom_min_notionals:type_name -> injective.exchange.v2.DenomMinNotional
	39, // [39:39] is the sub-list for method output_type
	39, // [39:39] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_injective_exchange_v2_proposal_proto_init() }
func file_injective_exchange_v2_proposal_proto_init() {
	if File_injective_exchange_v2_proposal_proto != nil {
		return
	}
	file_injective_exchange_v2_exchange_proto_init()
	file_injective_exchange_v2_market_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_injective_exchange_v2_proposal_proto_rawDesc), len(file_injective_exchange_v2_proposal_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_injective_exchange_v2_proposal_proto_goTypes,
		DependencyIndexes: file_injective_exchange_v2_proposal_proto_depIdxs,
		EnumInfos:         file_injective_exchange_v2_proposal_proto_enumTypes,
		MessageInfos:      file_injective_exchange_v2_proposal_proto_msgTypes,
	}.Build()
	File_injective_exchange_v2_proposal_proto = out.File
	file_injective_exchange_v2_proposal_proto_goTypes = nil
	file_injective_exchange_v2_proposal_proto_depIdxs = nil
}
