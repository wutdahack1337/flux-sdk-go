// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: injective/oracle/v1beta1/oracle.proto

package types

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OracleType int32

const (
	OracleType_Unspecified OracleType = 0
	OracleType_Band        OracleType = 1
	OracleType_PriceFeed   OracleType = 2
	OracleType_Coinbase    OracleType = 3
	OracleType_Chainlink   OracleType = 4
	OracleType_Razor       OracleType = 5
	OracleType_Dia         OracleType = 6
	OracleType_API3        OracleType = 7
	OracleType_Uma         OracleType = 8
	OracleType_Pyth        OracleType = 9
	OracleType_BandIBC     OracleType = 10
	OracleType_Provider    OracleType = 11
	OracleType_Stork       OracleType = 12
)

// Enum value maps for OracleType.
var (
	OracleType_name = map[int32]string{
		0:  "Unspecified",
		1:  "Band",
		2:  "PriceFeed",
		3:  "Coinbase",
		4:  "Chainlink",
		5:  "Razor",
		6:  "Dia",
		7:  "API3",
		8:  "Uma",
		9:  "Pyth",
		10: "BandIBC",
		11: "Provider",
		12: "Stork",
	}
	OracleType_value = map[string]int32{
		"Unspecified": 0,
		"Band":        1,
		"PriceFeed":   2,
		"Coinbase":    3,
		"Chainlink":   4,
		"Razor":       5,
		"Dia":         6,
		"API3":        7,
		"Uma":         8,
		"Pyth":        9,
		"BandIBC":     10,
		"Provider":    11,
		"Stork":       12,
	}
)

func (x OracleType) Enum() *OracleType {
	p := new(OracleType)
	*p = x
	return p
}

func (x OracleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OracleType) Descriptor() protoreflect.EnumDescriptor {
	return file_injective_oracle_v1beta1_oracle_proto_enumTypes[0].Descriptor()
}

func (OracleType) Type() protoreflect.EnumType {
	return &file_injective_oracle_v1beta1_oracle_proto_enumTypes[0]
}

func (x OracleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OracleType.Descriptor instead.
func (OracleType) EnumDescriptor() ([]byte, []int) {
	return file_injective_oracle_v1beta1_oracle_proto_rawDescGZIP(), []int{0}
}

type Params struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PythContract  string                 `protobuf:"bytes,1,opt,name=pyth_contract,json=pythContract,proto3" json:"pyth_contract,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Params) Reset() {
	*x = Params{}
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

func (x *Params) ProtoReflect() protoreflect.Message {
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_injective_oracle_v1beta1_oracle_proto_rawDescGZIP(), []int{0}
}

func (x *Params) GetPythContract() string {
	if x != nil {
		return x.PythContract
	}
	return ""
}

type OracleInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Symbol        string                 `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	OracleType    OracleType             `protobuf:"varint,2,opt,name=oracle_type,json=oracleType,proto3,enum=injective.oracle.v1beta1.OracleType" json:"oracle_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OracleInfo) Reset() {
	*x = OracleInfo{}
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OracleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OracleInfo) ProtoMessage() {}

func (x *OracleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OracleInfo.ProtoReflect.Descriptor instead.
func (*OracleInfo) Descriptor() ([]byte, []int) {
	return file_injective_oracle_v1beta1_oracle_proto_rawDescGZIP(), []int{1}
}

func (x *OracleInfo) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *OracleInfo) GetOracleType() OracleType {
	if x != nil {
		return x.OracleType
	}
	return OracleType_Unspecified
}

type ChainlinkPriceState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FeedId        string                 `protobuf:"bytes,1,opt,name=feed_id,json=feedId,proto3" json:"feed_id,omitempty"`
	Answer        string                 `protobuf:"bytes,2,opt,name=answer,proto3" json:"answer,omitempty"`
	Timestamp     uint64                 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	PriceState    *PriceState            `protobuf:"bytes,4,opt,name=price_state,json=priceState,proto3" json:"price_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChainlinkPriceState) Reset() {
	*x = ChainlinkPriceState{}
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChainlinkPriceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainlinkPriceState) ProtoMessage() {}

func (x *ChainlinkPriceState) ProtoReflect() protoreflect.Message {
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainlinkPriceState.ProtoReflect.Descriptor instead.
func (*ChainlinkPriceState) Descriptor() ([]byte, []int) {
	return file_injective_oracle_v1beta1_oracle_proto_rawDescGZIP(), []int{2}
}

func (x *ChainlinkPriceState) GetFeedId() string {
	if x != nil {
		return x.FeedId
	}
	return ""
}

func (x *ChainlinkPriceState) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *ChainlinkPriceState) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ChainlinkPriceState) GetPriceState() *PriceState {
	if x != nil {
		return x.PriceState
	}
	return nil
}

type BandPriceState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Symbol        string                 `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Rate          string                 `protobuf:"bytes,2,opt,name=rate,proto3" json:"rate,omitempty"`
	ResolveTime   uint64                 `protobuf:"varint,3,opt,name=resolve_time,json=resolveTime,proto3" json:"resolve_time,omitempty"`
	Request_ID    uint64                 `protobuf:"varint,4,opt,name=request_ID,json=requestID,proto3" json:"request_ID,omitempty"`
	PriceState    *PriceState            `protobuf:"bytes,5,opt,name=price_state,json=priceState,proto3" json:"price_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BandPriceState) Reset() {
	*x = BandPriceState{}
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BandPriceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BandPriceState) ProtoMessage() {}

func (x *BandPriceState) ProtoReflect() protoreflect.Message {
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BandPriceState.ProtoReflect.Descriptor instead.
func (*BandPriceState) Descriptor() ([]byte, []int) {
	return file_injective_oracle_v1beta1_oracle_proto_rawDescGZIP(), []int{3}
}

func (x *BandPriceState) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *BandPriceState) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

func (x *BandPriceState) GetResolveTime() uint64 {
	if x != nil {
		return x.ResolveTime
	}
	return 0
}

func (x *BandPriceState) GetRequest_ID() uint64 {
	if x != nil {
		return x.Request_ID
	}
	return 0
}

func (x *BandPriceState) GetPriceState() *PriceState {
	if x != nil {
		return x.PriceState
	}
	return nil
}

type PriceFeedState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          string                 `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Quote         string                 `protobuf:"bytes,2,opt,name=quote,proto3" json:"quote,omitempty"`
	PriceState    *PriceState            `protobuf:"bytes,3,opt,name=price_state,json=priceState,proto3" json:"price_state,omitempty"`
	Relayers      []string               `protobuf:"bytes,4,rep,name=relayers,proto3" json:"relayers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PriceFeedState) Reset() {
	*x = PriceFeedState{}
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PriceFeedState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceFeedState) ProtoMessage() {}

func (x *PriceFeedState) ProtoReflect() protoreflect.Message {
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceFeedState.ProtoReflect.Descriptor instead.
func (*PriceFeedState) Descriptor() ([]byte, []int) {
	return file_injective_oracle_v1beta1_oracle_proto_rawDescGZIP(), []int{4}
}

func (x *PriceFeedState) GetBase() string {
	if x != nil {
		return x.Base
	}
	return ""
}

func (x *PriceFeedState) GetQuote() string {
	if x != nil {
		return x.Quote
	}
	return ""
}

func (x *PriceFeedState) GetPriceState() *PriceState {
	if x != nil {
		return x.PriceState
	}
	return nil
}

func (x *PriceFeedState) GetRelayers() []string {
	if x != nil {
		return x.Relayers
	}
	return nil
}

type ProviderInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Provider      string                 `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`
	Relayers      []string               `protobuf:"bytes,2,rep,name=relayers,proto3" json:"relayers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProviderInfo) Reset() {
	*x = ProviderInfo{}
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProviderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderInfo) ProtoMessage() {}

func (x *ProviderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderInfo.ProtoReflect.Descriptor instead.
func (*ProviderInfo) Descriptor() ([]byte, []int) {
	return file_injective_oracle_v1beta1_oracle_proto_rawDescGZIP(), []int{5}
}

func (x *ProviderInfo) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ProviderInfo) GetRelayers() []string {
	if x != nil {
		return x.Relayers
	}
	return nil
}

type ProviderState struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ProviderInfo        *ProviderInfo          `protobuf:"bytes,1,opt,name=provider_info,json=providerInfo,proto3" json:"provider_info,omitempty"`
	ProviderPriceStates []*ProviderPriceState  `protobuf:"bytes,2,rep,name=provider_price_states,json=providerPriceStates,proto3" json:"provider_price_states,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ProviderState) Reset() {
	*x = ProviderState{}
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProviderState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderState) ProtoMessage() {}

func (x *ProviderState) ProtoReflect() protoreflect.Message {
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderState.ProtoReflect.Descriptor instead.
func (*ProviderState) Descriptor() ([]byte, []int) {
	return file_injective_oracle_v1beta1_oracle_proto_rawDescGZIP(), []int{6}
}

func (x *ProviderState) GetProviderInfo() *ProviderInfo {
	if x != nil {
		return x.ProviderInfo
	}
	return nil
}

func (x *ProviderState) GetProviderPriceStates() []*ProviderPriceState {
	if x != nil {
		return x.ProviderPriceStates
	}
	return nil
}

type ProviderPriceState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Symbol        string                 `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	State         *PriceState            `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProviderPriceState) Reset() {
	*x = ProviderPriceState{}
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProviderPriceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderPriceState) ProtoMessage() {}

func (x *ProviderPriceState) ProtoReflect() protoreflect.Message {
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderPriceState.ProtoReflect.Descriptor instead.
func (*ProviderPriceState) Descriptor() ([]byte, []int) {
	return file_injective_oracle_v1beta1_oracle_proto_rawDescGZIP(), []int{7}
}

func (x *ProviderPriceState) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *ProviderPriceState) GetState() *PriceState {
	if x != nil {
		return x.State
	}
	return nil
}

type PriceFeedInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Base          string                 `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Quote         string                 `protobuf:"bytes,2,opt,name=quote,proto3" json:"quote,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PriceFeedInfo) Reset() {
	*x = PriceFeedInfo{}
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PriceFeedInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceFeedInfo) ProtoMessage() {}

func (x *PriceFeedInfo) ProtoReflect() protoreflect.Message {
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceFeedInfo.ProtoReflect.Descriptor instead.
func (*PriceFeedInfo) Descriptor() ([]byte, []int) {
	return file_injective_oracle_v1beta1_oracle_proto_rawDescGZIP(), []int{8}
}

func (x *PriceFeedInfo) GetBase() string {
	if x != nil {
		return x.Base
	}
	return ""
}

func (x *PriceFeedInfo) GetQuote() string {
	if x != nil {
		return x.Quote
	}
	return ""
}

type PriceFeedPrice struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Price         string                 `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PriceFeedPrice) Reset() {
	*x = PriceFeedPrice{}
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PriceFeedPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceFeedPrice) ProtoMessage() {}

func (x *PriceFeedPrice) ProtoReflect() protoreflect.Message {
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceFeedPrice.ProtoReflect.Descriptor instead.
func (*PriceFeedPrice) Descriptor() ([]byte, []int) {
	return file_injective_oracle_v1beta1_oracle_proto_rawDescGZIP(), []int{9}
}

func (x *PriceFeedPrice) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

type CoinbasePriceState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// kind should always be "prices"
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// timestamp of the when the price was signed by coinbase
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// the symbol of the price, e.g. BTC
	Key string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// the value of the price scaled by 1e6
	Value uint64 `protobuf:"varint,4,opt,name=value,proto3" json:"value,omitempty"`
	// the price state
	PriceState    *PriceState `protobuf:"bytes,5,opt,name=price_state,json=priceState,proto3" json:"price_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CoinbasePriceState) Reset() {
	*x = CoinbasePriceState{}
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoinbasePriceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinbasePriceState) ProtoMessage() {}

func (x *CoinbasePriceState) ProtoReflect() protoreflect.Message {
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinbasePriceState.ProtoReflect.Descriptor instead.
func (*CoinbasePriceState) Descriptor() ([]byte, []int) {
	return file_injective_oracle_v1beta1_oracle_proto_rawDescGZIP(), []int{10}
}

func (x *CoinbasePriceState) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *CoinbasePriceState) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *CoinbasePriceState) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CoinbasePriceState) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *CoinbasePriceState) GetPriceState() *PriceState {
	if x != nil {
		return x.PriceState
	}
	return nil
}

type StorkPriceState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// timestamp of the when the price was signed by stork
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// the symbol of the price, e.g. BTC
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// the value of the price scaled by 1e18
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// the price state
	PriceState    *PriceState `protobuf:"bytes,5,opt,name=price_state,json=priceState,proto3" json:"price_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StorkPriceState) Reset() {
	*x = StorkPriceState{}
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StorkPriceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorkPriceState) ProtoMessage() {}

func (x *StorkPriceState) ProtoReflect() protoreflect.Message {
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorkPriceState.ProtoReflect.Descriptor instead.
func (*StorkPriceState) Descriptor() ([]byte, []int) {
	return file_injective_oracle_v1beta1_oracle_proto_rawDescGZIP(), []int{11}
}

func (x *StorkPriceState) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *StorkPriceState) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *StorkPriceState) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *StorkPriceState) GetPriceState() *PriceState {
	if x != nil {
		return x.PriceState
	}
	return nil
}

type PriceState struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Price           string                 `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`
	CumulativePrice string                 `protobuf:"bytes,2,opt,name=cumulative_price,json=cumulativePrice,proto3" json:"cumulative_price,omitempty"`
	Timestamp       int64                  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PriceState) Reset() {
	*x = PriceState{}
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PriceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceState) ProtoMessage() {}

func (x *PriceState) ProtoReflect() protoreflect.Message {
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceState.ProtoReflect.Descriptor instead.
func (*PriceState) Descriptor() ([]byte, []int) {
	return file_injective_oracle_v1beta1_oracle_proto_rawDescGZIP(), []int{12}
}

func (x *PriceState) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *PriceState) GetCumulativePrice() string {
	if x != nil {
		return x.CumulativePrice
	}
	return ""
}

func (x *PriceState) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type PythPriceState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PriceId       string                 `protobuf:"bytes,1,opt,name=price_id,json=priceId,proto3" json:"price_id,omitempty"`
	EmaPrice      string                 `protobuf:"bytes,2,opt,name=ema_price,json=emaPrice,proto3" json:"ema_price,omitempty"`
	EmaConf       string                 `protobuf:"bytes,3,opt,name=ema_conf,json=emaConf,proto3" json:"ema_conf,omitempty"`
	Conf          string                 `protobuf:"bytes,4,opt,name=conf,proto3" json:"conf,omitempty"`
	PublishTime   uint64                 `protobuf:"varint,5,opt,name=publish_time,json=publishTime,proto3" json:"publish_time,omitempty"`
	PriceState    *PriceState            `protobuf:"bytes,6,opt,name=price_state,json=priceState,proto3" json:"price_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PythPriceState) Reset() {
	*x = PythPriceState{}
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PythPriceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PythPriceState) ProtoMessage() {}

func (x *PythPriceState) ProtoReflect() protoreflect.Message {
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PythPriceState.ProtoReflect.Descriptor instead.
func (*PythPriceState) Descriptor() ([]byte, []int) {
	return file_injective_oracle_v1beta1_oracle_proto_rawDescGZIP(), []int{13}
}

func (x *PythPriceState) GetPriceId() string {
	if x != nil {
		return x.PriceId
	}
	return ""
}

func (x *PythPriceState) GetEmaPrice() string {
	if x != nil {
		return x.EmaPrice
	}
	return ""
}

func (x *PythPriceState) GetEmaConf() string {
	if x != nil {
		return x.EmaConf
	}
	return ""
}

func (x *PythPriceState) GetConf() string {
	if x != nil {
		return x.Conf
	}
	return ""
}

func (x *PythPriceState) GetPublishTime() uint64 {
	if x != nil {
		return x.PublishTime
	}
	return 0
}

func (x *PythPriceState) GetPriceState() *PriceState {
	if x != nil {
		return x.PriceState
	}
	return nil
}

type BandOracleRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique Identifier for band ibc oracle request
	RequestId uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// OracleScriptID is the unique identifier of the oracle script to be
	// executed.
	OracleScriptId int64 `protobuf:"varint,2,opt,name=oracle_script_id,json=oracleScriptId,proto3" json:"oracle_script_id,omitempty"`
	// Symbols is the list of symbols to prepare in the calldata
	Symbols []string `protobuf:"bytes,3,rep,name=symbols,proto3" json:"symbols,omitempty"`
	// AskCount is the number of validators that are requested to respond to this
	// oracle request. Higher value means more security, at a higher gas cost.
	AskCount uint64 `protobuf:"varint,4,opt,name=ask_count,json=askCount,proto3" json:"ask_count,omitempty"`
	// MinCount is the minimum number of validators necessary for the request to
	// proceed to the execution phase. Higher value means more security, at the
	// cost of liveness.
	MinCount uint64 `protobuf:"varint,5,opt,name=min_count,json=minCount,proto3" json:"min_count,omitempty"`
	// FeeLimit is the maximum tokens that will be paid to all data source
	// providers.
	FeeLimit []*types.Coin `protobuf:"bytes,6,rep,name=fee_limit,json=feeLimit,proto3" json:"fee_limit,omitempty"`
	// PrepareGas is amount of gas to pay to prepare raw requests
	PrepareGas uint64 `protobuf:"varint,7,opt,name=prepare_gas,json=prepareGas,proto3" json:"prepare_gas,omitempty"`
	// ExecuteGas is amount of gas to reserve for executing
	ExecuteGas uint64 `protobuf:"varint,8,opt,name=execute_gas,json=executeGas,proto3" json:"execute_gas,omitempty"`
	// MinSourceCount is the minimum number of data sources that must be used by
	// each validator
	MinSourceCount uint64 `protobuf:"varint,9,opt,name=min_source_count,json=minSourceCount,proto3" json:"min_source_count,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *BandOracleRequest) Reset() {
	*x = BandOracleRequest{}
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BandOracleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BandOracleRequest) ProtoMessage() {}

func (x *BandOracleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BandOracleRequest.ProtoReflect.Descriptor instead.
func (*BandOracleRequest) Descriptor() ([]byte, []int) {
	return file_injective_oracle_v1beta1_oracle_proto_rawDescGZIP(), []int{14}
}

func (x *BandOracleRequest) GetRequestId() uint64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *BandOracleRequest) GetOracleScriptId() int64 {
	if x != nil {
		return x.OracleScriptId
	}
	return 0
}

func (x *BandOracleRequest) GetSymbols() []string {
	if x != nil {
		return x.Symbols
	}
	return nil
}

func (x *BandOracleRequest) GetAskCount() uint64 {
	if x != nil {
		return x.AskCount
	}
	return 0
}

func (x *BandOracleRequest) GetMinCount() uint64 {
	if x != nil {
		return x.MinCount
	}
	return 0
}

func (x *BandOracleRequest) GetFeeLimit() []*types.Coin {
	if x != nil {
		return x.FeeLimit
	}
	return nil
}

func (x *BandOracleRequest) GetPrepareGas() uint64 {
	if x != nil {
		return x.PrepareGas
	}
	return 0
}

func (x *BandOracleRequest) GetExecuteGas() uint64 {
	if x != nil {
		return x.ExecuteGas
	}
	return 0
}

func (x *BandOracleRequest) GetMinSourceCount() uint64 {
	if x != nil {
		return x.MinSourceCount
	}
	return 0
}

type BandIBCParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// true if Band IBC should be enabled
	BandIbcEnabled bool `protobuf:"varint,1,opt,name=band_ibc_enabled,json=bandIbcEnabled,proto3" json:"band_ibc_enabled,omitempty"`
	// block request interval to send Band IBC prices
	IbcRequestInterval int64 `protobuf:"varint,2,opt,name=ibc_request_interval,json=ibcRequestInterval,proto3" json:"ibc_request_interval,omitempty"`
	// band IBC source channel
	IbcSourceChannel string `protobuf:"bytes,3,opt,name=ibc_source_channel,json=ibcSourceChannel,proto3" json:"ibc_source_channel,omitempty"`
	// band IBC version
	IbcVersion string `protobuf:"bytes,4,opt,name=ibc_version,json=ibcVersion,proto3" json:"ibc_version,omitempty"`
	// band IBC portID
	IbcPortId string `protobuf:"bytes,5,opt,name=ibc_port_id,json=ibcPortId,proto3" json:"ibc_port_id,omitempty"`
	// legacy oracle scheme ids
	LegacyOracleIds []int64 `protobuf:"varint,6,rep,packed,name=legacy_oracle_ids,json=legacyOracleIds,proto3" json:"legacy_oracle_ids,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BandIBCParams) Reset() {
	*x = BandIBCParams{}
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BandIBCParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BandIBCParams) ProtoMessage() {}

func (x *BandIBCParams) ProtoReflect() protoreflect.Message {
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BandIBCParams.ProtoReflect.Descriptor instead.
func (*BandIBCParams) Descriptor() ([]byte, []int) {
	return file_injective_oracle_v1beta1_oracle_proto_rawDescGZIP(), []int{15}
}

func (x *BandIBCParams) GetBandIbcEnabled() bool {
	if x != nil {
		return x.BandIbcEnabled
	}
	return false
}

func (x *BandIBCParams) GetIbcRequestInterval() int64 {
	if x != nil {
		return x.IbcRequestInterval
	}
	return 0
}

func (x *BandIBCParams) GetIbcSourceChannel() string {
	if x != nil {
		return x.IbcSourceChannel
	}
	return ""
}

func (x *BandIBCParams) GetIbcVersion() string {
	if x != nil {
		return x.IbcVersion
	}
	return ""
}

func (x *BandIBCParams) GetIbcPortId() string {
	if x != nil {
		return x.IbcPortId
	}
	return ""
}

func (x *BandIBCParams) GetLegacyOracleIds() []int64 {
	if x != nil {
		return x.LegacyOracleIds
	}
	return nil
}

type SymbolPriceTimestamp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Oracle        OracleType             `protobuf:"varint,1,opt,name=oracle,proto3,enum=injective.oracle.v1beta1.OracleType" json:"oracle,omitempty"`
	SymbolId      string                 `protobuf:"bytes,2,opt,name=symbol_id,json=symbolId,proto3" json:"symbol_id,omitempty"`
	Timestamp     int64                  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SymbolPriceTimestamp) Reset() {
	*x = SymbolPriceTimestamp{}
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SymbolPriceTimestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolPriceTimestamp) ProtoMessage() {}

func (x *SymbolPriceTimestamp) ProtoReflect() protoreflect.Message {
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolPriceTimestamp.ProtoReflect.Descriptor instead.
func (*SymbolPriceTimestamp) Descriptor() ([]byte, []int) {
	return file_injective_oracle_v1beta1_oracle_proto_rawDescGZIP(), []int{16}
}

func (x *SymbolPriceTimestamp) GetOracle() OracleType {
	if x != nil {
		return x.Oracle
	}
	return OracleType_Unspecified
}

func (x *SymbolPriceTimestamp) GetSymbolId() string {
	if x != nil {
		return x.SymbolId
	}
	return ""
}

func (x *SymbolPriceTimestamp) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type LastPriceTimestamps struct {
	state               protoimpl.MessageState  `protogen:"open.v1"`
	LastPriceTimestamps []*SymbolPriceTimestamp `protobuf:"bytes,1,rep,name=last_price_timestamps,json=lastPriceTimestamps,proto3" json:"last_price_timestamps,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *LastPriceTimestamps) Reset() {
	*x = LastPriceTimestamps{}
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LastPriceTimestamps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastPriceTimestamps) ProtoMessage() {}

func (x *LastPriceTimestamps) ProtoReflect() protoreflect.Message {
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastPriceTimestamps.ProtoReflect.Descriptor instead.
func (*LastPriceTimestamps) Descriptor() ([]byte, []int) {
	return file_injective_oracle_v1beta1_oracle_proto_rawDescGZIP(), []int{17}
}

func (x *LastPriceTimestamps) GetLastPriceTimestamps() []*SymbolPriceTimestamp {
	if x != nil {
		return x.LastPriceTimestamps
	}
	return nil
}

type PriceRecords struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Oracle             OracleType             `protobuf:"varint,1,opt,name=oracle,proto3,enum=injective.oracle.v1beta1.OracleType" json:"oracle,omitempty"`
	SymbolId           string                 `protobuf:"bytes,2,opt,name=symbol_id,json=symbolId,proto3" json:"symbol_id,omitempty"`
	LatestPriceRecords []*PriceRecord         `protobuf:"bytes,3,rep,name=latest_price_records,json=latestPriceRecords,proto3" json:"latest_price_records,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *PriceRecords) Reset() {
	*x = PriceRecords{}
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PriceRecords) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceRecords) ProtoMessage() {}

func (x *PriceRecords) ProtoReflect() protoreflect.Message {
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceRecords.ProtoReflect.Descriptor instead.
func (*PriceRecords) Descriptor() ([]byte, []int) {
	return file_injective_oracle_v1beta1_oracle_proto_rawDescGZIP(), []int{18}
}

func (x *PriceRecords) GetOracle() OracleType {
	if x != nil {
		return x.Oracle
	}
	return OracleType_Unspecified
}

func (x *PriceRecords) GetSymbolId() string {
	if x != nil {
		return x.SymbolId
	}
	return ""
}

func (x *PriceRecords) GetLatestPriceRecords() []*PriceRecord {
	if x != nil {
		return x.LatestPriceRecords
	}
	return nil
}

type PriceRecord struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     int64                  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Price         string                 `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PriceRecord) Reset() {
	*x = PriceRecord{}
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PriceRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceRecord) ProtoMessage() {}

func (x *PriceRecord) ProtoReflect() protoreflect.Message {
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceRecord.ProtoReflect.Descriptor instead.
func (*PriceRecord) Descriptor() ([]byte, []int) {
	return file_injective_oracle_v1beta1_oracle_proto_rawDescGZIP(), []int{19}
}

func (x *PriceRecord) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PriceRecord) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

// MetadataStatistics refers to the metadata summary statistics of the
// historical sample considered
type MetadataStatistics struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// GroupCount refers to the number of groups used. Equals RecordsSampleSize if
	// no grouping is used
	GroupCount uint32 `protobuf:"varint,1,opt,name=group_count,json=groupCount,proto3" json:"group_count,omitempty"`
	// RecordsSampleSize refers to the total number of records used.
	RecordsSampleSize uint32 `protobuf:"varint,2,opt,name=records_sample_size,json=recordsSampleSize,proto3" json:"records_sample_size,omitempty"`
	// Mean refers to the arithmetic mean
	// For trades, the mean is the VWAP computed over the grouped trade records ∑
	// (price * quantity) / ∑ quantity For oracle prices, the mean is computed
	// over the price records ∑ (price) / prices_count
	Mean string `protobuf:"bytes,3,opt,name=mean,proto3" json:"mean,omitempty"`
	// TWAP refers to the time-weighted average price which equals ∑ (price_i *
	// ∆t_i) / ∑ ∆t_i where ∆t_i = t_i - t_{i-1}
	Twap string `protobuf:"bytes,4,opt,name=twap,proto3" json:"twap,omitempty"`
	// FirstTimestamp is the timestamp of the oldest record considered
	FirstTimestamp int64 `protobuf:"varint,5,opt,name=first_timestamp,json=firstTimestamp,proto3" json:"first_timestamp,omitempty"`
	// LastTimestamp is the timestamp of the youngest record considered
	LastTimestamp int64 `protobuf:"varint,6,opt,name=last_timestamp,json=lastTimestamp,proto3" json:"last_timestamp,omitempty"`
	// MinPrice refers to the smallest individual raw price considered
	MinPrice string `protobuf:"bytes,7,opt,name=min_price,json=minPrice,proto3" json:"min_price,omitempty"`
	// MaxPrice refers to the largest individual raw price considered
	MaxPrice string `protobuf:"bytes,8,opt,name=max_price,json=maxPrice,proto3" json:"max_price,omitempty"`
	// MedianPrice refers to the median individual raw price considered
	MedianPrice   string `protobuf:"bytes,9,opt,name=median_price,json=medianPrice,proto3" json:"median_price,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetadataStatistics) Reset() {
	*x = MetadataStatistics{}
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetadataStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataStatistics) ProtoMessage() {}

func (x *MetadataStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataStatistics.ProtoReflect.Descriptor instead.
func (*MetadataStatistics) Descriptor() ([]byte, []int) {
	return file_injective_oracle_v1beta1_oracle_proto_rawDescGZIP(), []int{20}
}

func (x *MetadataStatistics) GetGroupCount() uint32 {
	if x != nil {
		return x.GroupCount
	}
	return 0
}

func (x *MetadataStatistics) GetRecordsSampleSize() uint32 {
	if x != nil {
		return x.RecordsSampleSize
	}
	return 0
}

func (x *MetadataStatistics) GetMean() string {
	if x != nil {
		return x.Mean
	}
	return ""
}

func (x *MetadataStatistics) GetTwap() string {
	if x != nil {
		return x.Twap
	}
	return ""
}

func (x *MetadataStatistics) GetFirstTimestamp() int64 {
	if x != nil {
		return x.FirstTimestamp
	}
	return 0
}

func (x *MetadataStatistics) GetLastTimestamp() int64 {
	if x != nil {
		return x.LastTimestamp
	}
	return 0
}

func (x *MetadataStatistics) GetMinPrice() string {
	if x != nil {
		return x.MinPrice
	}
	return ""
}

func (x *MetadataStatistics) GetMaxPrice() string {
	if x != nil {
		return x.MaxPrice
	}
	return ""
}

func (x *MetadataStatistics) GetMedianPrice() string {
	if x != nil {
		return x.MedianPrice
	}
	return ""
}

type PriceAttestation struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	PriceId string                 `protobuf:"bytes,1,opt,name=price_id,json=priceId,proto3" json:"price_id,omitempty"`
	// MaxPrice refers to the largest individual raw price considered
	Price         int64  `protobuf:"varint,2,opt,name=price,proto3" json:"price,omitempty"`
	Conf          uint64 `protobuf:"varint,3,opt,name=conf,proto3" json:"conf,omitempty"`
	Expo          int32  `protobuf:"varint,4,opt,name=expo,proto3" json:"expo,omitempty"`
	EmaPrice      int64  `protobuf:"varint,5,opt,name=ema_price,json=emaPrice,proto3" json:"ema_price,omitempty"`
	EmaConf       uint64 `protobuf:"varint,6,opt,name=ema_conf,json=emaConf,proto3" json:"ema_conf,omitempty"`
	EmaExpo       int32  `protobuf:"varint,7,opt,name=ema_expo,json=emaExpo,proto3" json:"ema_expo,omitempty"`
	PublishTime   int64  `protobuf:"varint,8,opt,name=publish_time,json=publishTime,proto3" json:"publish_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PriceAttestation) Reset() {
	*x = PriceAttestation{}
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PriceAttestation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceAttestation) ProtoMessage() {}

func (x *PriceAttestation) ProtoReflect() protoreflect.Message {
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceAttestation.ProtoReflect.Descriptor instead.
func (*PriceAttestation) Descriptor() ([]byte, []int) {
	return file_injective_oracle_v1beta1_oracle_proto_rawDescGZIP(), []int{21}
}

func (x *PriceAttestation) GetPriceId() string {
	if x != nil {
		return x.PriceId
	}
	return ""
}

func (x *PriceAttestation) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *PriceAttestation) GetConf() uint64 {
	if x != nil {
		return x.Conf
	}
	return 0
}

func (x *PriceAttestation) GetExpo() int32 {
	if x != nil {
		return x.Expo
	}
	return 0
}

func (x *PriceAttestation) GetEmaPrice() int64 {
	if x != nil {
		return x.EmaPrice
	}
	return 0
}

func (x *PriceAttestation) GetEmaConf() uint64 {
	if x != nil {
		return x.EmaConf
	}
	return 0
}

func (x *PriceAttestation) GetEmaExpo() int32 {
	if x != nil {
		return x.EmaExpo
	}
	return 0
}

func (x *PriceAttestation) GetPublishTime() int64 {
	if x != nil {
		return x.PublishTime
	}
	return 0
}

type AssetPair struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	AssetId       string                    `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	SignedPrices  []*SignedPriceOfAssetPair `protobuf:"bytes,2,rep,name=signed_prices,json=signedPrices,proto3" json:"signed_prices,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssetPair) Reset() {
	*x = AssetPair{}
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssetPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetPair) ProtoMessage() {}

func (x *AssetPair) ProtoReflect() protoreflect.Message {
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetPair.ProtoReflect.Descriptor instead.
func (*AssetPair) Descriptor() ([]byte, []int) {
	return file_injective_oracle_v1beta1_oracle_proto_rawDescGZIP(), []int{22}
}

func (x *AssetPair) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *AssetPair) GetSignedPrices() []*SignedPriceOfAssetPair {
	if x != nil {
		return x.SignedPrices
	}
	return nil
}

type SignedPriceOfAssetPair struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PublisherKey  string                 `protobuf:"bytes,1,opt,name=publisher_key,json=publisherKey,proto3" json:"publisher_key,omitempty"`
	Timestamp     uint64                 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Price         string                 `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`
	Signature     []byte                 `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignedPriceOfAssetPair) Reset() {
	*x = SignedPriceOfAssetPair{}
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignedPriceOfAssetPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedPriceOfAssetPair) ProtoMessage() {}

func (x *SignedPriceOfAssetPair) ProtoReflect() protoreflect.Message {
	mi := &file_injective_oracle_v1beta1_oracle_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedPriceOfAssetPair.ProtoReflect.Descriptor instead.
func (*SignedPriceOfAssetPair) Descriptor() ([]byte, []int) {
	return file_injective_oracle_v1beta1_oracle_proto_rawDescGZIP(), []int{23}
}

func (x *SignedPriceOfAssetPair) GetPublisherKey() string {
	if x != nil {
		return x.PublisherKey
	}
	return ""
}

func (x *SignedPriceOfAssetPair) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SignedPriceOfAssetPair) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *SignedPriceOfAssetPair) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

var File_injective_oracle_v1beta1_oracle_proto protoreflect.FileDescriptor

const file_injective_oracle_v1beta1_oracle_proto_rawDesc = "" +
	"\n" +
	"%injective/oracle/v1beta1/oracle.proto\x12\x18injective.oracle.v1beta1\x1a\x14gogoproto/gogo.proto\x1a\x1ecosmos/base/v1beta1/coin.proto\x1a\x11amino/amino.proto\"E\n" +
	"\x06Params\x12#\n" +
	"\rpyth_contract\x18\x01 \x01(\tR\fpythContract:\x16\xe8\xa0\x1f\x01\x8a\xe7\xb0*\roracle/Params\"k\n" +
	"\n" +
	"OracleInfo\x12\x16\n" +
	"\x06symbol\x18\x01 \x01(\tR\x06symbol\x12E\n" +
	"\voracle_type\x18\x02 \x01(\x0e2$.injective.oracle.v1beta1.OracleTypeR\n" +
	"oracleType\"\xd6\x01\n" +
	"\x13ChainlinkPriceState\x12\x17\n" +
	"\afeed_id\x18\x01 \x01(\tR\x06feedId\x12;\n" +
	"\x06answer\x18\x02 \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x06answer\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x04R\ttimestamp\x12K\n" +
	"\vprice_state\x18\x04 \x01(\v2$.injective.oracle.v1beta1.PriceStateB\x04\xc8\xde\x1f\x00R\n" +
	"priceState\"\xea\x01\n" +
	"\x0eBandPriceState\x12\x16\n" +
	"\x06symbol\x18\x01 \x01(\tR\x06symbol\x121\n" +
	"\x04rate\x18\x02 \x01(\tB\x1d\xc8\xde\x1f\x00\xda\xde\x1f\x15cosmossdk.io/math.IntR\x04rate\x12!\n" +
	"\fresolve_time\x18\x03 \x01(\x04R\vresolveTime\x12\x1d\n" +
	"\n" +
	"request_ID\x18\x04 \x01(\x04R\trequestID\x12K\n" +
	"\vprice_state\x18\x05 \x01(\v2$.injective.oracle.v1beta1.PriceStateB\x04\xc8\xde\x1f\x00R\n" +
	"priceState\"\x9d\x01\n" +
	"\x0ePriceFeedState\x12\x12\n" +
	"\x04base\x18\x01 \x01(\tR\x04base\x12\x14\n" +
	"\x05quote\x18\x02 \x01(\tR\x05quote\x12E\n" +
	"\vprice_state\x18\x03 \x01(\v2$.injective.oracle.v1beta1.PriceStateR\n" +
	"priceState\x12\x1a\n" +
	"\brelayers\x18\x04 \x03(\tR\brelayers\"F\n" +
	"\fProviderInfo\x12\x1a\n" +
	"\bprovider\x18\x01 \x01(\tR\bprovider\x12\x1a\n" +
	"\brelayers\x18\x02 \x03(\tR\brelayers\"\xbe\x01\n" +
	"\rProviderState\x12K\n" +
	"\rprovider_info\x18\x01 \x01(\v2&.injective.oracle.v1beta1.ProviderInfoR\fproviderInfo\x12`\n" +
	"\x15provider_price_states\x18\x02 \x03(\v2,.injective.oracle.v1beta1.ProviderPriceStateR\x13providerPriceStates\"h\n" +
	"\x12ProviderPriceState\x12\x16\n" +
	"\x06symbol\x18\x01 \x01(\tR\x06symbol\x12:\n" +
	"\x05state\x18\x02 \x01(\v2$.injective.oracle.v1beta1.PriceStateR\x05state\"9\n" +
	"\rPriceFeedInfo\x12\x12\n" +
	"\x04base\x18\x01 \x01(\tR\x04base\x12\x14\n" +
	"\x05quote\x18\x02 \x01(\tR\x05quote\"K\n" +
	"\x0ePriceFeedPrice\x129\n" +
	"\x05price\x18\x01 \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x05price\"\xbb\x01\n" +
	"\x12CoinbasePriceState\x12\x12\n" +
	"\x04kind\x18\x01 \x01(\tR\x04kind\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\x04R\ttimestamp\x12\x10\n" +
	"\x03key\x18\x03 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x04 \x01(\x04R\x05value\x12K\n" +
	"\vprice_state\x18\x05 \x01(\v2$.injective.oracle.v1beta1.PriceStateB\x04\xc8\xde\x1f\x00R\n" +
	"priceState\"\xcf\x01\n" +
	"\x0fStorkPriceState\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x01(\x04R\ttimestamp\x12\x16\n" +
	"\x06symbol\x18\x02 \x01(\tR\x06symbol\x129\n" +
	"\x05value\x18\x03 \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x05value\x12K\n" +
	"\vprice_state\x18\x05 \x01(\v2$.injective.oracle.v1beta1.PriceStateB\x04\xc8\xde\x1f\x00R\n" +
	"priceState\"\xb5\x01\n" +
	"\n" +
	"PriceState\x129\n" +
	"\x05price\x18\x01 \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x05price\x12N\n" +
	"\x10cumulative_price\x18\x02 \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x0fcumulativePrice\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x03R\ttimestamp\"\xd6\x02\n" +
	"\x0ePythPriceState\x12\x19\n" +
	"\bprice_id\x18\x01 \x01(\tR\apriceId\x12@\n" +
	"\tema_price\x18\x02 \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\bemaPrice\x12>\n" +
	"\bema_conf\x18\x03 \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\aemaConf\x127\n" +
	"\x04conf\x18\x04 \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x04conf\x12!\n" +
	"\fpublish_time\x18\x05 \x01(\x04R\vpublishTime\x12K\n" +
	"\vprice_state\x18\x06 \x01(\v2$.injective.oracle.v1beta1.PriceStateB\x04\xc8\xde\x1f\x00R\n" +
	"priceState\"\x86\x03\n" +
	"\x11BandOracleRequest\x12\x1d\n" +
	"\n" +
	"request_id\x18\x01 \x01(\x04R\trequestId\x12(\n" +
	"\x10oracle_script_id\x18\x02 \x01(\x03R\x0eoracleScriptId\x12\x18\n" +
	"\asymbols\x18\x03 \x03(\tR\asymbols\x12\x1b\n" +
	"\task_count\x18\x04 \x01(\x04R\baskCount\x12\x1b\n" +
	"\tmin_count\x18\x05 \x01(\x04R\bminCount\x12h\n" +
	"\tfee_limit\x18\x06 \x03(\v2\x19.cosmos.base.v1beta1.CoinB0\xc8\xde\x1f\x00\xaa\xdf\x1f(github.com/cosmos/cosmos-sdk/types.CoinsR\bfeeLimit\x12\x1f\n" +
	"\vprepare_gas\x18\a \x01(\x04R\n" +
	"prepareGas\x12\x1f\n" +
	"\vexecute_gas\x18\b \x01(\x04R\n" +
	"executeGas\x12(\n" +
	"\x10min_source_count\x18\t \x01(\x04R\x0eminSourceCount\"\x86\x02\n" +
	"\rBandIBCParams\x12(\n" +
	"\x10band_ibc_enabled\x18\x01 \x01(\bR\x0ebandIbcEnabled\x120\n" +
	"\x14ibc_request_interval\x18\x02 \x01(\x03R\x12ibcRequestInterval\x12,\n" +
	"\x12ibc_source_channel\x18\x03 \x01(\tR\x10ibcSourceChannel\x12\x1f\n" +
	"\vibc_version\x18\x04 \x01(\tR\n" +
	"ibcVersion\x12\x1e\n" +
	"\vibc_port_id\x18\x05 \x01(\tR\tibcPortId\x12*\n" +
	"\x11legacy_oracle_ids\x18\x06 \x03(\x03R\x0flegacyOracleIds\"\x8f\x01\n" +
	"\x14SymbolPriceTimestamp\x12<\n" +
	"\x06oracle\x18\x01 \x01(\x0e2$.injective.oracle.v1beta1.OracleTypeR\x06oracle\x12\x1b\n" +
	"\tsymbol_id\x18\x02 \x01(\tR\bsymbolId\x12\x1c\n" +
	"\ttimestamp\x18\x03 \x01(\x03R\ttimestamp\"y\n" +
	"\x13LastPriceTimestamps\x12b\n" +
	"\x15last_price_timestamps\x18\x01 \x03(\v2..injective.oracle.v1beta1.SymbolPriceTimestampR\x13lastPriceTimestamps\"\xc2\x01\n" +
	"\fPriceRecords\x12<\n" +
	"\x06oracle\x18\x01 \x01(\x0e2$.injective.oracle.v1beta1.OracleTypeR\x06oracle\x12\x1b\n" +
	"\tsymbol_id\x18\x02 \x01(\tR\bsymbolId\x12W\n" +
	"\x14latest_price_records\x18\x03 \x03(\v2%.injective.oracle.v1beta1.PriceRecordR\x12latestPriceRecords\"f\n" +
	"\vPriceRecord\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x01(\x03R\ttimestamp\x129\n" +
	"\x05price\x18\x02 \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x05price\"\xf3\x03\n" +
	"\x12MetadataStatistics\x12\x1f\n" +
	"\vgroup_count\x18\x01 \x01(\rR\n" +
	"groupCount\x12.\n" +
	"\x13records_sample_size\x18\x02 \x01(\rR\x11recordsSampleSize\x127\n" +
	"\x04mean\x18\x03 \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x04mean\x127\n" +
	"\x04twap\x18\x04 \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x04twap\x12'\n" +
	"\x0ffirst_timestamp\x18\x05 \x01(\x03R\x0efirstTimestamp\x12%\n" +
	"\x0elast_timestamp\x18\x06 \x01(\x03R\rlastTimestamp\x12@\n" +
	"\tmin_price\x18\a \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\bminPrice\x12@\n" +
	"\tmax_price\x18\b \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\bmaxPrice\x12F\n" +
	"\fmedian_price\x18\t \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\vmedianPrice\"\xe1\x01\n" +
	"\x10PriceAttestation\x12\x19\n" +
	"\bprice_id\x18\x01 \x01(\tR\apriceId\x12\x14\n" +
	"\x05price\x18\x02 \x01(\x03R\x05price\x12\x12\n" +
	"\x04conf\x18\x03 \x01(\x04R\x04conf\x12\x12\n" +
	"\x04expo\x18\x04 \x01(\x05R\x04expo\x12\x1b\n" +
	"\tema_price\x18\x05 \x01(\x03R\bemaPrice\x12\x19\n" +
	"\bema_conf\x18\x06 \x01(\x04R\aemaConf\x12\x19\n" +
	"\bema_expo\x18\a \x01(\x05R\aemaExpo\x12!\n" +
	"\fpublish_time\x18\b \x01(\x03R\vpublishTime\"}\n" +
	"\tAssetPair\x12\x19\n" +
	"\basset_id\x18\x01 \x01(\tR\aassetId\x12U\n" +
	"\rsigned_prices\x18\x02 \x03(\v20.injective.oracle.v1beta1.SignedPriceOfAssetPairR\fsignedPrices\"\xb4\x01\n" +
	"\x16SignedPriceOfAssetPair\x12#\n" +
	"\rpublisher_key\x18\x01 \x01(\tR\fpublisherKey\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\x04R\ttimestamp\x129\n" +
	"\x05price\x18\x03 \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x05price\x12\x1c\n" +
	"\tsignature\x18\x04 \x01(\fR\tsignature*\xaa\x01\n" +
	"\n" +
	"OracleType\x12\x0f\n" +
	"\vUnspecified\x10\x00\x12\b\n" +
	"\x04Band\x10\x01\x12\r\n" +
	"\tPriceFeed\x10\x02\x12\f\n" +
	"\bCoinbase\x10\x03\x12\r\n" +
	"\tChainlink\x10\x04\x12\t\n" +
	"\x05Razor\x10\x05\x12\a\n" +
	"\x03Dia\x10\x06\x12\b\n" +
	"\x04API3\x10\a\x12\a\n" +
	"\x03Uma\x10\b\x12\b\n" +
	"\x04Pyth\x10\t\x12\v\n" +
	"\aBandIBC\x10\n" +
	"\x12\f\n" +
	"\bProvider\x10\v\x12\t\n" +
	"\x05Stork\x10\fBR\xc0\xe3\x1e\x01ZLgithub.com/InjectiveLabs/injective-core/injective-chain/modules/oracle/typesb\x06proto3"

var (
	file_injective_oracle_v1beta1_oracle_proto_rawDescOnce sync.Once
	file_injective_oracle_v1beta1_oracle_proto_rawDescData []byte
)

func file_injective_oracle_v1beta1_oracle_proto_rawDescGZIP() []byte {
	file_injective_oracle_v1beta1_oracle_proto_rawDescOnce.Do(func() {
		file_injective_oracle_v1beta1_oracle_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_injective_oracle_v1beta1_oracle_proto_rawDesc), len(file_injective_oracle_v1beta1_oracle_proto_rawDesc)))
	})
	return file_injective_oracle_v1beta1_oracle_proto_rawDescData
}

var file_injective_oracle_v1beta1_oracle_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_injective_oracle_v1beta1_oracle_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_injective_oracle_v1beta1_oracle_proto_goTypes = []any{
	(OracleType)(0),                // 0: injective.oracle.v1beta1.OracleType
	(*Params)(nil),                 // 1: injective.oracle.v1beta1.Params
	(*OracleInfo)(nil),             // 2: injective.oracle.v1beta1.OracleInfo
	(*ChainlinkPriceState)(nil),    // 3: injective.oracle.v1beta1.ChainlinkPriceState
	(*BandPriceState)(nil),         // 4: injective.oracle.v1beta1.BandPriceState
	(*PriceFeedState)(nil),         // 5: injective.oracle.v1beta1.PriceFeedState
	(*ProviderInfo)(nil),           // 6: injective.oracle.v1beta1.ProviderInfo
	(*ProviderState)(nil),          // 7: injective.oracle.v1beta1.ProviderState
	(*ProviderPriceState)(nil),     // 8: injective.oracle.v1beta1.ProviderPriceState
	(*PriceFeedInfo)(nil),          // 9: injective.oracle.v1beta1.PriceFeedInfo
	(*PriceFeedPrice)(nil),         // 10: injective.oracle.v1beta1.PriceFeedPrice
	(*CoinbasePriceState)(nil),     // 11: injective.oracle.v1beta1.CoinbasePriceState
	(*StorkPriceState)(nil),        // 12: injective.oracle.v1beta1.StorkPriceState
	(*PriceState)(nil),             // 13: injective.oracle.v1beta1.PriceState
	(*PythPriceState)(nil),         // 14: injective.oracle.v1beta1.PythPriceState
	(*BandOracleRequest)(nil),      // 15: injective.oracle.v1beta1.BandOracleRequest
	(*BandIBCParams)(nil),          // 16: injective.oracle.v1beta1.BandIBCParams
	(*SymbolPriceTimestamp)(nil),   // 17: injective.oracle.v1beta1.SymbolPriceTimestamp
	(*LastPriceTimestamps)(nil),    // 18: injective.oracle.v1beta1.LastPriceTimestamps
	(*PriceRecords)(nil),           // 19: injective.oracle.v1beta1.PriceRecords
	(*PriceRecord)(nil),            // 20: injective.oracle.v1beta1.PriceRecord
	(*MetadataStatistics)(nil),     // 21: injective.oracle.v1beta1.MetadataStatistics
	(*PriceAttestation)(nil),       // 22: injective.oracle.v1beta1.PriceAttestation
	(*AssetPair)(nil),              // 23: injective.oracle.v1beta1.AssetPair
	(*SignedPriceOfAssetPair)(nil), // 24: injective.oracle.v1beta1.SignedPriceOfAssetPair
	(*types.Coin)(nil),             // 25: cosmos.base.v1beta1.Coin
}
var file_injective_oracle_v1beta1_oracle_proto_depIdxs = []int32{
	0,  // 0: injective.oracle.v1beta1.OracleInfo.oracle_type:type_name -> injective.oracle.v1beta1.OracleType
	13, // 1: injective.oracle.v1beta1.ChainlinkPriceState.price_state:type_name -> injective.oracle.v1beta1.PriceState
	13, // 2: injective.oracle.v1beta1.BandPriceState.price_state:type_name -> injective.oracle.v1beta1.PriceState
	13, // 3: injective.oracle.v1beta1.PriceFeedState.price_state:type_name -> injective.oracle.v1beta1.PriceState
	6,  // 4: injective.oracle.v1beta1.ProviderState.provider_info:type_name -> injective.oracle.v1beta1.ProviderInfo
	8,  // 5: injective.oracle.v1beta1.ProviderState.provider_price_states:type_name -> injective.oracle.v1beta1.ProviderPriceState
	13, // 6: injective.oracle.v1beta1.ProviderPriceState.state:type_name -> injective.oracle.v1beta1.PriceState
	13, // 7: injective.oracle.v1beta1.CoinbasePriceState.price_state:type_name -> injective.oracle.v1beta1.PriceState
	13, // 8: injective.oracle.v1beta1.StorkPriceState.price_state:type_name -> injective.oracle.v1beta1.PriceState
	13, // 9: injective.oracle.v1beta1.PythPriceState.price_state:type_name -> injective.oracle.v1beta1.PriceState
	25, // 10: injective.oracle.v1beta1.BandOracleRequest.fee_limit:type_name -> cosmos.base.v1beta1.Coin
	0,  // 11: injective.oracle.v1beta1.SymbolPriceTimestamp.oracle:type_name -> injective.oracle.v1beta1.OracleType
	17, // 12: injective.oracle.v1beta1.LastPriceTimestamps.last_price_timestamps:type_name -> injective.oracle.v1beta1.SymbolPriceTimestamp
	0,  // 13: injective.oracle.v1beta1.PriceRecords.oracle:type_name -> injective.oracle.v1beta1.OracleType
	20, // 14: injective.oracle.v1beta1.PriceRecords.latest_price_records:type_name -> injective.oracle.v1beta1.PriceRecord
	24, // 15: injective.oracle.v1beta1.AssetPair.signed_prices:type_name -> injective.oracle.v1beta1.SignedPriceOfAssetPair
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_injective_oracle_v1beta1_oracle_proto_init() }
func file_injective_oracle_v1beta1_oracle_proto_init() {
	if File_injective_oracle_v1beta1_oracle_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_injective_oracle_v1beta1_oracle_proto_rawDesc), len(file_injective_oracle_v1beta1_oracle_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_injective_oracle_v1beta1_oracle_proto_goTypes,
		DependencyIndexes: file_injective_oracle_v1beta1_oracle_proto_depIdxs,
		EnumInfos:         file_injective_oracle_v1beta1_oracle_proto_enumTypes,
		MessageInfos:      file_injective_oracle_v1beta1_oracle_proto_msgTypes,
	}.Build()
	File_injective_oracle_v1beta1_oracle_proto = out.File
	file_injective_oracle_v1beta1_oracle_proto_goTypes = nil
	file_injective_oracle_v1beta1_oracle_proto_depIdxs = nil
}
