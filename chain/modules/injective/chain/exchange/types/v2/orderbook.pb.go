// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: injective/exchange/v2/orderbook.proto

package v2

import (
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Spot Exchange Limit Orderbook
type SpotOrderBook struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MarketId      string                 `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	IsBuySide     bool                   `protobuf:"varint,2,opt,name=isBuySide,proto3" json:"isBuySide,omitempty"`
	Orders        []*SpotLimitOrder      `protobuf:"bytes,3,rep,name=orders,proto3" json:"orders,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpotOrderBook) Reset() {
	*x = SpotOrderBook{}
	mi := &file_injective_exchange_v2_orderbook_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpotOrderBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotOrderBook) ProtoMessage() {}

func (x *SpotOrderBook) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v2_orderbook_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotOrderBook.ProtoReflect.Descriptor instead.
func (*SpotOrderBook) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v2_orderbook_proto_rawDescGZIP(), []int{0}
}

func (x *SpotOrderBook) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *SpotOrderBook) GetIsBuySide() bool {
	if x != nil {
		return x.IsBuySide
	}
	return false
}

func (x *SpotOrderBook) GetOrders() []*SpotLimitOrder {
	if x != nil {
		return x.Orders
	}
	return nil
}

// Derivative Exchange Limit Orderbook
type DerivativeOrderBook struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	MarketId      string                  `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	IsBuySide     bool                    `protobuf:"varint,2,opt,name=isBuySide,proto3" json:"isBuySide,omitempty"`
	Orders        []*DerivativeLimitOrder `protobuf:"bytes,3,rep,name=orders,proto3" json:"orders,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DerivativeOrderBook) Reset() {
	*x = DerivativeOrderBook{}
	mi := &file_injective_exchange_v2_orderbook_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DerivativeOrderBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DerivativeOrderBook) ProtoMessage() {}

func (x *DerivativeOrderBook) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v2_orderbook_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DerivativeOrderBook.ProtoReflect.Descriptor instead.
func (*DerivativeOrderBook) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v2_orderbook_proto_rawDescGZIP(), []int{1}
}

func (x *DerivativeOrderBook) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *DerivativeOrderBook) GetIsBuySide() bool {
	if x != nil {
		return x.IsBuySide
	}
	return false
}

func (x *DerivativeOrderBook) GetOrders() []*DerivativeLimitOrder {
	if x != nil {
		return x.Orders
	}
	return nil
}

// Orderbook containing limit & market conditional orders
type ConditionalDerivativeOrderBook struct {
	state            protoimpl.MessageState   `protogen:"open.v1"`
	MarketId         string                   `protobuf:"bytes,1,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	LimitBuyOrders   []*DerivativeLimitOrder  `protobuf:"bytes,2,rep,name=limit_buy_orders,json=limitBuyOrders,proto3" json:"limit_buy_orders,omitempty"`
	MarketBuyOrders  []*DerivativeMarketOrder `protobuf:"bytes,3,rep,name=market_buy_orders,json=marketBuyOrders,proto3" json:"market_buy_orders,omitempty"`
	LimitSellOrders  []*DerivativeLimitOrder  `protobuf:"bytes,4,rep,name=limit_sell_orders,json=limitSellOrders,proto3" json:"limit_sell_orders,omitempty"`
	MarketSellOrders []*DerivativeMarketOrder `protobuf:"bytes,5,rep,name=market_sell_orders,json=marketSellOrders,proto3" json:"market_sell_orders,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ConditionalDerivativeOrderBook) Reset() {
	*x = ConditionalDerivativeOrderBook{}
	mi := &file_injective_exchange_v2_orderbook_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConditionalDerivativeOrderBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionalDerivativeOrderBook) ProtoMessage() {}

func (x *ConditionalDerivativeOrderBook) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v2_orderbook_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionalDerivativeOrderBook.ProtoReflect.Descriptor instead.
func (*ConditionalDerivativeOrderBook) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v2_orderbook_proto_rawDescGZIP(), []int{2}
}

func (x *ConditionalDerivativeOrderBook) GetMarketId() string {
	if x != nil {
		return x.MarketId
	}
	return ""
}

func (x *ConditionalDerivativeOrderBook) GetLimitBuyOrders() []*DerivativeLimitOrder {
	if x != nil {
		return x.LimitBuyOrders
	}
	return nil
}

func (x *ConditionalDerivativeOrderBook) GetMarketBuyOrders() []*DerivativeMarketOrder {
	if x != nil {
		return x.MarketBuyOrders
	}
	return nil
}

func (x *ConditionalDerivativeOrderBook) GetLimitSellOrders() []*DerivativeLimitOrder {
	if x != nil {
		return x.LimitSellOrders
	}
	return nil
}

func (x *ConditionalDerivativeOrderBook) GetMarketSellOrders() []*DerivativeMarketOrder {
	if x != nil {
		return x.MarketSellOrders
	}
	return nil
}

type SubaccountOrderbookMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The number of vanilla limit orders
	VanillaLimitOrderCount uint32 `protobuf:"varint,1,opt,name=vanilla_limit_order_count,json=vanillaLimitOrderCount,proto3" json:"vanilla_limit_order_count,omitempty"`
	// The number of reduce-only limit orders
	ReduceOnlyLimitOrderCount uint32 `protobuf:"varint,2,opt,name=reduce_only_limit_order_count,json=reduceOnlyLimitOrderCount,proto3" json:"reduce_only_limit_order_count,omitempty"`
	// The aggregate quantity of the subaccount's reduce-only limit orders (in
	// human readable format)
	AggregateReduceOnlyQuantity string `protobuf:"bytes,3,opt,name=aggregate_reduce_only_quantity,json=aggregateReduceOnlyQuantity,proto3" json:"aggregate_reduce_only_quantity,omitempty"`
	// The aggregate quantity of the subaccount's vanilla limit orders (in human
	// readable format)
	AggregateVanillaQuantity string `protobuf:"bytes,4,opt,name=aggregate_vanilla_quantity,json=aggregateVanillaQuantity,proto3" json:"aggregate_vanilla_quantity,omitempty"`
	// The number of vanilla conditional orders
	VanillaConditionalOrderCount uint32 `protobuf:"varint,5,opt,name=vanilla_conditional_order_count,json=vanillaConditionalOrderCount,proto3" json:"vanilla_conditional_order_count,omitempty"`
	// The number of reduce-only conditional orders
	ReduceOnlyConditionalOrderCount uint32 `protobuf:"varint,6,opt,name=reduce_only_conditional_order_count,json=reduceOnlyConditionalOrderCount,proto3" json:"reduce_only_conditional_order_count,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *SubaccountOrderbookMetadata) Reset() {
	*x = SubaccountOrderbookMetadata{}
	mi := &file_injective_exchange_v2_orderbook_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubaccountOrderbookMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubaccountOrderbookMetadata) ProtoMessage() {}

func (x *SubaccountOrderbookMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_injective_exchange_v2_orderbook_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubaccountOrderbookMetadata.ProtoReflect.Descriptor instead.
func (*SubaccountOrderbookMetadata) Descriptor() ([]byte, []int) {
	return file_injective_exchange_v2_orderbook_proto_rawDescGZIP(), []int{3}
}

func (x *SubaccountOrderbookMetadata) GetVanillaLimitOrderCount() uint32 {
	if x != nil {
		return x.VanillaLimitOrderCount
	}
	return 0
}

func (x *SubaccountOrderbookMetadata) GetReduceOnlyLimitOrderCount() uint32 {
	if x != nil {
		return x.ReduceOnlyLimitOrderCount
	}
	return 0
}

func (x *SubaccountOrderbookMetadata) GetAggregateReduceOnlyQuantity() string {
	if x != nil {
		return x.AggregateReduceOnlyQuantity
	}
	return ""
}

func (x *SubaccountOrderbookMetadata) GetAggregateVanillaQuantity() string {
	if x != nil {
		return x.AggregateVanillaQuantity
	}
	return ""
}

func (x *SubaccountOrderbookMetadata) GetVanillaConditionalOrderCount() uint32 {
	if x != nil {
		return x.VanillaConditionalOrderCount
	}
	return 0
}

func (x *SubaccountOrderbookMetadata) GetReduceOnlyConditionalOrderCount() uint32 {
	if x != nil {
		return x.ReduceOnlyConditionalOrderCount
	}
	return 0
}

var File_injective_exchange_v2_orderbook_proto protoreflect.FileDescriptor

const file_injective_exchange_v2_orderbook_proto_rawDesc = "" +
	"\n" +
	"%injective/exchange/v2/orderbook.proto\x12\x15injective.exchange.v2\x1a\x14gogoproto/gogo.proto\x1a!injective/exchange/v2/order.proto\"\x93\x01\n" +
	"\rSpotOrderBook\x12\x1b\n" +
	"\tmarket_id\x18\x01 \x01(\tR\bmarketId\x12\x1c\n" +
	"\tisBuySide\x18\x02 \x01(\bR\tisBuySide\x12=\n" +
	"\x06orders\x18\x03 \x03(\v2%.injective.exchange.v2.SpotLimitOrderR\x06orders:\b\x88\xa0\x1f\x00\xe8\xa0\x1f\x00\"\x9f\x01\n" +
	"\x13DerivativeOrderBook\x12\x1b\n" +
	"\tmarket_id\x18\x01 \x01(\tR\bmarketId\x12\x1c\n" +
	"\tisBuySide\x18\x02 \x01(\bR\tisBuySide\x12C\n" +
	"\x06orders\x18\x03 \x03(\v2+.injective.exchange.v2.DerivativeLimitOrderR\x06orders:\b\x88\xa0\x1f\x00\xe8\xa0\x1f\x00\"\xad\x03\n" +
	"\x1eConditionalDerivativeOrderBook\x12\x1b\n" +
	"\tmarket_id\x18\x01 \x01(\tR\bmarketId\x12U\n" +
	"\x10limit_buy_orders\x18\x02 \x03(\v2+.injective.exchange.v2.DerivativeLimitOrderR\x0elimitBuyOrders\x12X\n" +
	"\x11market_buy_orders\x18\x03 \x03(\v2,.injective.exchange.v2.DerivativeMarketOrderR\x0fmarketBuyOrders\x12W\n" +
	"\x11limit_sell_orders\x18\x04 \x03(\v2+.injective.exchange.v2.DerivativeLimitOrderR\x0flimitSellOrders\x12Z\n" +
	"\x12market_sell_orders\x18\x05 \x03(\v2,.injective.exchange.v2.DerivativeMarketOrderR\x10marketSellOrders:\b\x88\xa0\x1f\x00\xe8\xa0\x1f\x00\"\xfc\x03\n" +
	"\x1bSubaccountOrderbookMetadata\x129\n" +
	"\x19vanilla_limit_order_count\x18\x01 \x01(\rR\x16vanillaLimitOrderCount\x12@\n" +
	"\x1dreduce_only_limit_order_count\x18\x02 \x01(\rR\x19reduceOnlyLimitOrderCount\x12h\n" +
	"\x1eaggregate_reduce_only_quantity\x18\x03 \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x1baggregateReduceOnlyQuantity\x12a\n" +
	"\x1aaggregate_vanilla_quantity\x18\x04 \x01(\tB#\xc8\xde\x1f\x00\xda\xde\x1f\x1bcosmossdk.io/math.LegacyDecR\x18aggregateVanillaQuantity\x12E\n" +
	"\x1fvanilla_conditional_order_count\x18\x05 \x01(\rR\x1cvanillaConditionalOrderCount\x12L\n" +
	"#reduce_only_conditional_order_count\x18\x06 \x01(\rR\x1freduceOnlyConditionalOrderCountBSZQgithub.com/InjectiveLabs/injective-core/injective-chain/modules/exchange/types/v2b\x06proto3"

var (
	file_injective_exchange_v2_orderbook_proto_rawDescOnce sync.Once
	file_injective_exchange_v2_orderbook_proto_rawDescData []byte
)

func file_injective_exchange_v2_orderbook_proto_rawDescGZIP() []byte {
	file_injective_exchange_v2_orderbook_proto_rawDescOnce.Do(func() {
		file_injective_exchange_v2_orderbook_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_injective_exchange_v2_orderbook_proto_rawDesc), len(file_injective_exchange_v2_orderbook_proto_rawDesc)))
	})
	return file_injective_exchange_v2_orderbook_proto_rawDescData
}

var file_injective_exchange_v2_orderbook_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_injective_exchange_v2_orderbook_proto_goTypes = []any{
	(*SpotOrderBook)(nil),                  // 0: injective.exchange.v2.SpotOrderBook
	(*DerivativeOrderBook)(nil),            // 1: injective.exchange.v2.DerivativeOrderBook
	(*ConditionalDerivativeOrderBook)(nil), // 2: injective.exchange.v2.ConditionalDerivativeOrderBook
	(*SubaccountOrderbookMetadata)(nil),    // 3: injective.exchange.v2.SubaccountOrderbookMetadata
	(*SpotLimitOrder)(nil),                 // 4: injective.exchange.v2.SpotLimitOrder
	(*DerivativeLimitOrder)(nil),           // 5: injective.exchange.v2.DerivativeLimitOrder
	(*DerivativeMarketOrder)(nil),          // 6: injective.exchange.v2.DerivativeMarketOrder
}
var file_injective_exchange_v2_orderbook_proto_depIdxs = []int32{
	4, // 0: injective.exchange.v2.SpotOrderBook.orders:type_name -> injective.exchange.v2.SpotLimitOrder
	5, // 1: injective.exchange.v2.DerivativeOrderBook.orders:type_name -> injective.exchange.v2.DerivativeLimitOrder
	5, // 2: injective.exchange.v2.ConditionalDerivativeOrderBook.limit_buy_orders:type_name -> injective.exchange.v2.DerivativeLimitOrder
	6, // 3: injective.exchange.v2.ConditionalDerivativeOrderBook.market_buy_orders:type_name -> injective.exchange.v2.DerivativeMarketOrder
	5, // 4: injective.exchange.v2.ConditionalDerivativeOrderBook.limit_sell_orders:type_name -> injective.exchange.v2.DerivativeLimitOrder
	6, // 5: injective.exchange.v2.ConditionalDerivativeOrderBook.market_sell_orders:type_name -> injective.exchange.v2.DerivativeMarketOrder
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_injective_exchange_v2_orderbook_proto_init() }
func file_injective_exchange_v2_orderbook_proto_init() {
	if File_injective_exchange_v2_orderbook_proto != nil {
		return
	}
	file_injective_exchange_v2_order_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_injective_exchange_v2_orderbook_proto_rawDesc), len(file_injective_exchange_v2_orderbook_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_injective_exchange_v2_orderbook_proto_goTypes,
		DependencyIndexes: file_injective_exchange_v2_orderbook_proto_depIdxs,
		MessageInfos:      file_injective_exchange_v2_orderbook_proto_msgTypes,
	}.Build()
	File_injective_exchange_v2_orderbook_proto = out.File
	file_injective_exchange_v2_orderbook_proto_goTypes = nil
	file_injective_exchange_v2_orderbook_proto_depIdxs = nil
}
